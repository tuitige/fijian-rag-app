"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const client_textract_1 = require("@aws-sdk/client-textract");
const client_s3_1 = require("@aws-sdk/client-s3");
const opensearch_1 = require("@opensearch-project/opensearch");
const uuid_1 = require("uuid");
const textractClient = new client_textract_1.TextractClient({});
const s3Client = new client_s3_1.S3Client({});
const openSearchClient = new opensearch_1.Client({
    node: process.env.COLLECTION_ENDPOINT,
    ssl: {
        rejectUnauthorized: false
    }
});
const handler = async (event, context) => {
    try {
        console.log('Processing event:', JSON.stringify(event, null, 2));
        for (const record of event.Records) {
            await processS3Record(record);
        }
    }
    catch (error) {
        console.error('Error processing event:', error);
        throw error;
    }
};
exports.handler = handler;
async function processS3Record(record) {
    const bucket = record.s3.bucket.name;
    const key = decodeURIComponent(record.s3.object.key.replace(/\+/g, ' '));
    try {
        // Start text detection
        const startResponse = await textractClient.send(new client_textract_1.StartDocumentTextDetectionCommand({
            DocumentLocation: {
                S3Object: {
                    Bucket: bucket,
                    Name: key
                }
            }
        }));
        if (!startResponse.JobId) {
            throw new Error('No JobId returned from Textract');
        }
        // Poll for completion
        const textractResult = await waitForTextractCompletion(startResponse.JobId);
        // Extract text blocks
        const extractedText = textractResult.Blocks
            ?.filter(block => block.BlockType === 'LINE')
            .map(block => block.Text)
            .join('\n') || '';
        // Get original file metadata from S3
        const s3Response = await s3Client.send(new client_s3_1.GetObjectCommand({
            Bucket: bucket,
            Key: key
        }));
        // Save to OpenSearch
        const document = {
            id: (0, uuid_1.v4)(),
            type: 'learning_module',
            content: extractedText,
            sourceFile: {
                bucket,
                key,
                lastModified: s3Response.LastModified,
                contentType: s3Response.ContentType
            },
            metadata: {
                processedAt: new Date().toISOString(),
                confidence: calculateAverageConfidence(textractResult.Blocks),
                pageCount: countPages(textractResult.Blocks)
            }
        };
        await openSearchClient.index({
            index: process.env.COLLECTION_NAME || 'fijian-translations',
            body: document,
            refresh: true
        });
        console.log(`Successfully processed and indexed document: ${key}`);
    }
    catch (error) {
        console.error(`Error processing file ${key} from bucket ${bucket}:`, error);
        throw error;
    }
}
async function waitForTextractCompletion(jobId, maxAttempts = 60) {
    let attempts = 0;
    while (attempts < maxAttempts) {
        const response = await textractClient.send(new client_textract_1.GetDocumentTextDetectionCommand({
            JobId: jobId
        }));
        if (response.JobStatus === 'SUCCEEDED') {
            return response;
        }
        if (response.JobStatus === 'FAILED') {
            throw new Error(`Textract job failed: ${response.StatusMessage}`);
        }
        // Wait 2 seconds before next attempt
        await new Promise(resolve => setTimeout(resolve, 2000));
        attempts++;
    }
    throw new Error('Textract processing timed out');
}
function calculateAverageConfidence(blocks = []) {
    const confidenceValues = blocks
        .filter((block) => typeof block.Confidence === 'number')
        .map(block => block.Confidence);
    if (confidenceValues.length === 0)
        return 0;
    const sum = confidenceValues.reduce((acc, val) => acc + val, 0);
    return Number((sum / confidenceValues.length).toFixed(2));
}
function countPages(blocks = []) {
    return new Set(blocks.map(block => block.Page)).size;
}
//# sourceMappingURL=data:application/json;base64,