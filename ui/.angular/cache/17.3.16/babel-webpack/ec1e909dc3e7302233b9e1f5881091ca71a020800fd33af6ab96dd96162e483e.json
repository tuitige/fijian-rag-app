{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nexport var getEndpointFromRegion = function (input) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, tls, region, dnsHostRegex, useDualstackEndpoint, useFipsEndpoint, hostname;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = input.tls, tls = _a === void 0 ? true : _a;\n          return [4, input.region()];\n        case 1:\n          region = _c.sent();\n          dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);\n          if (!dnsHostRegex.test(region)) {\n            throw new Error(\"Invalid region in client config\");\n          }\n          return [4, input.useDualstackEndpoint()];\n        case 2:\n          useDualstackEndpoint = _c.sent();\n          return [4, input.useFipsEndpoint()];\n        case 3:\n          useFipsEndpoint = _c.sent();\n          return [4, input.regionInfoProvider(region, {\n            useDualstackEndpoint: useDualstackEndpoint,\n            useFipsEndpoint: useFipsEndpoint\n          })];\n        case 4:\n          hostname = ((_b = _c.sent()) !== null && _b !== void 0 ? _b : {}).hostname;\n          if (!hostname) {\n            throw new Error(\"Cannot resolve hostname from client config\");\n          }\n          return [2, input.urlParser(\"\".concat(tls ? \"https:\" : \"http:\", \"//\").concat(hostname))];\n      }\n    });\n  });\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}