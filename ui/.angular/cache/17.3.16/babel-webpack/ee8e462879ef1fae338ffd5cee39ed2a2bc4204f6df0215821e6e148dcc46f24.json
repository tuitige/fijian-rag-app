{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { getHostnameFromVariants } from \"./getHostnameFromVariants\";\nimport { getResolvedHostname } from \"./getResolvedHostname\";\nimport { getResolvedPartition } from \"./getResolvedPartition\";\nimport { getResolvedSigningRegion } from \"./getResolvedSigningRegion\";\nexport var getRegionInfo = function (region, _a) {\n  var _b, _c, _d, _e, _f, _g;\n  var _h = _a.useFipsEndpoint,\n    useFipsEndpoint = _h === void 0 ? false : _h,\n    _j = _a.useDualstackEndpoint,\n    useDualstackEndpoint = _j === void 0 ? false : _j,\n    signingService = _a.signingService,\n    regionHash = _a.regionHash,\n    partitionHash = _a.partitionHash;\n  var partition = getResolvedPartition(region, {\n    partitionHash: partitionHash\n  });\n  var resolvedRegion = region in regionHash ? region : (_c = (_b = partitionHash[partition]) === null || _b === void 0 ? void 0 : _b.endpoint) !== null && _c !== void 0 ? _c : region;\n  var hostnameOptions = {\n    useFipsEndpoint: useFipsEndpoint,\n    useDualstackEndpoint: useDualstackEndpoint\n  };\n  var regionHostname = getHostnameFromVariants((_d = regionHash[resolvedRegion]) === null || _d === void 0 ? void 0 : _d.variants, hostnameOptions);\n  var partitionHostname = getHostnameFromVariants((_e = partitionHash[partition]) === null || _e === void 0 ? void 0 : _e.variants, hostnameOptions);\n  var hostname = getResolvedHostname(resolvedRegion, {\n    regionHostname: regionHostname,\n    partitionHostname: partitionHostname\n  });\n  if (hostname === undefined) {\n    throw new Error(\"Endpoint resolution failed for: \".concat({\n      resolvedRegion: resolvedRegion,\n      useFipsEndpoint: useFipsEndpoint,\n      useDualstackEndpoint: useDualstackEndpoint\n    }));\n  }\n  var signingRegion = getResolvedSigningRegion(hostname, {\n    signingRegion: (_f = regionHash[resolvedRegion]) === null || _f === void 0 ? void 0 : _f.signingRegion,\n    regionRegex: partitionHash[partition].regionRegex,\n    useFipsEndpoint: useFipsEndpoint\n  });\n  return __assign(__assign({\n    partition: partition,\n    signingService: signingService,\n    hostname: hostname\n  }, signingRegion && {\n    signingRegion: signingRegion\n  }), ((_g = regionHash[resolvedRegion]) === null || _g === void 0 ? void 0 : _g.signingService) && {\n    signingService: regionHash[resolvedRegion].signingService\n  });\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}