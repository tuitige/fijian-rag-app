{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nexport var memoize = function (provider, isExpired, requiresRefresh) {\n  var resolved;\n  var pending;\n  var hasResult;\n  var isConstant = false;\n  var coalesceProvider = function () {\n    return __awaiter(void 0, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!pending) {\n              pending = provider();\n            }\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1,, 3, 4]);\n            return [4, pending];\n          case 2:\n            resolved = _a.sent();\n            hasResult = true;\n            isConstant = false;\n            return [3, 4];\n          case 3:\n            pending = undefined;\n            return [7];\n          case 4:\n            return [2, resolved];\n        }\n      });\n    });\n  };\n  if (isExpired === undefined) {\n    return function (options) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              if (!(!hasResult || (options === null || options === void 0 ? void 0 : options.forceRefresh))) return [3, 2];\n              return [4, coalesceProvider()];\n            case 1:\n              resolved = _a.sent();\n              _a.label = 2;\n            case 2:\n              return [2, resolved];\n          }\n        });\n      });\n    };\n  }\n  return function (options) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!(!hasResult || (options === null || options === void 0 ? void 0 : options.forceRefresh))) return [3, 2];\n            return [4, coalesceProvider()];\n          case 1:\n            resolved = _a.sent();\n            _a.label = 2;\n          case 2:\n            if (isConstant) {\n              return [2, resolved];\n            }\n            if (requiresRefresh && !requiresRefresh(resolved)) {\n              isConstant = true;\n              return [2, resolved];\n            }\n            if (!isExpired(resolved)) return [3, 4];\n            return [4, coalesceProvider()];\n          case 3:\n            _a.sent();\n            return [2, resolved];\n          case 4:\n            return [2, resolved];\n        }\n      });\n    });\n  };\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}