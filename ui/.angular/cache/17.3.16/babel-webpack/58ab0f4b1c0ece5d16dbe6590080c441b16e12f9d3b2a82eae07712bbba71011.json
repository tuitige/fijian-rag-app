{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (g && (g = 0, op[0] && (_ = 0)), _) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { ConsoleLogger as Logger } from '../Logger/ConsoleLogger';\nvar logger = new Logger('Util');\nvar NonRetryableError = /** @class */function (_super) {\n  __extends(NonRetryableError, _super);\n  function NonRetryableError(message) {\n    var _this = _super.call(this, message) || this;\n    _this.nonRetryable = true;\n    return _this;\n  }\n  return NonRetryableError;\n}(Error);\nexport { NonRetryableError };\nexport var isNonRetryableError = function (obj) {\n  var key = 'nonRetryable';\n  return obj && obj[key];\n};\n/**\n * @private\n * Internal use of Amplify only\n */\nexport function retry(functionToRetry, args, delayFn, onTerminate) {\n  return __awaiter(this, void 0, void 0, function () {\n    var _this = this;\n    return __generator(this, function (_a) {\n      if (typeof functionToRetry !== 'function') {\n        throw Error('functionToRetry must be a function');\n      }\n      return [2 /*return*/, new Promise(function (resolve, reject) {\n        return __awaiter(_this, void 0, void 0, function () {\n          var attempt, terminated, timeout, wakeUp, lastError, _loop_1, state_1;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                attempt = 0;\n                terminated = false;\n                wakeUp = function () {};\n                onTerminate && onTerminate.then(function () {\n                  // signal not to try anymore.\n                  terminated = true;\n                  // stop sleeping if we're sleeping.\n                  clearTimeout(timeout);\n                  wakeUp();\n                });\n                _loop_1 = function () {\n                  var _b, _c, err_1, retryIn_1;\n                  return __generator(this, function (_d) {\n                    switch (_d.label) {\n                      case 0:\n                        attempt++;\n                        logger.debug(\"\".concat(functionToRetry.name, \" attempt #\").concat(attempt, \" with this vars: \").concat(JSON.stringify(args)));\n                        _d.label = 1;\n                      case 1:\n                        _d.trys.push([1, 3,, 7]);\n                        _b = {};\n                        _c = resolve;\n                        return [4 /*yield*/, functionToRetry.apply(void 0, __spreadArray([], __read(args), false))];\n                      case 2:\n                        return [2 /*return*/, (_b.value = _c.apply(void 0, [_d.sent()]), _b)];\n                      case 3:\n                        err_1 = _d.sent();\n                        lastError = err_1;\n                        logger.debug(\"error on \".concat(functionToRetry.name), err_1);\n                        if (isNonRetryableError(err_1)) {\n                          logger.debug(\"\".concat(functionToRetry.name, \" non retryable error\"), err_1);\n                          return [2 /*return*/, {\n                            value: reject(err_1)\n                          }];\n                        }\n                        retryIn_1 = delayFn(attempt, args, err_1);\n                        logger.debug(\"\".concat(functionToRetry.name, \" retrying in \").concat(retryIn_1, \" ms\"));\n                        if (!(retryIn_1 === false || terminated)) return [3 /*break*/, 4];\n                        return [2 /*return*/, {\n                          value: reject(err_1)\n                        }];\n                      case 4:\n                        return [4 /*yield*/, new Promise(function (r) {\n                          wakeUp = r; // export wakeUp for onTerminate handling\n                          timeout = setTimeout(wakeUp, retryIn_1);\n                        })];\n                      case 5:\n                        _d.sent();\n                        _d.label = 6;\n                      case 6:\n                        return [3 /*break*/, 7];\n                      case 7:\n                        return [2 /*return*/];\n                    }\n                  });\n                };\n                _a.label = 1;\n              case 1:\n                if (!!terminated) return [3 /*break*/, 3];\n                return [5 /*yield**/, _loop_1()];\n              case 2:\n                state_1 = _a.sent();\n                if (typeof state_1 === \"object\") return [2 /*return*/, state_1.value];\n                return [3 /*break*/, 1];\n              case 3:\n                // reached if terminated while waiting for a timer.\n                reject(lastError);\n                return [2 /*return*/];\n            }\n          });\n        });\n      })];\n    });\n  });\n}\nvar MAX_DELAY_MS = 5 * 60 * 1000;\n/**\n * @private\n * Internal use of Amplify only\n */\nexport function jitteredBackoff(maxDelayMs) {\n  if (maxDelayMs === void 0) {\n    maxDelayMs = MAX_DELAY_MS;\n  }\n  var BASE_TIME_MS = 100;\n  var JITTER_FACTOR = 100;\n  return function (attempt) {\n    var delay = Math.pow(2, attempt) * BASE_TIME_MS + JITTER_FACTOR * Math.random();\n    return delay > maxDelayMs ? false : delay;\n  };\n}\n/**\n * @private\n * Internal use of Amplify only\n */\nexport var jitteredExponentialRetry = function (functionToRetry, args, maxDelayMs, onTerminate) {\n  if (maxDelayMs === void 0) {\n    maxDelayMs = MAX_DELAY_MS;\n  }\n  return retry(functionToRetry, args, jitteredBackoff(maxDelayMs), onTerminate);\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}