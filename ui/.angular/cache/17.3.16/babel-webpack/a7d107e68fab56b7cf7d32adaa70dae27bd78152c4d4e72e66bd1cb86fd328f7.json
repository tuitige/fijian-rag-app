{"ast":null,"code":"import { getActorContext as o, getActorState as s } from \"../actor.mjs\";\nimport { defaultFormFieldOptions as e } from \"../constants.mjs\";\nimport { getPrimaryAlias as r } from \"../context.mjs\";\nimport { isAuthFieldWithDefaults as t } from \"../form.mjs\";\nconst n = (s, r) => {\n    const {\n      country_code: t\n    } = o(s);\n    let n = e[r];\n    const {\n      type: a\n    } = n;\n    return \"tel\" === a && (n = Object.assign(Object.assign({}, n), {\n      dialCode: t\n    })), n;\n  },\n  a = o => {\n    const s = r(o);\n    return Object.assign(Object.assign({}, n(o, s)), {\n      autocomplete: \"username\"\n    });\n  },\n  c = o => ({\n    confirmation_code: Object.assign(Object.assign({}, n(o, \"confirmation_code\")), {\n      label: \"Code *\",\n      placeholder: \"Code\"\n    })\n  }),\n  i = {\n    signIn: o => ({\n      username: Object.assign({}, a(o)),\n      password: Object.assign(Object.assign({}, n(o, \"password\")), {\n        autocomplete: \"current-password\"\n      })\n    }),\n    signUp: o => {\n      const {\n          loginMechanisms: s,\n          signUpAttributes: e\n        } = o.context.config,\n        c = r(o),\n        i = Array.from(new Set([...s, \"password\", \"confirm_password\", ...e])),\n        d = {};\n      for (const s of i) if (t(s)) {\n        const e = s === c ? a(o) : n(o, s);\n        d[s] = Object.assign({}, e);\n      } else console.debug(`Authenticator does not have a default implementation for ${s}. Customize SignUp FormFields to add your own.`);\n      return d;\n    },\n    confirmSignUp: o => ({\n      confirmation_code: Object.assign(Object.assign({}, n(o, \"confirmation_code\")), {\n        placeholder: \"Enter your code\"\n      })\n    }),\n    confirmSignIn: c,\n    forceNewPassword: o => {\n      const e = s(o),\n        {\n          requiredAttributes: r\n        } = e.context,\n        a = Array.from(new Set([\"password\", \"confirm_password\", ...r])),\n        c = {};\n      for (const s of a) t(s) ? c[s] = Object.assign({}, n(o, s)) : console.debug(`Authenticator does not have a default implementation for ${s}. Customize ForceNewPassword FormFields to add your own.`);\n      return c;\n    },\n    resetPassword: o => {\n      const s = r(o),\n        {\n          label: t\n        } = e[s];\n      return {\n        username: Object.assign(Object.assign({}, a(o)), {\n          label: `Enter your ${t.toLowerCase()}`,\n          placeholder: `Enter your ${t.toLowerCase()}`\n        })\n      };\n    },\n    confirmResetPassword: o => Object.assign(Object.assign({}, c(o)), {\n      password: Object.assign(Object.assign({}, n(o, \"password\")), {\n        label: \"New Password\",\n        placeholder: \"New Password\"\n      }),\n      confirm_password: Object.assign(Object.assign({}, n(o, \"confirm_password\")), {\n        label: \"Confirm Password\",\n        placeholder: \"Confirm Password\"\n      })\n    }),\n    confirmVerifyUser: c,\n    setupTOTP: c\n  };\nexport { i as defaultFormFieldsGetters, a as getAliasDefaultFormField };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}