{"ast":null,"code":"import { __awaiter as e } from \"tslib\";\nimport { createMachine as r, sendUpdate as t } from \"xstate\";\nimport { runValidators as s } from \"../../../validators/index.mjs\";\nimport { clearError as a, clearFormValues as o, clearTouched as n, clearUsername as i, clearValidationError as d, handleInput as l, handleSubmit as c, handleBlur as m, resendCode as u, setFieldErrors as p, setRemoteError as g, setUsername as v } from \"../actions.mjs\";\nimport { defaultServices as E } from \"../defaultServices.mjs\";\nfunction f({\n  services: f\n}) {\n  return r({\n    id: \"resetPasswordActor\",\n    initial: \"init\",\n    predictableActionArguments: !0,\n    states: {\n      init: {\n        always: [{\n          target: \"confirmResetPassword\",\n          cond: \"shouldAutoConfirmReset\",\n          actions: \"resendCode\"\n        }, {\n          target: \"resetPassword\"\n        }]\n      },\n      resetPassword: {\n        initial: \"edit\",\n        exit: [\"clearFormValues\", \"clearError\", \"clearTouched\"],\n        states: {\n          edit: {\n            entry: \"sendUpdate\",\n            on: {\n              SUBMIT: {\n                actions: \"handleSubmit\",\n                target: \"submit\"\n              },\n              CHANGE: {\n                actions: \"handleInput\"\n              },\n              BLUR: {\n                actions: \"handleBlur\"\n              }\n            }\n          },\n          submit: {\n            tags: [\"pending\"],\n            entry: [\"sendUpdate\", \"setUsername\", \"clearError\"],\n            invoke: {\n              src: \"resetPassword\",\n              onDone: {\n                target: \"#resetPasswordActor.confirmResetPassword\"\n              },\n              onError: {\n                actions: [\"setRemoteError\"],\n                target: \"edit\"\n              }\n            }\n          }\n        }\n      },\n      confirmResetPassword: {\n        type: \"parallel\",\n        exit: [\"clearFormValues\", \"clearError\", \"clearUsername\", \"clearTouched\"],\n        states: {\n          validation: {\n            initial: \"pending\",\n            states: {\n              pending: {\n                invoke: {\n                  src: \"validateFields\",\n                  onDone: {\n                    target: \"valid\",\n                    actions: \"clearValidationError\"\n                  },\n                  onError: {\n                    target: \"invalid\",\n                    actions: \"setFieldErrors\"\n                  }\n                }\n              },\n              valid: {\n                entry: \"sendUpdate\"\n              },\n              invalid: {\n                entry: \"sendUpdate\"\n              }\n            },\n            on: {\n              CHANGE: {\n                actions: \"handleInput\",\n                target: \".pending\"\n              },\n              BLUR: {\n                actions: \"handleBlur\",\n                target: \".pending\"\n              }\n            }\n          },\n          submission: {\n            initial: \"idle\",\n            states: {\n              idle: {\n                entry: \"sendUpdate\",\n                on: {\n                  SUBMIT: {\n                    actions: \"handleSubmit\",\n                    target: \"validate\"\n                  },\n                  RESEND: \"resendCode\",\n                  CHANGE: {\n                    actions: \"handleInput\"\n                  },\n                  BLUR: {\n                    actions: \"handleBlur\"\n                  }\n                }\n              },\n              validate: {\n                entry: \"sendUpdate\",\n                invoke: {\n                  src: \"validateFields\",\n                  onDone: {\n                    target: \"pending\",\n                    actions: \"clearValidationError\"\n                  },\n                  onError: {\n                    target: \"idle\",\n                    actions: \"setFieldErrors\"\n                  }\n                }\n              },\n              resendCode: {\n                tags: [\"pending\"],\n                entry: [\"clearError\", \"sendUpdate\"],\n                invoke: {\n                  src: \"resetPassword\",\n                  onDone: {\n                    target: \"idle\"\n                  },\n                  onError: {\n                    actions: \"setRemoteError\",\n                    target: \"idle\"\n                  }\n                }\n              },\n              pending: {\n                tags: [\"pending\"],\n                entry: [\"clearError\", \"sendUpdate\"],\n                invoke: {\n                  src: \"confirmResetPassword\",\n                  onDone: {\n                    actions: \"clearUsername\",\n                    target: \"#resetPasswordActor.resolved\"\n                  },\n                  onError: {\n                    actions: \"setRemoteError\",\n                    target: \"idle\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      resolved: {\n        type: \"final\"\n      }\n    }\n  }, {\n    actions: {\n      clearError: a,\n      clearFormValues: o,\n      clearTouched: n,\n      clearUsername: i,\n      clearValidationError: d,\n      handleInput: l,\n      handleSubmit: c,\n      handleBlur: m,\n      resendCode: u,\n      setFieldErrors: p,\n      setRemoteError: g,\n      setUsername: v,\n      sendUpdate: t()\n    },\n    guards: {\n      shouldAutoConfirmReset: (e, r) => !(!e.intent || \"confirmPasswordReset\" !== e.intent)\n    },\n    services: {\n      resetPassword(r) {\n        return e(this, void 0, void 0, function* () {\n          const {\n            username: e\n          } = r;\n          return f.handleForgotPassword(e);\n        });\n      },\n      confirmResetPassword(r) {\n        return e(this, void 0, void 0, function* () {\n          const {\n              username: e\n            } = r,\n            {\n              confirmation_code: t,\n              password: s\n            } = r.formValues;\n          return f.handleForgotPasswordSubmit({\n            username: e,\n            code: t,\n            password: s\n          });\n        });\n      },\n      validateFields(r, t) {\n        return e(this, void 0, void 0, function* () {\n          return s(r.formValues, r.touched, r.passwordSettings, [E.validateFormPassword, E.validateConfirmPassword]);\n        });\n      }\n    }\n  });\n}\nexport { f as resetPasswordActor };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}