{"ast":null,"code":"import { __awaiter, __generator, __read, __values } from \"tslib\";\nimport { InternalAPI } from '@aws-amplify/api/internals';\nimport Observable from 'zen-observable-ts';\nimport { ProcessName } from '../../types';\nimport { buildGraphQLOperation, getModelAuthModes, getClientSideAuthError, getForbiddenError, predicateToGraphQLFilter, getTokenForCustomAuth } from '../utils';\nimport { jitteredExponentialRetry, Category, ConsoleLogger as Logger, DataStoreAction, Hub, NonRetryableError, BackgroundProcessManager } from '@aws-amplify/core';\nimport { ModelPredicateCreator } from '../../predicates';\nimport { getSyncErrorType } from './errorMaps';\nvar opResultDefaults = {\n  items: [],\n  nextToken: null,\n  startedAt: null\n};\nvar logger = new Logger('DataStore');\nvar SyncProcessor = /** @class */function () {\n  function SyncProcessor(schema, syncPredicates, amplifyConfig, authModeStrategy, errorHandler, amplifyContext) {\n    if (amplifyConfig === void 0) {\n      amplifyConfig = {};\n    }\n    this.schema = schema;\n    this.syncPredicates = syncPredicates;\n    this.amplifyConfig = amplifyConfig;\n    this.authModeStrategy = authModeStrategy;\n    this.errorHandler = errorHandler;\n    this.amplifyContext = amplifyContext;\n    this.typeQuery = new WeakMap();\n    this.runningProcesses = new BackgroundProcessManager();\n    amplifyContext.InternalAPI = amplifyContext.InternalAPI || InternalAPI;\n    this.generateQueries();\n  }\n  SyncProcessor.prototype.generateQueries = function () {\n    var _this = this;\n    Object.values(this.schema.namespaces).forEach(function (namespace) {\n      Object.values(namespace.models).filter(function (_a) {\n        var syncable = _a.syncable;\n        return syncable;\n      }).forEach(function (model) {\n        var _a = __read(buildGraphQLOperation(namespace, model, 'LIST'), 1),\n          _b = __read(_a[0]),\n          opNameQuery = _b.slice(1);\n        _this.typeQuery.set(model, opNameQuery);\n      });\n    });\n  };\n  SyncProcessor.prototype.graphqlFilterFromPredicate = function (model) {\n    if (!this.syncPredicates) {\n      return null;\n    }\n    var predicatesGroup = ModelPredicateCreator.getPredicates(this.syncPredicates.get(model), false);\n    if (!predicatesGroup) {\n      return null;\n    }\n    return predicateToGraphQLFilter(predicatesGroup);\n  };\n  SyncProcessor.prototype.retrievePage = function (modelDefinition, lastSync, nextToken, limit, filter, onTerminate) {\n    if (limit === void 0) {\n      limit = null;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, opName, query, variables, modelAuthModes, readAuthModes, authModeAttempts, authModeRetry, data, _b, _c, opResult, items, newNextToken, startedAt;\n      var _this = this;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            _a = __read(this.typeQuery.get(modelDefinition), 2), opName = _a[0], query = _a[1];\n            variables = {\n              limit: limit,\n              nextToken: nextToken,\n              lastSync: lastSync,\n              filter: filter\n            };\n            return [4 /*yield*/, getModelAuthModes({\n              authModeStrategy: this.authModeStrategy,\n              defaultAuthMode: this.amplifyConfig.aws_appsync_authenticationType,\n              modelName: modelDefinition.name,\n              schema: this.schema\n            })];\n          case 1:\n            modelAuthModes = _d.sent();\n            readAuthModes = modelAuthModes.READ;\n            authModeAttempts = 0;\n            authModeRetry = function () {\n              return __awaiter(_this, void 0, void 0, function () {\n                var response, error_1, authMode;\n                var _a;\n                return __generator(this, function (_b) {\n                  switch (_b.label) {\n                    case 0:\n                      if (!this.runningProcesses.isOpen) {\n                        throw new Error('sync.retreievePage termination was requested. Exiting.');\n                      }\n                      _b.label = 1;\n                    case 1:\n                      _b.trys.push([1, 3,, 5]);\n                      logger.debug(\"Attempting sync with authMode: \" + readAuthModes[authModeAttempts]);\n                      return [4 /*yield*/, this.jitteredRetry({\n                        query: query,\n                        variables: variables,\n                        opName: opName,\n                        modelDefinition: modelDefinition,\n                        authMode: readAuthModes[authModeAttempts],\n                        onTerminate: onTerminate\n                      })];\n                    case 2:\n                      response = _b.sent();\n                      logger.debug(\"Sync successful with authMode: \" + readAuthModes[authModeAttempts]);\n                      return [2 /*return*/, response];\n                    case 3:\n                      error_1 = _b.sent();\n                      authModeAttempts++;\n                      if (authModeAttempts >= readAuthModes.length) {\n                        authMode = readAuthModes[authModeAttempts - 1];\n                        logger.debug(\"Sync failed with authMode: \" + authMode, error_1);\n                        if (getClientSideAuthError(error_1) || getForbiddenError(error_1)) {\n                          // return empty list of data so DataStore will continue to sync other models\n                          logger.warn(\"User is unauthorized to query \" + opName + \" with auth mode \" + authMode + \". No data could be returned.\");\n                          return [2 /*return*/, {\n                            data: (_a = {}, _a[opName] = opResultDefaults, _a)\n                          }];\n                        }\n                        throw error_1;\n                      }\n                      logger.debug(\"Sync failed with authMode: \" + readAuthModes[authModeAttempts - 1] + \". Retrying with authMode: \" + readAuthModes[authModeAttempts]);\n                      return [4 /*yield*/, authModeRetry()];\n                    case 4:\n                      return [2 /*return*/, _b.sent()];\n                    case 5:\n                      return [2 /*return*/];\n                  }\n                });\n              });\n            };\n            return [4 /*yield*/, authModeRetry()];\n          case 2:\n            data = _d.sent().data;\n            _b = data, _c = opName, opResult = _b[_c];\n            items = opResult.items, newNextToken = opResult.nextToken, startedAt = opResult.startedAt;\n            return [2 /*return*/, {\n              nextToken: newNextToken,\n              startedAt: startedAt,\n              items: items\n            }];\n        }\n      });\n    });\n  };\n  SyncProcessor.prototype.jitteredRetry = function (_a) {\n    var query = _a.query,\n      variables = _a.variables,\n      opName = _a.opName,\n      modelDefinition = _a.modelDefinition,\n      authMode = _a.authMode,\n      onTerminate = _a.onTerminate;\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, jitteredExponentialRetry(function (query, variables) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var authToken, customUserAgentDetails, error_2, clientOrForbiddenErrorMessage, hasItems, unauthorized, otherErrors, result;\n                var _this = this;\n                var _a, _b, _c, _d;\n                return __generator(this, function (_e) {\n                  switch (_e.label) {\n                    case 0:\n                      _e.trys.push([0, 3,, 6]);\n                      return [4 /*yield*/, getTokenForCustomAuth(authMode, this.amplifyConfig)];\n                    case 1:\n                      authToken = _e.sent();\n                      customUserAgentDetails = {\n                        category: Category.DataStore,\n                        action: DataStoreAction.GraphQl\n                      };\n                      return [4 /*yield*/, this.amplifyContext.InternalAPI.graphql({\n                        query: query,\n                        variables: variables,\n                        authMode: authMode,\n                        authToken: authToken\n                      }, undefined, customUserAgentDetails)];\n                    case 2:\n                      return [2 /*return*/, _e.sent()];\n                    case 3:\n                      error_2 = _e.sent();\n                      clientOrForbiddenErrorMessage = getClientSideAuthError(error_2) || getForbiddenError(error_2);\n                      if (clientOrForbiddenErrorMessage) {\n                        logger.error('Sync processor retry error:', error_2);\n                        throw new NonRetryableError(clientOrForbiddenErrorMessage);\n                      }\n                      hasItems = Boolean((_b = (_a = error_2 === null || error_2 === void 0 ? void 0 : error_2.data) === null || _a === void 0 ? void 0 : _a[opName]) === null || _b === void 0 ? void 0 : _b.items);\n                      unauthorized = (error_2 === null || error_2 === void 0 ? void 0 : error_2.errors) && error_2.errors.some(function (err) {\n                        return err.errorType === 'Unauthorized';\n                      });\n                      otherErrors = (error_2 === null || error_2 === void 0 ? void 0 : error_2.errors) && error_2.errors.filter(function (err) {\n                        return err.errorType !== 'Unauthorized';\n                      });\n                      result = error_2;\n                      if (hasItems) {\n                        result.data[opName].items = result.data[opName].items.filter(function (item) {\n                          return item !== null;\n                        });\n                      }\n                      if (!(hasItems && (otherErrors === null || otherErrors === void 0 ? void 0 : otherErrors.length))) return [3 /*break*/, 5];\n                      return [4 /*yield*/, Promise.all(otherErrors.map(function (err) {\n                        return __awaiter(_this, void 0, void 0, function () {\n                          var e_1;\n                          return __generator(this, function (_a) {\n                            switch (_a.label) {\n                              case 0:\n                                _a.trys.push([0, 2,, 3]);\n                                return [4 /*yield*/, this.errorHandler({\n                                  recoverySuggestion: 'Ensure app code is up to date, auth directives exist and are correct on each model, and that server-side data has not been invalidated by a schema change. If the problem persists, search for or create an issue: https://github.com/aws-amplify/amplify-js/issues',\n                                  localModel: null,\n                                  message: err.message,\n                                  model: modelDefinition.name,\n                                  operation: opName,\n                                  errorType: getSyncErrorType(err),\n                                  process: ProcessName.sync,\n                                  remoteModel: null,\n                                  cause: err\n                                })];\n                              case 1:\n                                _a.sent();\n                                return [3 /*break*/, 3];\n                              case 2:\n                                e_1 = _a.sent();\n                                logger.error('Sync error handler failed with:', e_1);\n                                return [3 /*break*/, 3];\n                              case 3:\n                                return [2 /*return*/];\n                            }\n                          });\n                        });\n                      }))];\n                    case 4:\n                      _e.sent();\n                      Hub.dispatch('datastore', {\n                        event: 'nonApplicableDataReceived',\n                        data: {\n                          errors: otherErrors,\n                          modelName: modelDefinition.name\n                        }\n                      });\n                      _e.label = 5;\n                    case 5:\n                      /**\n                       * Handle $util.unauthorized() in resolver request mapper, which responses with something\n                       * like this:\n                       *\n                       * ```\n                       * {\n                       * \tdata: { syncYourModel: null },\n                       * \terrors: [\n                       * \t\t{\n                       * \t\t\tpath: ['syncLegacyJSONComments'],\n                       * \t\t\tdata: null,\n                       * \t\t\terrorType: 'Unauthorized',\n                       * \t\t\terrorInfo: null,\n                       * \t\t\tlocations: [{ line: 2, column: 3, sourceName: null }],\n                       * \t\t\tmessage:\n                       * \t\t\t\t'Not Authorized to access syncYourModel on type Query',\n                       * \t\t\t},\n                       * \t\t],\n                       * \t}\n                       * ```\n                       *\n                       * The correct handling for this is to signal that we've encountered a non-retryable error,\n                       * since the server has responded with an auth error and *NO DATA* at this point.\n                       */\n                      if (unauthorized) {\n                        this.errorHandler({\n                          recoverySuggestion: 'Ensure app code is up to date, auth directives exist and are correct on each model, and that server-side data has not been invalidated by a schema change. If the problem persists, search for or create an issue: https://github.com/aws-amplify/amplify-js/issues',\n                          localModel: null,\n                          message: error_2.message,\n                          model: modelDefinition.name,\n                          operation: opName,\n                          errorType: getSyncErrorType(error_2.errors[0]),\n                          process: ProcessName.sync,\n                          remoteModel: null,\n                          cause: error_2\n                        });\n                        throw new NonRetryableError(error_2);\n                      }\n                      if ((_d = (_c = result.data) === null || _c === void 0 ? void 0 : _c[opName].items) === null || _d === void 0 ? void 0 : _d.length) {\n                        return [2 /*return*/, result];\n                      }\n                      throw error_2;\n                    case 6:\n                      return [2 /*return*/];\n                  }\n                });\n              });\n            }, [query, variables], undefined, onTerminate)];\n          case 1:\n            return [2 /*return*/, _b.sent()];\n        }\n      });\n    });\n  };\n  SyncProcessor.prototype.start = function (typesLastSync) {\n    var _this = this;\n    var _a = this.amplifyConfig,\n      maxRecordsToSync = _a.maxRecordsToSync,\n      syncPageSize = _a.syncPageSize;\n    var parentPromises = new Map();\n    var observable = new Observable(function (observer) {\n      var sortedTypesLastSyncs = Object.values(_this.schema.namespaces).reduce(function (map, namespace) {\n        var e_2, _a;\n        try {\n          for (var _b = __values(Array.from(namespace.modelTopologicalOrdering.keys())), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var modelName = _c.value;\n            var typeLastSync = typesLastSync.get(namespace.models[modelName]);\n            map.set(namespace.models[modelName], typeLastSync);\n          }\n        } catch (e_2_1) {\n          e_2 = {\n            error: e_2_1\n          };\n        } finally {\n          try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n          } finally {\n            if (e_2) throw e_2.error;\n          }\n        }\n        return map;\n      }, new Map());\n      var allModelsReady = Array.from(sortedTypesLastSyncs.entries()).filter(function (_a) {\n        var _b = __read(_a, 1),\n          syncable = _b[0].syncable;\n        return syncable;\n      }).map(function (_a) {\n        var _b = __read(_a, 2),\n          modelDefinition = _b[0],\n          _c = __read(_b[1], 2),\n          namespace = _c[0],\n          lastSync = _c[1];\n        return _this.runningProcesses.isOpen && _this.runningProcesses.add(function (onTerminate) {\n          return __awaiter(_this, void 0, void 0, function () {\n            var done, nextToken, startedAt, items, recordsReceived, filter, parents, promises, promise;\n            var _this = this;\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  done = false;\n                  nextToken = null;\n                  startedAt = null;\n                  items = null;\n                  recordsReceived = 0;\n                  filter = this.graphqlFilterFromPredicate(modelDefinition);\n                  parents = this.schema.namespaces[namespace].modelTopologicalOrdering.get(modelDefinition.name);\n                  promises = parents.map(function (parent) {\n                    return parentPromises.get(namespace + \"_\" + parent);\n                  });\n                  promise = new Promise(function (res) {\n                    return __awaiter(_this, void 0, void 0, function () {\n                      var limit, error_3, e_3;\n                      var _a;\n                      return __generator(this, function (_b) {\n                        switch (_b.label) {\n                          case 0:\n                            return [4 /*yield*/, Promise.all(promises)];\n                          case 1:\n                            _b.sent();\n                            _b.label = 2;\n                          case 2:\n                            /**\n                             * If `runningProcesses` is not open, it means that the sync processor has been\n                             * stopped (for example by calling `DataStore.clear()` upstream) and has not yet\n                             * finished terminating and/or waiting for its background processes to complete.\n                             */\n                            if (!this.runningProcesses.isOpen) {\n                              logger.debug(\"Sync processor has been stopped, terminating sync for \" + modelDefinition.name);\n                              return [2 /*return*/, res()];\n                            }\n                            limit = Math.min(maxRecordsToSync - recordsReceived, syncPageSize);\n                            _b.label = 3;\n                          case 3:\n                            _b.trys.push([3, 5,, 10]);\n                            return [4 /*yield*/, this.retrievePage(modelDefinition, lastSync, nextToken, limit, filter, onTerminate)];\n                          case 4:\n                            _a = _b.sent(), items = _a.items, nextToken = _a.nextToken, startedAt = _a.startedAt;\n                            return [3 /*break*/, 10];\n                          case 5:\n                            error_3 = _b.sent();\n                            _b.label = 6;\n                          case 6:\n                            _b.trys.push([6, 8,, 9]);\n                            return [4 /*yield*/, this.errorHandler({\n                              recoverySuggestion: 'Ensure app code is up to date, auth directives exist and are correct on each model, and that server-side data has not been invalidated by a schema change. If the problem persists, search for or create an issue: https://github.com/aws-amplify/amplify-js/issues',\n                              localModel: null,\n                              message: error_3.message,\n                              model: modelDefinition.name,\n                              operation: null,\n                              errorType: getSyncErrorType(error_3),\n                              process: ProcessName.sync,\n                              remoteModel: null,\n                              cause: error_3\n                            })];\n                          case 7:\n                            _b.sent();\n                            return [3 /*break*/, 9];\n                          case 8:\n                            e_3 = _b.sent();\n                            logger.error('Sync error handler failed with:', e_3);\n                            return [3 /*break*/, 9];\n                          case 9:\n                            /**\n                             * If there's an error, this model fails, but the rest of the sync should\n                             * continue. To facilitate this, we explicitly mark this model as `done`\n                             * with no items and allow the loop to continue organically. This ensures\n                             * all callbacks (subscription messages) happen as normal, so anything\n                             * waiting on them knows the model is as done as it can be.\n                             */\n                            done = true;\n                            items = [];\n                            return [3 /*break*/, 10];\n                          case 10:\n                            recordsReceived += items.length;\n                            done = nextToken === null || recordsReceived >= maxRecordsToSync;\n                            observer.next({\n                              namespace: namespace,\n                              modelDefinition: modelDefinition,\n                              items: items,\n                              done: done,\n                              startedAt: startedAt,\n                              isFullSync: !lastSync\n                            });\n                            _b.label = 11;\n                          case 11:\n                            if (!done) return [3 /*break*/, 2];\n                            _b.label = 12;\n                          case 12:\n                            res();\n                            return [2 /*return*/];\n                        }\n                      });\n                    });\n                  });\n                  parentPromises.set(namespace + \"_\" + modelDefinition.name, promise);\n                  return [4 /*yield*/, promise];\n                case 1:\n                  _a.sent();\n                  return [2 /*return*/];\n              }\n            });\n          });\n        }, \"adding model \" + modelDefinition.name);\n      });\n      Promise.all(allModelsReady).then(function () {\n        observer.complete();\n      });\n    });\n    return observable;\n  };\n  SyncProcessor.prototype.stop = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('stopping sync processor');\n            return [4 /*yield*/, this.runningProcesses.close()];\n          case 1:\n            _a.sent();\n            return [4 /*yield*/, this.runningProcesses.open()];\n          case 2:\n            _a.sent();\n            logger.debug('sync processor stopped');\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  return SyncProcessor;\n}();\nexport { SyncProcessor };\n//# sourceMappingURL=sync.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}