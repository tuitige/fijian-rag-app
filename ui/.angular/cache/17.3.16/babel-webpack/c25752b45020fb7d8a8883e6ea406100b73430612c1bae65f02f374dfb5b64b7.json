{"ast":null,"code":"import { __awaiter, __generator, __read, __values } from \"tslib\";\nimport { OpType, QueryOne } from '../../types';\nimport { DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR, indexNameFromKeys, monotonicUlidFactory } from '../../util';\nimport { createInMemoryStore } from './InMemoryStore';\nvar DB_NAME = '@AmplifyDatastore';\nvar COLLECTION = 'Collection';\nvar DATA = 'Data';\nvar monotonicFactoriesMap = new Map();\nvar AsyncStorageDatabase = /** @class */function () {\n  function AsyncStorageDatabase() {\n    /**\n     * Maps storeNames to a map of ulid->id\n     */\n    this._collectionInMemoryIndex = new Map();\n    this.storage = createInMemoryStore();\n  }\n  /**\n   * Collection index is map of stores (i.e. sync, metadata, mutation event, and data)\n   * @param storeName {string} - Name of the store\n   * @returns Map of ulid->id\n   */\n  AsyncStorageDatabase.prototype.getCollectionIndex = function (storeName) {\n    if (!this._collectionInMemoryIndex.has(storeName)) {\n      this._collectionInMemoryIndex.set(storeName, new Map());\n    }\n    return this._collectionInMemoryIndex.get(storeName);\n  };\n  /**\n   * Return ULID for store if it exists, otherwise create a new one\n   * @param storeName {string} - Name of the store\n   * @returns ulid\n   */\n  AsyncStorageDatabase.prototype.getMonotonicFactory = function (storeName) {\n    if (!monotonicFactoriesMap.has(storeName)) {\n      monotonicFactoriesMap.set(storeName, monotonicUlidFactory());\n    }\n    return monotonicFactoriesMap.get(storeName);\n  };\n  AsyncStorageDatabase.prototype.init = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var allKeys, keysForCollectionEntries, allKeys_1, allKeys_1_1, key, _a, dbName, storeName, recordType, ulidOrId, id, ulid, id_1, newUlid, oldKey, newKey, item, e_1_1;\n      var e_1, _b;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            this._collectionInMemoryIndex.clear();\n            return [4 /*yield*/, this.storage.getAllKeys()];\n          case 1:\n            allKeys = _c.sent();\n            keysForCollectionEntries = [];\n            _c.label = 2;\n          case 2:\n            _c.trys.push([2, 12, 13, 14]);\n            allKeys_1 = __values(allKeys), allKeys_1_1 = allKeys_1.next();\n            _c.label = 3;\n          case 3:\n            if (!!allKeys_1_1.done) return [3 /*break*/, 11];\n            key = allKeys_1_1.value;\n            _a = __read(key.split('::'), 5), dbName = _a[0], storeName = _a[1], recordType = _a[2], ulidOrId = _a[3], id = _a[4];\n            if (!(dbName === DB_NAME)) return [3 /*break*/, 10];\n            if (!(recordType === DATA)) return [3 /*break*/, 9];\n            ulid = void 0;\n            if (!(id === undefined)) return [3 /*break*/, 7];\n            id_1 = ulidOrId;\n            newUlid = this.getMonotonicFactory(storeName)();\n            oldKey = this.getLegacyKeyForItem(storeName, id_1);\n            newKey = this.getKeyForItem(storeName, id_1, newUlid);\n            return [4 /*yield*/, this.storage.getItem(oldKey)];\n          case 4:\n            item = _c.sent();\n            return [4 /*yield*/, this.storage.setItem(newKey, item)];\n          case 5:\n            _c.sent();\n            return [4 /*yield*/, this.storage.removeItem(oldKey)];\n          case 6:\n            _c.sent();\n            ulid = newUlid;\n            return [3 /*break*/, 8];\n          case 7:\n            ulid = ulidOrId;\n            _c.label = 8;\n          case 8:\n            this.getCollectionIndex(storeName).set(id, ulid);\n            return [3 /*break*/, 10];\n          case 9:\n            if (recordType === COLLECTION) {\n              keysForCollectionEntries.push(key);\n            }\n            _c.label = 10;\n          case 10:\n            allKeys_1_1 = allKeys_1.next();\n            return [3 /*break*/, 3];\n          case 11:\n            return [3 /*break*/, 14];\n          case 12:\n            e_1_1 = _c.sent();\n            e_1 = {\n              error: e_1_1\n            };\n            return [3 /*break*/, 14];\n          case 13:\n            try {\n              if (allKeys_1_1 && !allKeys_1_1.done && (_b = allKeys_1.return)) _b.call(allKeys_1);\n            } finally {\n              if (e_1) throw e_1.error;\n            }\n            return [7 /*endfinally*/];\n          case 14:\n            if (!(keysForCollectionEntries.length > 0)) return [3 /*break*/, 16];\n            return [4 /*yield*/, this.storage.multiRemove(keysForCollectionEntries)];\n          case 15:\n            _c.sent();\n            _c.label = 16;\n          case 16:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  AsyncStorageDatabase.prototype.save = function (item, storeName, keys, keyValuesPath) {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function () {\n      var idxName, ulid, itemKey;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            idxName = indexNameFromKeys(keys);\n            ulid = ((_a = this.getCollectionIndex(storeName)) === null || _a === void 0 ? void 0 : _a.get(idxName)) || this.getMonotonicFactory(storeName)();\n            itemKey = this.getKeyForItem(storeName, keyValuesPath, ulid);\n            // Set key in collection index\n            (_b = this.getCollectionIndex(storeName)) === null || _b === void 0 ? void 0 : _b.set(keyValuesPath, ulid);\n            // Save item in db\n            return [4 /*yield*/, this.storage.setItem(itemKey, JSON.stringify(item))];\n          case 1:\n            // Save item in db\n            _c.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  AsyncStorageDatabase.prototype.batchSave = function (storeName, items, keys) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result, collection, keysToDelete, keysToSave, allItemsKeys, itemsMap, _loop_1, this_1, items_1, items_1_1, item, existingRecordsMap, existingRecordsKeys, allItemsKeys_1, allItemsKeys_1_1, key;\n      var e_2, _a, e_3, _b;\n      var _this = this;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            if (items.length === 0) {\n              return [2 /*return*/, []];\n            }\n            result = [];\n            collection = this.getCollectionIndex(storeName);\n            keysToDelete = new Set();\n            keysToSave = new Set();\n            allItemsKeys = [];\n            itemsMap = {};\n            _loop_1 = function (item) {\n              // Extract keys from concatenated key path, map to item values\n              var keyValues = keys.map(function (field) {\n                return item[field];\n              });\n              var _deleted = item._deleted;\n              // If id is in the store, retrieve, otherwise generate new ULID\n              var ulid = collection.get(keyValues.join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR)) || this_1.getMonotonicFactory(storeName)();\n              // Generate the \"longer key\" for the item\n              var key = this_1.getKeyForItem(storeName, keyValues.join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR), ulid);\n              allItemsKeys.push(key);\n              itemsMap[key] = {\n                ulid: ulid,\n                model: item\n              };\n              if (_deleted) {\n                keysToDelete.add(key);\n              } else {\n                keysToSave.add(key);\n              }\n            };\n            this_1 = this;\n            try {\n              /* Populate allItemKeys, keysToDelete, and keysToSave */\n              for (items_1 = __values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {\n                item = items_1_1.value;\n                _loop_1(item);\n              }\n            } catch (e_2_1) {\n              e_2 = {\n                error: e_2_1\n              };\n            } finally {\n              try {\n                if (items_1_1 && !items_1_1.done && (_a = items_1.return)) _a.call(items_1);\n              } finally {\n                if (e_2) throw e_2.error;\n              }\n            }\n            return [4 /*yield*/, this.storage.multiGet(allItemsKeys)];\n          case 1:\n            existingRecordsMap = _c.sent();\n            existingRecordsKeys = existingRecordsMap.filter(function (_a) {\n              var _b = __read(_a, 2),\n                v = _b[1];\n              return !!v;\n            }).reduce(function (set, _a) {\n              var _b = __read(_a, 1),\n                k = _b[0];\n              return set.add(k);\n            }, new Set());\n            // Delete\n            return [4 /*yield*/, new Promise(function (resolve, reject) {\n              if (keysToDelete.size === 0) {\n                resolve();\n                return;\n              }\n              var keysToDeleteArray = Array.from(keysToDelete);\n              keysToDeleteArray.forEach(function (key) {\n                // key: full db key\n                // keys: PK and/or SK keys\n                var primaryKeyValues = keys.map(function (field) {\n                  return itemsMap[key].model[field];\n                }).join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n                collection.delete(primaryKeyValues);\n              });\n              _this.storage.multiRemove(keysToDeleteArray, function (errors) {\n                if (errors && errors.length > 0) {\n                  reject(errors);\n                } else {\n                  resolve();\n                }\n              });\n            })];\n          case 2:\n            // Delete\n            _c.sent();\n            // Save\n            return [4 /*yield*/, new Promise(function (resolve, reject) {\n              if (keysToSave.size === 0) {\n                resolve();\n                return;\n              }\n              var entriesToSet = Array.from(keysToSave).map(function (key) {\n                return [key, JSON.stringify(itemsMap[key].model)];\n              });\n              keysToSave.forEach(function (key) {\n                var _a = itemsMap[key],\n                  model = _a.model,\n                  ulid = _a.ulid;\n                // Retrieve values from model, use as key for collection index\n                var keyValues = keys.map(function (field) {\n                  return model[field];\n                }).join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n                collection.set(keyValues, ulid);\n              });\n              _this.storage.multiSet(entriesToSet, function (errors) {\n                if (errors && errors.length > 0) {\n                  reject(errors);\n                } else {\n                  resolve();\n                }\n              });\n            })];\n          case 3:\n            // Save\n            _c.sent();\n            try {\n              for (allItemsKeys_1 = __values(allItemsKeys), allItemsKeys_1_1 = allItemsKeys_1.next(); !allItemsKeys_1_1.done; allItemsKeys_1_1 = allItemsKeys_1.next()) {\n                key = allItemsKeys_1_1.value;\n                if (keysToDelete.has(key) && existingRecordsKeys.has(key)) {\n                  result.push([itemsMap[key].model, OpType.DELETE]);\n                } else if (keysToSave.has(key)) {\n                  result.push([itemsMap[key].model, existingRecordsKeys.has(key) ? OpType.UPDATE : OpType.INSERT]);\n                }\n              }\n            } catch (e_3_1) {\n              e_3 = {\n                error: e_3_1\n              };\n            } finally {\n              try {\n                if (allItemsKeys_1_1 && !allItemsKeys_1_1.done && (_b = allItemsKeys_1.return)) _b.call(allItemsKeys_1);\n              } finally {\n                if (e_3) throw e_3.error;\n              }\n            }\n            return [2 /*return*/, result];\n        }\n      });\n    });\n  };\n  AsyncStorageDatabase.prototype.get = function (keyValuePath, storeName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var ulid, itemKey, recordAsString, record;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            ulid = this.getCollectionIndex(storeName).get(keyValuePath);\n            itemKey = this.getKeyForItem(storeName, keyValuePath, ulid);\n            return [4 /*yield*/, this.storage.getItem(itemKey)];\n          case 1:\n            recordAsString = _a.sent();\n            record = recordAsString && JSON.parse(recordAsString);\n            return [2 /*return*/, record];\n        }\n      });\n    });\n  };\n  AsyncStorageDatabase.prototype.getOne = function (firstOrLast, storeName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var collection, _a, itemId, ulid, itemKey, itemString, _b, result;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            collection = this.getCollectionIndex(storeName);\n            _a = __read(firstOrLast === QueryOne.FIRST ? function () {\n              var e_4, _a, _b;\n              var id, ulid;\n              try {\n                for (var collection_1 = __values(collection), collection_1_1 = collection_1.next(); !collection_1_1.done; collection_1_1 = collection_1.next()) {\n                  _b = __read(collection_1_1.value, 2), id = _b[0], ulid = _b[1];\n                  break;\n                } // Get first element of the set\n              } catch (e_4_1) {\n                e_4 = {\n                  error: e_4_1\n                };\n              } finally {\n                try {\n                  if (collection_1_1 && !collection_1_1.done && (_a = collection_1.return)) _a.call(collection_1);\n                } finally {\n                  if (e_4) throw e_4.error;\n                }\n              }\n              return [id, ulid];\n            }() : function () {\n              var e_5, _a, _b;\n              var id, ulid;\n              try {\n                for (var collection_2 = __values(collection), collection_2_1 = collection_2.next(); !collection_2_1.done; collection_2_1 = collection_2.next()) {\n                  _b = __read(collection_2_1.value, 2), id = _b[0], ulid = _b[1];\n                  ;\n                } // Get last element of the set\n              } catch (e_5_1) {\n                e_5 = {\n                  error: e_5_1\n                };\n              } finally {\n                try {\n                  if (collection_2_1 && !collection_2_1.done && (_a = collection_2.return)) _a.call(collection_2);\n                } finally {\n                  if (e_5) throw e_5.error;\n                }\n              }\n              return [id, ulid];\n            }(), 2), itemId = _a[0], ulid = _a[1];\n            itemKey = this.getKeyForItem(storeName, itemId, ulid);\n            _b = itemKey;\n            if (!_b) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.storage.getItem(itemKey)];\n          case 1:\n            _b = _c.sent();\n            _c.label = 2;\n          case 2:\n            itemString = _b;\n            result = itemString ? JSON.parse(itemString) || undefined : undefined;\n            return [2 /*return*/, result];\n        }\n      });\n    });\n  };\n  /**\n   * This function gets all the records stored in async storage for a particular storeName\n   * It then loads all the records for that filtered set of keys using multiGet()\n   */\n  AsyncStorageDatabase.prototype.getAll = function (storeName, pagination) {\n    return __awaiter(this, void 0, void 0, function () {\n      var collection, _a, _b, page, _c, limit, start, end, keysForStore, count, collection_3, collection_3_1, _d, id, ulid, storeRecordStrings, records;\n      var e_6, _e;\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            collection = this.getCollectionIndex(storeName);\n            _a = pagination || {}, _b = _a.page, page = _b === void 0 ? 0 : _b, _c = _a.limit, limit = _c === void 0 ? 0 : _c;\n            start = Math.max(0, page * limit) || 0;\n            end = limit > 0 ? start + limit : undefined;\n            keysForStore = [];\n            count = 0;\n            try {\n              for (collection_3 = __values(collection), collection_3_1 = collection_3.next(); !collection_3_1.done; collection_3_1 = collection_3.next()) {\n                _d = __read(collection_3_1.value, 2), id = _d[0], ulid = _d[1];\n                count++;\n                if (count <= start) {\n                  continue;\n                }\n                keysForStore.push(this.getKeyForItem(storeName, id, ulid));\n                if (count === end) {\n                  break;\n                }\n              }\n            } catch (e_6_1) {\n              e_6 = {\n                error: e_6_1\n              };\n            } finally {\n              try {\n                if (collection_3_1 && !collection_3_1.done && (_e = collection_3.return)) _e.call(collection_3);\n              } finally {\n                if (e_6) throw e_6.error;\n              }\n            }\n            return [4 /*yield*/, this.storage.multiGet(keysForStore)];\n          case 1:\n            storeRecordStrings = _f.sent();\n            records = storeRecordStrings.filter(function (_a) {\n              var _b = __read(_a, 2),\n                value = _b[1];\n              return value;\n            }).map(function (_a) {\n              var _b = __read(_a, 2),\n                value = _b[1];\n              return JSON.parse(value);\n            });\n            return [2 /*return*/, records];\n        }\n      });\n    });\n  };\n  AsyncStorageDatabase.prototype.delete = function (key, storeName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var ulid, itemKey;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            ulid = this.getCollectionIndex(storeName).get(key);\n            itemKey = this.getKeyForItem(storeName, key, ulid);\n            this.getCollectionIndex(storeName).delete(key);\n            return [4 /*yield*/, this.storage.removeItem(itemKey)];\n          case 1:\n            _a.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Clear the AsyncStorage of all DataStore entries\n   */\n  AsyncStorageDatabase.prototype.clear = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var allKeys, allDataStoreKeys;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.storage.getAllKeys()];\n          case 1:\n            allKeys = _a.sent();\n            allDataStoreKeys = allKeys.filter(function (key) {\n              return key.startsWith(DB_NAME);\n            });\n            return [4 /*yield*/, this.storage.multiRemove(allDataStoreKeys)];\n          case 2:\n            _a.sent();\n            this._collectionInMemoryIndex.clear();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  AsyncStorageDatabase.prototype.getKeyForItem = function (storeName, id, ulid) {\n    return this.getKeyPrefixForStoreItems(storeName) + \"::\" + ulid + \"::\" + id;\n  };\n  AsyncStorageDatabase.prototype.getLegacyKeyForItem = function (storeName, id) {\n    return this.getKeyPrefixForStoreItems(storeName) + \"::\" + id;\n  };\n  AsyncStorageDatabase.prototype.getKeyPrefixForStoreItems = function (storeName) {\n    return DB_NAME + \"::\" + storeName + \"::\" + DATA;\n  };\n  return AsyncStorageDatabase;\n}();\nexport default AsyncStorageDatabase;\n//# sourceMappingURL=AsyncStorageDatabase.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}