{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { browserOrNode, ConsoleLogger as Logger } from '@aws-amplify/core';\nimport noop from 'lodash/noop';\n// Per https://developer.mozilla.org/en-US/docs/Web/API/Page_Visibility_API\nvar hidden;\nvar visibilityChange;\nvar isBrowser = browserOrNode().isBrowser;\nif (isBrowser && document) {\n  if (typeof document.hidden !== 'undefined') {\n    hidden = 'hidden';\n    visibilityChange = 'visibilitychange';\n  } else if (typeof document['msHidden'] !== 'undefined') {\n    hidden = 'msHidden';\n    visibilityChange = 'msvisibilitychange';\n  } else if (typeof document['webkitHidden'] !== 'undefined') {\n    hidden = 'webkitHidden';\n    visibilityChange = 'webkitvisibilitychange';\n  }\n}\nvar logger = new Logger('InAppMessagingSessionTracker');\nvar SessionTracker = /** @class */function () {\n  function SessionTracker(sessionStateChangeHandler) {\n    var _this = this;\n    if (sessionStateChangeHandler === void 0) {\n      sessionStateChangeHandler = noop;\n    }\n    this.start = function () {\n      if (isBrowser) {\n        document === null || document === void 0 ? void 0 : document.addEventListener(visibilityChange, _this.visibilityChangeHandler);\n      }\n      return _this.getSessionState();\n    };\n    this.end = function () {\n      if (isBrowser) {\n        document === null || document === void 0 ? void 0 : document.removeEventListener(visibilityChange, _this.visibilityChangeHandler);\n      }\n      return _this.getSessionState();\n    };\n    this.getSessionState = function () {\n      if (isBrowser && document && !document[hidden]) {\n        return 'started';\n      }\n      // If, for any reason, document is undefined the session will never start\n      return 'ended';\n    };\n    this.visibilityChangeHandler = function () {\n      if (!isBrowser || !document) {\n        return;\n      }\n      if (document[hidden]) {\n        logger.debug('App is now hidden');\n        _this.sessionStateChangeHandler('ended');\n      } else {\n        logger.debug('App is now visible');\n        _this.sessionStateChangeHandler('started');\n      }\n    };\n    this.sessionStateChangeHandler = sessionStateChangeHandler;\n  }\n  return SessionTracker;\n}();\nexport default SessionTracker;\n//# sourceMappingURL=SessionTracker.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}