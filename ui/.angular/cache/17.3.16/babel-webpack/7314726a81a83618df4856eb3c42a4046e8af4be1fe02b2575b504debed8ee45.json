{"ast":null,"code":"import { __assign, __read, __spreadArray, __values } from \"tslib\";\nexport var constructStack = function () {\n  var absoluteEntries = [];\n  var relativeEntries = [];\n  var entriesNameSet = new Set();\n  var sort = function (entries) {\n    return entries.sort(function (a, b) {\n      return stepWeights[b.step] - stepWeights[a.step] || priorityWeights[b.priority || \"normal\"] - priorityWeights[a.priority || \"normal\"];\n    });\n  };\n  var removeByName = function (toRemove) {\n    var isRemoved = false;\n    var filterCb = function (entry) {\n      if (entry.name && entry.name === toRemove) {\n        isRemoved = true;\n        entriesNameSet.delete(toRemove);\n        return false;\n      }\n      return true;\n    };\n    absoluteEntries = absoluteEntries.filter(filterCb);\n    relativeEntries = relativeEntries.filter(filterCb);\n    return isRemoved;\n  };\n  var removeByReference = function (toRemove) {\n    var isRemoved = false;\n    var filterCb = function (entry) {\n      if (entry.middleware === toRemove) {\n        isRemoved = true;\n        if (entry.name) entriesNameSet.delete(entry.name);\n        return false;\n      }\n      return true;\n    };\n    absoluteEntries = absoluteEntries.filter(filterCb);\n    relativeEntries = relativeEntries.filter(filterCb);\n    return isRemoved;\n  };\n  var cloneTo = function (toStack) {\n    absoluteEntries.forEach(function (entry) {\n      toStack.add(entry.middleware, __assign({}, entry));\n    });\n    relativeEntries.forEach(function (entry) {\n      toStack.addRelativeTo(entry.middleware, __assign({}, entry));\n    });\n    return toStack;\n  };\n  var expandRelativeMiddlewareList = function (from) {\n    var expandedMiddlewareList = [];\n    from.before.forEach(function (entry) {\n      if (entry.before.length === 0 && entry.after.length === 0) {\n        expandedMiddlewareList.push(entry);\n      } else {\n        expandedMiddlewareList.push.apply(expandedMiddlewareList, __spreadArray([], __read(expandRelativeMiddlewareList(entry)), false));\n      }\n    });\n    expandedMiddlewareList.push(from);\n    from.after.reverse().forEach(function (entry) {\n      if (entry.before.length === 0 && entry.after.length === 0) {\n        expandedMiddlewareList.push(entry);\n      } else {\n        expandedMiddlewareList.push.apply(expandedMiddlewareList, __spreadArray([], __read(expandRelativeMiddlewareList(entry)), false));\n      }\n    });\n    return expandedMiddlewareList;\n  };\n  var getMiddlewareList = function (debug) {\n    if (debug === void 0) {\n      debug = false;\n    }\n    var normalizedAbsoluteEntries = [];\n    var normalizedRelativeEntries = [];\n    var normalizedEntriesNameMap = {};\n    absoluteEntries.forEach(function (entry) {\n      var normalizedEntry = __assign(__assign({}, entry), {\n        before: [],\n        after: []\n      });\n      if (normalizedEntry.name) normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;\n      normalizedAbsoluteEntries.push(normalizedEntry);\n    });\n    relativeEntries.forEach(function (entry) {\n      var normalizedEntry = __assign(__assign({}, entry), {\n        before: [],\n        after: []\n      });\n      if (normalizedEntry.name) normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;\n      normalizedRelativeEntries.push(normalizedEntry);\n    });\n    normalizedRelativeEntries.forEach(function (entry) {\n      if (entry.toMiddleware) {\n        var toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];\n        if (toMiddleware === undefined) {\n          if (debug) {\n            return;\n          }\n          throw new Error(\"\".concat(entry.toMiddleware, \" is not found when adding \").concat(entry.name || \"anonymous\", \" middleware \").concat(entry.relation, \" \").concat(entry.toMiddleware));\n        }\n        if (entry.relation === \"after\") {\n          toMiddleware.after.push(entry);\n        }\n        if (entry.relation === \"before\") {\n          toMiddleware.before.push(entry);\n        }\n      }\n    });\n    var mainChain = sort(normalizedAbsoluteEntries).map(expandRelativeMiddlewareList).reduce(function (wholeList, expendedMiddlewareList) {\n      wholeList.push.apply(wholeList, __spreadArray([], __read(expendedMiddlewareList), false));\n      return wholeList;\n    }, []);\n    return mainChain;\n  };\n  var stack = {\n    add: function (middleware, options) {\n      if (options === void 0) {\n        options = {};\n      }\n      var name = options.name,\n        override = options.override;\n      var entry = __assign({\n        step: \"initialize\",\n        priority: \"normal\",\n        middleware: middleware\n      }, options);\n      if (name) {\n        if (entriesNameSet.has(name)) {\n          if (!override) throw new Error(\"Duplicate middleware name '\".concat(name, \"'\"));\n          var toOverrideIndex = absoluteEntries.findIndex(function (entry) {\n            return entry.name === name;\n          });\n          var toOverride = absoluteEntries[toOverrideIndex];\n          if (toOverride.step !== entry.step || toOverride.priority !== entry.priority) {\n            throw new Error(\"\\\"\".concat(name, \"\\\" middleware with \").concat(toOverride.priority, \" priority in \").concat(toOverride.step, \" step cannot be \") + \"overridden by same-name middleware with \".concat(entry.priority, \" priority in \").concat(entry.step, \" step.\"));\n          }\n          absoluteEntries.splice(toOverrideIndex, 1);\n        }\n        entriesNameSet.add(name);\n      }\n      absoluteEntries.push(entry);\n    },\n    addRelativeTo: function (middleware, options) {\n      var name = options.name,\n        override = options.override;\n      var entry = __assign({\n        middleware: middleware\n      }, options);\n      if (name) {\n        if (entriesNameSet.has(name)) {\n          if (!override) throw new Error(\"Duplicate middleware name '\".concat(name, \"'\"));\n          var toOverrideIndex = relativeEntries.findIndex(function (entry) {\n            return entry.name === name;\n          });\n          var toOverride = relativeEntries[toOverrideIndex];\n          if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {\n            throw new Error(\"\\\"\".concat(name, \"\\\" middleware \").concat(toOverride.relation, \" \\\"\").concat(toOverride.toMiddleware, \"\\\" middleware cannot be overridden \") + \"by same-name middleware \".concat(entry.relation, \" \\\"\").concat(entry.toMiddleware, \"\\\" middleware.\"));\n          }\n          relativeEntries.splice(toOverrideIndex, 1);\n        }\n        entriesNameSet.add(name);\n      }\n      relativeEntries.push(entry);\n    },\n    clone: function () {\n      return cloneTo(constructStack());\n    },\n    use: function (plugin) {\n      plugin.applyToStack(stack);\n    },\n    remove: function (toRemove) {\n      if (typeof toRemove === \"string\") return removeByName(toRemove);else return removeByReference(toRemove);\n    },\n    removeByTag: function (toRemove) {\n      var isRemoved = false;\n      var filterCb = function (entry) {\n        var tags = entry.tags,\n          name = entry.name;\n        if (tags && tags.includes(toRemove)) {\n          if (name) entriesNameSet.delete(name);\n          isRemoved = true;\n          return false;\n        }\n        return true;\n      };\n      absoluteEntries = absoluteEntries.filter(filterCb);\n      relativeEntries = relativeEntries.filter(filterCb);\n      return isRemoved;\n    },\n    concat: function (from) {\n      var cloned = cloneTo(constructStack());\n      cloned.use(from);\n      return cloned;\n    },\n    applyToStack: cloneTo,\n    identify: function () {\n      return getMiddlewareList(true).map(function (mw) {\n        return mw.name + \": \" + (mw.tags || []).join(\",\");\n      });\n    },\n    resolve: function (handler, context) {\n      var e_1, _a;\n      try {\n        for (var _b = __values(getMiddlewareList().map(function (entry) {\n            return entry.middleware;\n          }).reverse()), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var middleware = _c.value;\n          handler = middleware(handler, context);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n      return handler;\n    }\n  };\n  return stack;\n};\nvar stepWeights = {\n  initialize: 5,\n  serialize: 4,\n  build: 3,\n  finalizeRequest: 2,\n  deserialize: 1\n};\nvar priorityWeights = {\n  high: 3,\n  normal: 2,\n  low: 1\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}