{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __assign, __awaiter, __generator, __rest } from \"tslib\";\nimport { Cache } from '@aws-amplify/cache';\nimport { ConsoleLogger as Logger, ClientDevice, Credentials, Signer, Hub, transferKeyToLowerCase, transferKeyToUpperCase, AnalyticsAction } from '@aws-amplify/core';\nimport { putEvents, updateEndpoint } from '@aws-amplify/core/internals/aws-clients/pinpoint';\nimport { v1 as uuid } from 'uuid';\nimport { getAnalyticsUserAgentString } from '../utils/UserAgent';\nimport EventBuffer from './EventBuffer';\nvar AMPLIFY_SYMBOL = typeof Symbol !== 'undefined' && typeof Symbol.for === 'function' ? Symbol.for('amplify_default') : '@@amplify_default';\nvar dispatchAnalyticsEvent = function (event, data) {\n  Hub.dispatch('analytics', {\n    event: event,\n    data: data\n  }, 'Analytics', AMPLIFY_SYMBOL);\n};\nvar logger = new Logger('AWSPinpointProvider');\nvar RETRYABLE_CODES = [429, 500];\nvar ACCEPTED_CODES = [202];\nvar FORBIDDEN_CODE = 403;\nvar MOBILE_SERVICE_NAME = 'mobiletargeting';\nvar EXPIRED_TOKEN_CODE = 'ExpiredTokenException';\nvar UPDATE_ENDPOINT = '_update_endpoint';\nvar SESSION_START = '_session.start';\nvar SESSION_STOP = '_session.stop';\nvar BEACON_SUPPORTED = typeof navigator !== 'undefined' && navigator && typeof navigator.sendBeacon === 'function';\n// events buffer\nvar BUFFER_SIZE = 1000;\nvar FLUSH_SIZE = 100;\nvar FLUSH_INTERVAL = 5 * 1000; // 5s\nvar RESEND_LIMIT = 5;\n// params: { event: {name: , .... }, timeStamp, config, resendLimits }\nvar AWSPinpointProvider = /** @class */function () {\n  function AWSPinpointProvider(config) {\n    this._endpointGenerating = true;\n    this._endpointUpdateInProgress = false;\n    this._buffer = null;\n    this._endpointBuffer = [];\n    this._config = config ? config : {};\n    this._config.bufferSize = this._config.bufferSize || BUFFER_SIZE;\n    this._config.flushSize = this._config.flushSize || FLUSH_SIZE;\n    this._config.flushInterval = this._config.flushInterval || FLUSH_INTERVAL;\n    this._config.resendLimit = this._config.resendLimit || RESEND_LIMIT;\n    this._clientInfo = ClientDevice.clientInfo();\n  }\n  /**\n   * get the category of the plugin\n   */\n  AWSPinpointProvider.prototype.getCategory = function () {\n    return AWSPinpointProvider.category;\n  };\n  /**\n   * get provider name of the plugin\n   */\n  AWSPinpointProvider.prototype.getProviderName = function () {\n    return AWSPinpointProvider.providerName;\n  };\n  /**\n   * configure the plugin\n   * @param {Object} config - configuration\n   */\n  AWSPinpointProvider.prototype.configure = function (config) {\n    var _this = this;\n    logger.debug('configure Analytics', config);\n    var conf = config || {};\n    this._config = Object.assign({}, this._config, conf);\n    // If autoSessionRecord is enabled, we need to wait for the endpoint to be\n    // updated before sending any events. See `sendEvents` in `Analytics.ts`\n    this._endpointGenerating = !!config['autoSessionRecord'];\n    if (this._config.appId && !this._config.disabled) {\n      if (!this._config.endpointId) {\n        var cacheKey = this.getProviderName() + '_' + this._config.appId;\n        this._getEndpointId(cacheKey).then(function (endpointId) {\n          logger.debug('setting endpoint id from the cache', endpointId);\n          _this._config.endpointId = endpointId;\n          dispatchAnalyticsEvent('pinpointProvider_configured', null);\n        }).catch(function (err) {\n          logger.debug('Failed to generate endpointId', err);\n        });\n      } else {\n        dispatchAnalyticsEvent('pinpointProvider_configured', null);\n      }\n    } else {\n      this._flushBuffer();\n    }\n    return this._config;\n  };\n  /**\n   * record an event\n   * @param {Object} params - the params of an event\n   */\n  AWSPinpointProvider.prototype.record = function (params, handlers) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, timestamp;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('_public record', params);\n            return [4 /*yield*/, this._getCredentials()];\n          case 1:\n            credentials = _a.sent();\n            if (!credentials || !this._config.appId || !this._config.region) {\n              logger.debug('cannot send events without credentials, applicationId or region');\n              return [2 /*return*/, handlers.reject(new Error('No credentials, applicationId or region'))];\n            }\n            this._init(credentials);\n            timestamp = new Date().getTime();\n            // attach the session and eventId\n            this._generateSession(params);\n            params.event.eventId = uuid();\n            Object.assign(params, {\n              timestamp: timestamp,\n              config: this._config\n            });\n            if (params.event.immediate) {\n              return [2 /*return*/, this._send(params, handlers)];\n            } else {\n              this._putToBuffer(params, handlers);\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  AWSPinpointProvider.prototype._sendEndpointUpdate = function (endpointObject) {\n    return __awaiter(this, void 0, void 0, function () {\n      var next;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this._endpointUpdateInProgress) {\n              this._endpointBuffer.push(endpointObject);\n              return [2 /*return*/];\n            }\n            this._endpointUpdateInProgress = true;\n            return [4 /*yield*/, this._updateEndpoint(endpointObject)];\n          case 1:\n            _a.sent();\n            next = this._endpointBuffer.shift();\n            this._endpointUpdateInProgress = false;\n            next && this._sendEndpointUpdate(next);\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * @private\n   * @param params - params for event recording\n   * Put events into buffer\n   */\n  AWSPinpointProvider.prototype._putToBuffer = function (params, handlers) {\n    var _a;\n    if (params.event.name === UPDATE_ENDPOINT) {\n      this._sendEndpointUpdate({\n        params: params,\n        handlers: handlers\n      });\n      return;\n    }\n    (_a = this._buffer) === null || _a === void 0 ? void 0 : _a.push({\n      params: params,\n      handlers: handlers\n    });\n  };\n  AWSPinpointProvider.prototype._generateSession = function (params) {\n    this._sessionId = this._sessionId || uuid();\n    var event = params.event;\n    switch (event.name) {\n      case SESSION_START:\n        // refresh the session id and session start time\n        this._sessionStartTimestamp = new Date().getTime();\n        this._sessionId = uuid();\n        event.session = {\n          Id: this._sessionId,\n          StartTimestamp: new Date(this._sessionStartTimestamp).toISOString()\n        };\n        break;\n      case SESSION_STOP:\n        var stopTimestamp = new Date().getTime();\n        this._sessionStartTimestamp = this._sessionStartTimestamp || new Date().getTime();\n        this._sessionId = this._sessionId || uuid();\n        event.session = {\n          Id: this._sessionId,\n          Duration: stopTimestamp - this._sessionStartTimestamp,\n          StartTimestamp: new Date(this._sessionStartTimestamp).toISOString(),\n          StopTimestamp: new Date(stopTimestamp).toISOString()\n        };\n        this._sessionId = undefined;\n        this._sessionStartTimestamp = undefined;\n        break;\n      default:\n        this._sessionStartTimestamp = this._sessionStartTimestamp || new Date().getTime();\n        this._sessionId = this._sessionId || uuid();\n        event.session = {\n          Id: this._sessionId,\n          StartTimestamp: new Date(this._sessionStartTimestamp).toISOString()\n        };\n    }\n  };\n  AWSPinpointProvider.prototype._send = function (params, handlers) {\n    return __awaiter(this, void 0, void 0, function () {\n      var event;\n      return __generator(this, function (_a) {\n        event = params.event;\n        switch (event.name) {\n          case UPDATE_ENDPOINT:\n            return [2 /*return*/, this._updateEndpoint({\n              params: params,\n              handlers: handlers\n            })];\n          case SESSION_STOP:\n            return [2 /*return*/, this._pinpointSendStopSession(params, handlers)];\n          default:\n            return [2 /*return*/, this._pinpointPutEvents(params, handlers)];\n        }\n        return [2 /*return*/];\n      });\n    });\n  };\n  AWSPinpointProvider.prototype._generateBatchItemContext = function (params) {\n    var _a, _b;\n    var event = params.event,\n      timestamp = params.timestamp,\n      config = params.config;\n    var name = event.name,\n      attributes = event.attributes,\n      metrics = event.metrics,\n      eventId = event.eventId,\n      session = event.session;\n    var appId = config.appId,\n      endpointId = config.endpointId;\n    var endpointContext = {};\n    return {\n      ApplicationId: appId,\n      EventsRequest: {\n        BatchItem: (_a = {}, _a[endpointId] = {\n          Endpoint: endpointContext,\n          Events: (_b = {}, _b[eventId] = {\n            EventType: name,\n            Timestamp: new Date(timestamp).toISOString(),\n            Attributes: attributes,\n            Metrics: metrics,\n            Session: session\n          }, _b)\n        }, _a)\n      }\n    };\n  };\n  AWSPinpointProvider.prototype._pinpointPutEvents = function (params, handlers) {\n    var _a, _b, _c, _d, _e;\n    return __awaiter(this, void 0, void 0, function () {\n      var eventId, endpointId, eventParams, _f, credentials, region, data, _g, StatusCode, Message, err_1;\n      return __generator(this, function (_h) {\n        switch (_h.label) {\n          case 0:\n            eventId = params.event.eventId, endpointId = params.config.endpointId;\n            eventParams = this._generateBatchItemContext(params);\n            _h.label = 1;\n          case 1:\n            _h.trys.push([1, 3,, 4]);\n            _f = this._config, credentials = _f.credentials, region = _f.region;\n            return [4 /*yield*/, putEvents({\n              credentials: credentials,\n              region: region,\n              userAgentValue: getAnalyticsUserAgentString(AnalyticsAction.Record)\n            }, eventParams)];\n          case 2:\n            data = _h.sent();\n            _g = (_e = (_d = (_c = (_b = (_a = data.EventsResponse) === null || _a === void 0 ? void 0 : _a.Results) === null || _b === void 0 ? void 0 : _b[endpointId]) === null || _c === void 0 ? void 0 : _c.EventsItemResponse) === null || _d === void 0 ? void 0 : _d[eventId]) !== null && _e !== void 0 ? _e : {}, StatusCode = _g.StatusCode, Message = _g.Message;\n            if (StatusCode && ACCEPTED_CODES.includes(StatusCode)) {\n              logger.debug('record event success. ', data);\n              return [2 /*return*/, handlers.resolve(data)];\n            } else if (StatusCode && RETRYABLE_CODES.includes(StatusCode)) {\n              // TODO: v6 integrate retry to the service handler retryDecider\n              this._retry(params, handlers);\n            } else {\n              logger.error(\"Event \" + eventId + \" is not accepted, the error is \" + Message);\n              return [2 /*return*/, handlers.reject(data)];\n            }\n            return [3 /*break*/, 4];\n          case 3:\n            err_1 = _h.sent();\n            this._eventError(err_1);\n            return [2 /*return*/, handlers.reject(err_1)];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  AWSPinpointProvider.prototype._pinpointSendStopSession = function (params, handlers) {\n    if (!BEACON_SUPPORTED) {\n      this._pinpointPutEvents(params, handlers);\n      return;\n    }\n    var eventParams = this._generateBatchItemContext(params);\n    var region = this._config.region;\n    var ApplicationId = eventParams.ApplicationId,\n      EventsRequest = eventParams.EventsRequest;\n    var accessInfo = {\n      secret_key: this._config.credentials.secretAccessKey,\n      access_key: this._config.credentials.accessKeyId,\n      session_token: this._config.credentials.sessionToken\n    };\n    var url = \"https://pinpoint.\" + region + \".amazonaws.com/v1/apps/\" + ApplicationId + \"/events/legacy\";\n    var body = JSON.stringify(EventsRequest);\n    var method = 'POST';\n    var request = {\n      url: url,\n      body: body,\n      method: method\n    };\n    var serviceInfo = {\n      region: region,\n      service: MOBILE_SERVICE_NAME\n    };\n    var requestUrl = Signer.signUrl(request, accessInfo, serviceInfo);\n    var success = navigator.sendBeacon(requestUrl, body);\n    if (success) {\n      return handlers.resolve('sendBeacon success');\n    }\n    return handlers.reject('sendBeacon failure');\n  };\n  AWSPinpointProvider.prototype._retry = function (params, handlers) {\n    var resendLimit = params.config.resendLimit;\n    // For backward compatibility\n    params.resendLimit = typeof params.resendLimit === 'number' ? params.resendLimit : resendLimit;\n    if (params.resendLimit-- > 0) {\n      logger.debug(\"resending event \" + params.eventName + \" with \" + params.resendLimit + \" retry times left\");\n      this._pinpointPutEvents(params, handlers);\n    } else {\n      logger.debug(\"retry times used up for event \" + params.eventName);\n    }\n  };\n  AWSPinpointProvider.prototype._updateEndpoint = function (endpointObject) {\n    return __awaiter(this, void 0, void 0, function () {\n      var params, handlers, config, event, appId, endpointId, request, update_params, _a, credentials, region, data, err_2, failureData;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            params = endpointObject.params, handlers = endpointObject.handlers;\n            config = params.config, event = params.event;\n            appId = config.appId, endpointId = config.endpointId;\n            request = this._endpointRequest(config, transferKeyToLowerCase(event, [], ['attributes', 'userAttributes', 'Attributes', 'UserAttributes']));\n            update_params = {\n              ApplicationId: appId,\n              EndpointId: endpointId,\n              EndpointRequest: request\n            };\n            _b.label = 1;\n          case 1:\n            _b.trys.push([1, 3,, 4]);\n            _a = this._config, credentials = _a.credentials, region = _a.region;\n            return [4 /*yield*/, updateEndpoint({\n              credentials: credentials,\n              region: region,\n              userAgentValue: getAnalyticsUserAgentString(AnalyticsAction.UpdateEndpoint)\n            }, update_params)];\n          case 2:\n            data = _b.sent();\n            logger.debug('updateEndpoint success', data);\n            this._endpointGenerating = false;\n            this._resumeBuffer();\n            handlers.resolve(data);\n            return [2 /*return*/];\n          case 3:\n            err_2 = _b.sent();\n            failureData = {\n              err: err_2,\n              update_params: update_params,\n              endpointObject: endpointObject\n            };\n            return [2 /*return*/, this._handleEndpointUpdateFailure(failureData)];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  AWSPinpointProvider.prototype._handleEndpointUpdateFailure = function (failureData) {\n    return __awaiter(this, void 0, void 0, function () {\n      var err, endpointObject, statusCode, exponential;\n      return __generator(this, function (_a) {\n        err = failureData.err, endpointObject = failureData.endpointObject;\n        statusCode = err.$metadata && err.$metadata.httpStatusCode;\n        logger.debug('updateEndpoint error', err);\n        switch (statusCode) {\n          case FORBIDDEN_CODE:\n            return [2 /*return*/, this._handleEndpointUpdateForbidden(failureData)];\n          default:\n            if (RETRYABLE_CODES.includes(statusCode)) {\n              exponential = true;\n              return [2 /*return*/, this._retryEndpointUpdate(endpointObject, exponential)];\n            }\n            logger.error('updateEndpoint failed', err);\n            endpointObject.handlers.reject(err);\n        }\n        return [2 /*return*/];\n      });\n    });\n  };\n  AWSPinpointProvider.prototype._handleEndpointUpdateForbidden = function (failureData) {\n    var err = failureData.err,\n      endpointObject = failureData.endpointObject;\n    var code = err.code,\n      retryable = err.retryable;\n    if (code !== EXPIRED_TOKEN_CODE && !retryable) {\n      return endpointObject.handlers.reject(err);\n    }\n    this._retryEndpointUpdate(endpointObject);\n  };\n  AWSPinpointProvider.prototype._retryEndpointUpdate = function (endpointObject, exponential) {\n    if (exponential === void 0) {\n      exponential = false;\n    }\n    logger.debug('_retryEndpointUpdate', endpointObject);\n    var params = endpointObject.params;\n    // TODO: implement retry with exp back off once exp function is available\n    var resendLimit = params.config.resendLimit;\n    params.resendLimit = typeof params.resendLimit === 'number' ? params.resendLimit : resendLimit;\n    if (params.resendLimit-- > 0) {\n      logger.debug(\"resending endpoint update \" + params.event.eventId + \" with \" + params.resendLimit + \" retry attempts remaining\");\n      // insert at the front of endpointBuffer\n      this._endpointBuffer.length ? this._endpointBuffer.unshift(endpointObject) : this._updateEndpoint(endpointObject);\n      return;\n    }\n    logger.warn(\"resending endpoint update \" + params.event.eventId + \" failed after \" + params.config.resendLimit + \" attempts\");\n    if (this._endpointGenerating) {\n      logger.error('Initial endpoint update failed. ');\n    }\n  };\n  /**\n   * @private\n   * @param config\n   * Configure credentials and init buffer\n   */\n  AWSPinpointProvider.prototype._init = function (credentials) {\n    return __awaiter(this, void 0, void 0, function () {\n      var identityId;\n      return __generator(this, function (_a) {\n        logger.debug('init provider');\n        if (this._config.credentials && this._config.credentials.sessionToken === credentials.sessionToken && this._config.credentials.identityId === credentials.identityId) {\n          logger.debug('no change for aws credentials, directly return from init');\n          return [2 /*return*/];\n        }\n        identityId = this._config.credentials ? this._config.credentials.identityId : null;\n        this._config.credentials = credentials;\n        if (!this._bufferExists() || identityId !== credentials.identityId) {\n          // if the identity has changed, flush the buffer and instantiate a new one\n          // this will cause the old buffer to send any remaining events\n          // with the old credentials and then stop looping and shortly thereafter get picked up by GC\n          this._initBuffer();\n        }\n        return [2 /*return*/];\n      });\n    });\n  };\n  AWSPinpointProvider.prototype._bufferExists = function () {\n    return this._buffer && this._buffer instanceof EventBuffer;\n  };\n  AWSPinpointProvider.prototype._initBuffer = function () {\n    if (this._bufferExists()) {\n      this._flushBuffer();\n    }\n    this._buffer = new EventBuffer(this._config);\n    // if the first endpoint update hasn't yet resolved pause the buffer to\n    // prevent race conditions. It will be resumed as soon as that request succeeds\n    if (this._endpointGenerating) {\n      this._buffer.pause();\n    }\n  };\n  AWSPinpointProvider.prototype._flushBuffer = function () {\n    var _a;\n    if (this._bufferExists()) {\n      (_a = this._buffer) === null || _a === void 0 ? void 0 : _a.flush();\n      this._buffer = null;\n    }\n  };\n  AWSPinpointProvider.prototype._resumeBuffer = function () {\n    var _a;\n    if (this._bufferExists()) {\n      (_a = this._buffer) === null || _a === void 0 ? void 0 : _a.resume();\n    }\n  };\n  AWSPinpointProvider.prototype._getEndpointId = function (cacheKey) {\n    return __awaiter(this, void 0, void 0, function () {\n      var endpointId, ttl, expiration;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, Cache.getItem(cacheKey)];\n          case 1:\n            endpointId = _a.sent();\n            logger.debug('endpointId from cache', endpointId, 'type', typeof endpointId);\n            if (!endpointId) {\n              endpointId = uuid();\n              ttl = 1000 * 60 * 60 * 24 * 365 * 100;\n              expiration = new Date().getTime() + ttl;\n              Cache.setItem(cacheKey, endpointId, {\n                expires: expiration,\n                priority: 1\n              });\n            }\n            return [2 /*return*/, endpointId];\n        }\n      });\n    });\n  };\n  /**\n   * EndPoint request\n   * @return {Object} - The request of updating endpoint\n   */\n  AWSPinpointProvider.prototype._endpointRequest = function (config, event) {\n    var credentials = config.credentials;\n    var clientInfo = this._clientInfo || {};\n    var clientContext = config.clientContext || {};\n    // for now we have three different ways for default endpoint configurations\n    // clientInfo\n    // clientContext (deprecated)\n    // config.endpoint\n    var defaultEndpointConfig = config.endpoint || {};\n    var demographicByClientInfo = {\n      appVersion: clientInfo.appVersion,\n      make: clientInfo.make,\n      model: clientInfo.model,\n      modelVersion: clientInfo.version,\n      platform: clientInfo.platform\n    };\n    // for backward compatibility\n    var clientId = clientContext.clientId,\n      appTitle = clientContext.appTitle,\n      appVersionName = clientContext.appVersionName,\n      appVersionCode = clientContext.appVersionCode,\n      appPackageName = clientContext.appPackageName,\n      demographicByClientContext = __rest(clientContext, [\"clientId\", \"appTitle\", \"appVersionName\", \"appVersionCode\", \"appPackageName\"]);\n    var channelType = event.address ? clientInfo.platform === 'android' ? 'GCM' : 'APNS' : undefined;\n    var tmp = __assign(__assign(__assign({\n      channelType: channelType,\n      requestId: uuid(),\n      effectiveDate: new Date().toISOString()\n    }, defaultEndpointConfig), event), {\n      attributes: __assign(__assign({}, defaultEndpointConfig.attributes), event.attributes),\n      demographic: __assign(__assign(__assign(__assign({}, demographicByClientInfo), demographicByClientContext), defaultEndpointConfig.demographic), event.demographic),\n      location: __assign(__assign({}, defaultEndpointConfig.location), event.location),\n      metrics: __assign(__assign({}, defaultEndpointConfig.metrics), event.metrics),\n      user: {\n        userId: event.userId || defaultEndpointConfig.userId || credentials.identityId,\n        userAttributes: __assign(__assign({}, defaultEndpointConfig.userAttributes), event.userAttributes)\n      }\n    });\n    // eliminate unnecessary params\n    var userId = tmp.userId,\n      userAttributes = tmp.userAttributes,\n      name = tmp.name,\n      session = tmp.session,\n      eventId = tmp.eventId,\n      immediate = tmp.immediate,\n      ret = __rest(tmp, [\"userId\", \"userAttributes\", \"name\", \"session\", \"eventId\", \"immediate\"]);\n    return transferKeyToUpperCase(ret, [], ['metrics', 'userAttributes', 'attributes']);\n  };\n  AWSPinpointProvider.prototype._eventError = function (err) {\n    logger.error('record event failed.', err);\n    logger.warn(\"Please ensure you have updated your Pinpoint IAM Policy \" + \"with the Action: \\\"mobiletargeting:PutEvents\\\" \" + \"in order to record events\");\n  };\n  AWSPinpointProvider.prototype._getCredentials = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, err_3;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, Credentials.get()];\n          case 1:\n            credentials = _a.sent();\n            if (!credentials) return [2 /*return*/, null];\n            logger.debug('set credentials for analytics', credentials);\n            return [2 /*return*/, Credentials.shear(credentials)];\n          case 2:\n            err_3 = _a.sent();\n            logger.debug('ensure credentials error', err_3);\n            return [2 /*return*/, null];\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  AWSPinpointProvider.category = 'Analytics';\n  AWSPinpointProvider.providerName = 'AWSPinpoint';\n  return AWSPinpointProvider;\n}();\nexport { AWSPinpointProvider };\n//# sourceMappingURL=AWSPinpointProvider.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}