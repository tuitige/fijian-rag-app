{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport Observable from 'zen-observable-ts';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { ReachabilityMonitor } from './datastoreReachability';\nvar logger = new Logger('DataStore');\nvar RECONNECTING_IN = 5000; // 5s this may be configurable in the future\nvar DataStoreConnectivity = /** @class */function () {\n  function DataStoreConnectivity() {\n    this.connectionStatus = {\n      online: false\n    };\n  }\n  DataStoreConnectivity.prototype.status = function () {\n    var _this = this;\n    if (this.observer) {\n      throw new Error('Subscriber already exists');\n    }\n    return new Observable(function (observer) {\n      _this.observer = observer;\n      // Will be used to forward socket connection changes, enhancing Reachability\n      _this.subscription = ReachabilityMonitor.subscribe(function (_a) {\n        var online = _a.online;\n        _this.connectionStatus.online = online;\n        var observerResult = __assign({}, _this.connectionStatus); // copyOf status\n        observer.next(observerResult);\n      });\n      return function () {\n        clearTimeout(_this.timeout);\n        _this.unsubscribe();\n      };\n    });\n  };\n  DataStoreConnectivity.prototype.unsubscribe = function () {\n    if (this.subscription) {\n      clearTimeout(this.timeout);\n      this.subscription.unsubscribe();\n    }\n  };\n  // for consistency with other background processors.\n  DataStoreConnectivity.prototype.stop = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        this.unsubscribe();\n        return [2 /*return*/];\n      });\n    });\n  };\n  DataStoreConnectivity.prototype.socketDisconnected = function () {\n    var _this = this;\n    if (this.observer && typeof this.observer.next === 'function') {\n      this.observer.next({\n        online: false\n      }); // Notify network issue from the socket\n      this.timeout = setTimeout(function () {\n        var observerResult = __assign({}, _this.connectionStatus); // copyOf status\n        _this.observer.next(observerResult);\n      }, RECONNECTING_IN); // giving time for socket cleanup and network status stabilization\n    }\n  };\n  return DataStoreConnectivity;\n}();\nexport default DataStoreConnectivity;\n//# sourceMappingURL=datastoreConnectivity.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}