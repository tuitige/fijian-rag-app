{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\n/**\n * Maps an object to a new object using the provided instructions.\n * The instructions are a map of the returning mapped object's property names to a single instruction of how to map the\n * value from the original object to the new object. There are two types of instructions:\n *\n * 1. A string representing the property name of the original object to map to the new object. The value mapped from\n * the original object will be the same as the value in the new object, and it can ONLY be string.\n *\n * 2. An array of two elements. The first element is the property name of the original object to map to the new object.\n * The second element is a function that takes the value from the original object and returns the value to be mapped to\n * the new object. The function can return any type.\n *\n * Example:\n * ```typescript\n * const input = {\n *   Foo: 'foo',\n *   BarList: [{value: 'bar1'}, {value: 'bar2'}]\n * }\n * const output = map(input, {\n *   someFoo: 'Foo',\n *   bar: ['BarList', (barList) => barList.map(bar => bar.value)]\n *   baz: 'Baz' // Baz does not exist in input, so it will not be in the output.\n * });\n * // output = { someFoo: 'foo', bar: ['bar1', 'bar2'] }\n * ```\n *\n * @param obj The object containing the data to compose mapped object.\n * @param instructions The instructions mapping the object values to the new object.\n * @returns A new object with the mapped values.\n *\n * @internal\n */\nexport var map = function (obj, instructions) {\n  var e_1, _a;\n  var result = {};\n  try {\n    for (var _b = __values(Object.entries(instructions)), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var _d = __read(_c.value, 2),\n        key = _d[0],\n        instruction = _d[1];\n      var _e = __read(Array.isArray(instruction) ? instruction : [instruction], 2),\n        accessor = _e[0],\n        deserializer = _e[1];\n      if (obj.hasOwnProperty(accessor)) {\n        result[key] = deserializer ? deserializer(obj[accessor]) : String(obj[accessor]);\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n  return result;\n};\n/**\n * Deserializes a string to a number. Returns undefined if input is undefined.\n *\n * @internal\n */\nexport var deserializeNumber = function (value) {\n  return value ? Number(value) : undefined;\n};\n/**\n * Deserializes a string to a boolean. Returns undefined if input is undefined. Returns true if input is 'true',\n * otherwise false.\n *\n * @internal\n */\nexport var deserializeBoolean = function (value) {\n  return value ? value === 'true' : undefined;\n};\n/**\n * Deserializes a string to a Date. Returns undefined if input is undefined.\n * It supports epoch timestamp; rfc3339(cannot have a UTC, fractional precision supported); rfc7231(section 7.1.1.1)\n *\n * @see https://www.epoch101.com/\n * @see https://datatracker.ietf.org/doc/html/rfc3339.html#section-5.6\n * @see https://datatracker.ietf.org/doc/html/rfc7231.html#section-7.1.1.1\n *\n * @note For bundle size consideration, we use Date constructor to parse the timestamp string. There might be slight\n * difference among browsers.\n *\n * @internal\n */\nexport var deserializeTimestamp = function (value) {\n  return value ? new Date(value) : undefined;\n};\n/**\n * Function that makes sure the deserializer receives non-empty array.\n *\n * @internal\n */\nexport var emptyArrayGuard = function (value, deserializer) {\n  if (value === '') {\n    return [];\n  }\n  var valueArray = (Array.isArray(value) ? value : [value]).filter(function (e) {\n    return e != null;\n  });\n  return deserializer(valueArray);\n};\n/**\n * @internal\n */\nexport var deserializeMetadata = function (headers) {\n  var objectMetadataHeaderPrefix = 'x-amz-meta-';\n  var deserialized = Object.keys(headers).filter(function (header) {\n    return header.startsWith(objectMetadataHeaderPrefix);\n  }).reduce(function (acc, header) {\n    acc[header.replace(objectMetadataHeaderPrefix, '')] = headers[header];\n    return acc;\n  }, {});\n  return Object.keys(deserialized).length > 0 ? deserialized : undefined;\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}