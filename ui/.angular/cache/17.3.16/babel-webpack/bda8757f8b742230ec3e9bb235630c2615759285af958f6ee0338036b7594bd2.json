{"ast":null,"code":"import { __read } from \"tslib\";\nimport { strictParseByte, strictParseDouble, strictParseFloat32, strictParseShort } from \"./parse-utils\";\nvar DAYS = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\nvar MONTHS = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\nexport function dateToUtcString(date) {\n  var year = date.getUTCFullYear();\n  var month = date.getUTCMonth();\n  var dayOfWeek = date.getUTCDay();\n  var dayOfMonthInt = date.getUTCDate();\n  var hoursInt = date.getUTCHours();\n  var minutesInt = date.getUTCMinutes();\n  var secondsInt = date.getUTCSeconds();\n  var dayOfMonthString = dayOfMonthInt < 10 ? \"0\".concat(dayOfMonthInt) : \"\".concat(dayOfMonthInt);\n  var hoursString = hoursInt < 10 ? \"0\".concat(hoursInt) : \"\".concat(hoursInt);\n  var minutesString = minutesInt < 10 ? \"0\".concat(minutesInt) : \"\".concat(minutesInt);\n  var secondsString = secondsInt < 10 ? \"0\".concat(secondsInt) : \"\".concat(secondsInt);\n  return \"\".concat(DAYS[dayOfWeek], \", \").concat(dayOfMonthString, \" \").concat(MONTHS[month], \" \").concat(year, \" \").concat(hoursString, \":\").concat(minutesString, \":\").concat(secondsString, \" GMT\");\n}\nvar RFC3339 = new RegExp(/^(\\d{4})-(\\d{2})-(\\d{2})[tT](\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))?[zZ]$/);\nexport var parseRfc3339DateTime = function (value) {\n  if (value === null || value === undefined) {\n    return undefined;\n  }\n  if (typeof value !== \"string\") {\n    throw new TypeError(\"RFC-3339 date-times must be expressed as strings\");\n  }\n  var match = RFC3339.exec(value);\n  if (!match) {\n    throw new TypeError(\"Invalid RFC-3339 date-time value\");\n  }\n  var _a = __read(match, 8),\n    _ = _a[0],\n    yearStr = _a[1],\n    monthStr = _a[2],\n    dayStr = _a[3],\n    hours = _a[4],\n    minutes = _a[5],\n    seconds = _a[6],\n    fractionalMilliseconds = _a[7];\n  var year = strictParseShort(stripLeadingZeroes(yearStr));\n  var month = parseDateValue(monthStr, \"month\", 1, 12);\n  var day = parseDateValue(dayStr, \"day\", 1, 31);\n  return buildDate(year, month, day, {\n    hours: hours,\n    minutes: minutes,\n    seconds: seconds,\n    fractionalMilliseconds: fractionalMilliseconds\n  });\n};\nvar IMF_FIXDATE = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\\d{2}) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\\d{4}) (\\d{1,2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))? GMT$/);\nvar RFC_850_DATE = new RegExp(/^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\\d{2})-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\\d{2}) (\\d{1,2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))? GMT$/);\nvar ASC_TIME = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( [1-9]|\\d{2}) (\\d{1,2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))? (\\d{4})$/);\nexport var parseRfc7231DateTime = function (value) {\n  if (value === null || value === undefined) {\n    return undefined;\n  }\n  if (typeof value !== \"string\") {\n    throw new TypeError(\"RFC-7231 date-times must be expressed as strings\");\n  }\n  var match = IMF_FIXDATE.exec(value);\n  if (match) {\n    var _a = __read(match, 8),\n      _1 = _a[0],\n      dayStr = _a[1],\n      monthStr = _a[2],\n      yearStr = _a[3],\n      hours = _a[4],\n      minutes = _a[5],\n      seconds = _a[6],\n      fractionalMilliseconds = _a[7];\n    return buildDate(strictParseShort(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr, \"day\", 1, 31), {\n      hours: hours,\n      minutes: minutes,\n      seconds: seconds,\n      fractionalMilliseconds: fractionalMilliseconds\n    });\n  }\n  match = RFC_850_DATE.exec(value);\n  if (match) {\n    var _b = __read(match, 8),\n      _2 = _b[0],\n      dayStr = _b[1],\n      monthStr = _b[2],\n      yearStr = _b[3],\n      hours = _b[4],\n      minutes = _b[5],\n      seconds = _b[6],\n      fractionalMilliseconds = _b[7];\n    return adjustRfc850Year(buildDate(parseTwoDigitYear(yearStr), parseMonthByShortName(monthStr), parseDateValue(dayStr, \"day\", 1, 31), {\n      hours: hours,\n      minutes: minutes,\n      seconds: seconds,\n      fractionalMilliseconds: fractionalMilliseconds\n    }));\n  }\n  match = ASC_TIME.exec(value);\n  if (match) {\n    var _c = __read(match, 8),\n      _3 = _c[0],\n      monthStr = _c[1],\n      dayStr = _c[2],\n      hours = _c[3],\n      minutes = _c[4],\n      seconds = _c[5],\n      fractionalMilliseconds = _c[6],\n      yearStr = _c[7];\n    return buildDate(strictParseShort(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr.trimLeft(), \"day\", 1, 31), {\n      hours: hours,\n      minutes: minutes,\n      seconds: seconds,\n      fractionalMilliseconds: fractionalMilliseconds\n    });\n  }\n  throw new TypeError(\"Invalid RFC-7231 date-time value\");\n};\nexport var parseEpochTimestamp = function (value) {\n  if (value === null || value === undefined) {\n    return undefined;\n  }\n  var valueAsDouble;\n  if (typeof value === \"number\") {\n    valueAsDouble = value;\n  } else if (typeof value === \"string\") {\n    valueAsDouble = strictParseDouble(value);\n  } else {\n    throw new TypeError(\"Epoch timestamps must be expressed as floating point numbers or their string representation\");\n  }\n  if (Number.isNaN(valueAsDouble) || valueAsDouble === Infinity || valueAsDouble === -Infinity) {\n    throw new TypeError(\"Epoch timestamps must be valid, non-Infinite, non-NaN numerics\");\n  }\n  return new Date(Math.round(valueAsDouble * 1000));\n};\nvar buildDate = function (year, month, day, time) {\n  var adjustedMonth = month - 1;\n  validateDayOfMonth(year, adjustedMonth, day);\n  return new Date(Date.UTC(year, adjustedMonth, day, parseDateValue(time.hours, \"hour\", 0, 23), parseDateValue(time.minutes, \"minute\", 0, 59), parseDateValue(time.seconds, \"seconds\", 0, 60), parseMilliseconds(time.fractionalMilliseconds)));\n};\nvar parseTwoDigitYear = function (value) {\n  var thisYear = new Date().getUTCFullYear();\n  var valueInThisCentury = Math.floor(thisYear / 100) * 100 + strictParseShort(stripLeadingZeroes(value));\n  if (valueInThisCentury < thisYear) {\n    return valueInThisCentury + 100;\n  }\n  return valueInThisCentury;\n};\nvar FIFTY_YEARS_IN_MILLIS = 50 * 365 * 24 * 60 * 60 * 1000;\nvar adjustRfc850Year = function (input) {\n  if (input.getTime() - new Date().getTime() > FIFTY_YEARS_IN_MILLIS) {\n    return new Date(Date.UTC(input.getUTCFullYear() - 100, input.getUTCMonth(), input.getUTCDate(), input.getUTCHours(), input.getUTCMinutes(), input.getUTCSeconds(), input.getUTCMilliseconds()));\n  }\n  return input;\n};\nvar parseMonthByShortName = function (value) {\n  var monthIdx = MONTHS.indexOf(value);\n  if (monthIdx < 0) {\n    throw new TypeError(\"Invalid month: \".concat(value));\n  }\n  return monthIdx + 1;\n};\nvar DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nvar validateDayOfMonth = function (year, month, day) {\n  var maxDays = DAYS_IN_MONTH[month];\n  if (month === 1 && isLeapYear(year)) {\n    maxDays = 29;\n  }\n  if (day > maxDays) {\n    throw new TypeError(\"Invalid day for \".concat(MONTHS[month], \" in \").concat(year, \": \").concat(day));\n  }\n};\nvar isLeapYear = function (year) {\n  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n};\nvar parseDateValue = function (value, type, lower, upper) {\n  var dateVal = strictParseByte(stripLeadingZeroes(value));\n  if (dateVal < lower || dateVal > upper) {\n    throw new TypeError(\"\".concat(type, \" must be between \").concat(lower, \" and \").concat(upper, \", inclusive\"));\n  }\n  return dateVal;\n};\nvar parseMilliseconds = function (value) {\n  if (value === null || value === undefined) {\n    return 0;\n  }\n  return strictParseFloat32(\"0.\" + value) * 1000;\n};\nvar stripLeadingZeroes = function (value) {\n  var idx = 0;\n  while (idx < value.length - 1 && value.charAt(idx) === \"0\") {\n    idx++;\n  }\n  if (idx === 0) {\n    return value;\n  }\n  return value.slice(idx);\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}