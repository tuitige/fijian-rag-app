{"ast":null,"code":"import { __assign, __awaiter, __extends, __generator } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AbstractInteractionsProvider } from './InteractionsProvider';\nimport { LexRuntimeV2Client, RecognizeTextCommand, RecognizeUtteranceCommand } from '@aws-sdk/client-lex-runtime-v2';\nimport { ConsoleLogger as Logger, Credentials, getAmplifyUserAgentObject } from '@aws-amplify/core';\nimport { convert } from './AWSLexProviderHelper/utils';\nimport { unGzipBase64AsJson } from './AWSLexProviderHelper/commonUtils';\nvar logger = new Logger('AWSLexV2Provider');\nvar AWSLexV2Provider = /** @class */function (_super) {\n  __extends(AWSLexV2Provider, _super);\n  /**\n   * Initialize Interactions with AWS configurations\n   * @param {InteractionsOptions} options - Configuration object for Interactions\n   */\n  function AWSLexV2Provider(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var _this = _super.call(this, options) || this;\n    _this._botsCompleteCallback = {};\n    return _this;\n  }\n  /**\n   * get provider name of the plugin\n   * @returns {string} name of the provider\n   */\n  AWSLexV2Provider.prototype.getProviderName = function () {\n    return 'AWSLexV2Provider';\n  };\n  /**\n   * Configure Interactions part with aws configuration\n   * @param {AWSLexV2ProviderOptions} config - Configuration of the Interactions\n   * @return {AWSLexV2ProviderOptions} - Current configuration\n   */\n  AWSLexV2Provider.prototype.configure = function (config) {\n    if (config === void 0) {\n      config = {};\n    }\n    var propertiesToTest = ['name', 'botId', 'aliasId', 'localeId', 'providerName', 'region'];\n    Object.keys(config).forEach(function (botKey) {\n      var botConfig = config[botKey];\n      // is bot config correct\n      if (!propertiesToTest.every(function (x) {\n        return x in botConfig;\n      })) {\n        throw new Error('invalid bot configuration');\n      }\n    });\n    return _super.prototype.configure.call(this, config);\n  };\n  /**\n   * Send a message to a bot\n   * @async\n   * @param {string} botname - Bot name to send the message\n   * @param {string | InteractionsMessage} message - message to send to the bot\n   * @return {Promise<InteractionsResponse>} A promise resolves to the response from the bot\n   */\n  AWSLexV2Provider.prototype.sendMessage = function (botname, message) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, error_1, response, reqBaseParams;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // check if bot exists\n            if (!this._config[botname]) {\n              return [2 /*return*/, Promise.reject('Bot ' + botname + ' does not exist')];\n            }\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, Credentials.get()];\n          case 2:\n            credentials = _a.sent();\n            return [3 /*break*/, 4];\n          case 3:\n            error_1 = _a.sent();\n            return [2 /*return*/, Promise.reject('No credentials')];\n          case 4:\n            this._lexRuntimeServiceV2Client = new LexRuntimeV2Client({\n              region: this._config[botname].region,\n              credentials: credentials,\n              customUserAgent: getAmplifyUserAgentObject()\n            });\n            reqBaseParams = {\n              botAliasId: this._config[botname].aliasId,\n              botId: this._config[botname].botId,\n              localeId: this._config[botname].localeId,\n              sessionId: credentials.identityId\n            };\n            if (!(typeof message === 'string')) return [3 /*break*/, 6];\n            return [4 /*yield*/, this._handleRecognizeTextCommand(botname, message, reqBaseParams)];\n          case 5:\n            response = _a.sent();\n            return [3 /*break*/, 8];\n          case 6:\n            return [4 /*yield*/, this._handleRecognizeUtteranceCommand(botname, message, reqBaseParams)];\n          case 7:\n            response = _a.sent();\n            _a.label = 8;\n          case 8:\n            return [2 /*return*/, response];\n        }\n      });\n    });\n  };\n  /**\n   * Attach a onComplete callback function to a bot.\n   * The callback is called once the bot's intent is fulfilled\n   * @param {string} botname - Bot name to attach the onComplete callback\n   * @param {(err: Error | null, confirmation: InteractionsResponse) => void} callback - called when Intent Fulfilled\n   */\n  AWSLexV2Provider.prototype.onComplete = function (botname, callback) {\n    // does bot exist\n    if (!this._config[botname]) {\n      throw new Error('Bot ' + botname + ' does not exist');\n    }\n    this._botsCompleteCallback[botname] = callback;\n  };\n  /**\n   * @private\n   * call onComplete callback for a bot if configured\n   */\n  AWSLexV2Provider.prototype._reportBotStatus = function (data, botname) {\n    var _this = this;\n    var _a, _b, _c, _d, _e, _f;\n    var sessionState = data === null || data === void 0 ? void 0 : data.sessionState;\n    // Check if state is fulfilled to resolve onFullfilment promise\n    logger.debug('postContent state', (_a = sessionState === null || sessionState === void 0 ? void 0 : sessionState.intent) === null || _a === void 0 ? void 0 : _a.state);\n    var isConfigOnCompleteAttached = typeof ((_b = this._config) === null || _b === void 0 ? void 0 : _b[botname].onComplete) === 'function';\n    var isApiOnCompleteAttached = typeof ((_c = this._botsCompleteCallback) === null || _c === void 0 ? void 0 : _c[botname]) === 'function';\n    // no onComplete callbacks added\n    if (!isConfigOnCompleteAttached && !isApiOnCompleteAttached) return;\n    if (((_d = sessionState === null || sessionState === void 0 ? void 0 : sessionState.intent) === null || _d === void 0 ? void 0 : _d.state) === 'ReadyForFulfillment' || ((_e = sessionState === null || sessionState === void 0 ? void 0 : sessionState.intent) === null || _e === void 0 ? void 0 : _e.state) === 'Fulfilled') {\n      if (isApiOnCompleteAttached) {\n        setTimeout(function () {\n          var _a;\n          return (_a = _this._botsCompleteCallback) === null || _a === void 0 ? void 0 : _a[botname](null, data);\n        }, 0);\n      }\n      if (isConfigOnCompleteAttached) {\n        setTimeout(function () {\n          return _this._config[botname].onComplete(null, data);\n        }, 0);\n      }\n    }\n    if (((_f = sessionState === null || sessionState === void 0 ? void 0 : sessionState.intent) === null || _f === void 0 ? void 0 : _f.state) === 'Failed') {\n      var error_2 = new Error('Bot conversation failed');\n      if (isApiOnCompleteAttached) {\n        setTimeout(function () {\n          return _this._botsCompleteCallback[botname](error_2);\n        }, 0);\n      }\n      if (isConfigOnCompleteAttached) {\n        setTimeout(function () {\n          return _this._config[botname].onComplete(error_2);\n        }, 0);\n      }\n    }\n  };\n  /**\n   * Format UtteranceCommandOutput's response\n   * decompress attributes\n   * update audioStream format\n   */\n  AWSLexV2Provider.prototype._formatUtteranceCommandOutput = function (data) {\n    return __awaiter(this, void 0, void 0, function () {\n      var response, _a, _b, _c;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            _a = [__assign({}, data)];\n            _b = {};\n            return [4 /*yield*/, unGzipBase64AsJson(data.messages)];\n          case 1:\n            _b.messages = _d.sent();\n            return [4 /*yield*/, unGzipBase64AsJson(data.sessionState)];\n          case 2:\n            _b.sessionState = _d.sent();\n            return [4 /*yield*/, unGzipBase64AsJson(data.interpretations)];\n          case 3:\n            _b.interpretations = _d.sent();\n            return [4 /*yield*/, unGzipBase64AsJson(data.requestAttributes)];\n          case 4:\n            _b.requestAttributes = _d.sent();\n            return [4 /*yield*/, unGzipBase64AsJson(data.inputTranscript)];\n          case 5:\n            _b.inputTranscript = _d.sent();\n            if (!data.audioStream) return [3 /*break*/, 7];\n            return [4 /*yield*/, convert(data.audioStream)];\n          case 6:\n            _c = _d.sent();\n            return [3 /*break*/, 8];\n          case 7:\n            _c = undefined;\n            _d.label = 8;\n          case 8:\n            response = __assign.apply(void 0, _a.concat([(_b.audioStream = _c, _b)]));\n            return [2 /*return*/, response];\n        }\n      });\n    });\n  };\n  /**\n   * handle client's `RecognizeTextCommand`\n   * used for sending simple text message\n   */\n  AWSLexV2Provider.prototype._handleRecognizeTextCommand = function (botname, data, baseParams) {\n    return __awaiter(this, void 0, void 0, function () {\n      var params, recognizeTextCommand, data_1, err_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('postText to lex2', data);\n            params = __assign(__assign({}, baseParams), {\n              text: data\n            });\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            recognizeTextCommand = new RecognizeTextCommand(params);\n            return [4 /*yield*/, this._lexRuntimeServiceV2Client.send(recognizeTextCommand)];\n          case 2:\n            data_1 = _a.sent();\n            this._reportBotStatus(data_1, botname);\n            return [2 /*return*/, data_1];\n          case 3:\n            err_1 = _a.sent();\n            return [2 /*return*/, Promise.reject(err_1)];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * handle client's `RecognizeUtteranceCommand`\n   * used for obj text or obj voice message\n   */\n  AWSLexV2Provider.prototype._handleRecognizeUtteranceCommand = function (botname, data, baseParams) {\n    return __awaiter(this, void 0, void 0, function () {\n      var content, messageType, params, inputStream, _a, recognizeUtteranceCommand, data_2, response, err_2;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            content = data.content, messageType = data.options.messageType;\n            logger.debug('postContent to lex2', data);\n            if (!(messageType === 'voice')) return [3 /*break*/, 4];\n            if (typeof content !== 'object') {\n              return [2 /*return*/, Promise.reject('invalid content type')];\n            }\n            if (!(content instanceof Uint8Array)) return [3 /*break*/, 1];\n            _a = content;\n            return [3 /*break*/, 3];\n          case 1:\n            return [4 /*yield*/, convert(content)];\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n          case 3:\n            inputStream = _a;\n            params = __assign(__assign({}, baseParams), {\n              requestContentType: 'audio/x-l16; sample-rate=16000; channel-count=1',\n              inputStream: inputStream\n            });\n            return [3 /*break*/, 5];\n          case 4:\n            // text input\n            if (typeof content !== 'string') return [2 /*return*/, Promise.reject('invalid content type')];\n            params = __assign(__assign({}, baseParams), {\n              requestContentType: 'text/plain; charset=utf-8',\n              inputStream: content\n            });\n            _b.label = 5;\n          case 5:\n            _b.trys.push([5, 8,, 9]);\n            recognizeUtteranceCommand = new RecognizeUtteranceCommand(params);\n            return [4 /*yield*/, this._lexRuntimeServiceV2Client.send(recognizeUtteranceCommand)];\n          case 6:\n            data_2 = _b.sent();\n            return [4 /*yield*/, this._formatUtteranceCommandOutput(data_2)];\n          case 7:\n            response = _b.sent();\n            this._reportBotStatus(response, botname);\n            return [2 /*return*/, response];\n          case 8:\n            err_2 = _b.sent();\n            return [2 /*return*/, Promise.reject(err_2)];\n          case 9:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  return AWSLexV2Provider;\n}(AbstractInteractionsProvider);\nexport { AWSLexV2Provider };\n//# sourceMappingURL=AWSLexV2Provider.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}