{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __awaiter, __generator } from \"tslib\";\n// the session tracker for web\nimport { ConsoleLogger as Logger, browserOrNode } from '@aws-amplify/core';\nvar logger = new Logger('SessionTracker');\nvar defaultOpts = {\n  enable: false,\n  provider: 'AWSPinpoint'\n};\nvar initialEventSent = false;\nvar SessionTracker = /** @class */function () {\n  function SessionTracker(tracker, opts) {\n    this._config = Object.assign({}, defaultOpts, opts);\n    this._tracker = tracker;\n    this._hasEnabled = false;\n    this._trackFunc = this._trackFunc.bind(this);\n    this._trackBeforeUnload = this._trackBeforeUnload.bind(this);\n    this.configure(this._config);\n  }\n  SessionTracker.prototype._envCheck = function () {\n    if (!browserOrNode().isBrowser) {\n      return false;\n    }\n    if (!document || !document.addEventListener) {\n      logger.debug('not in the supported web environment');\n      return false;\n    }\n    if (typeof document.hidden !== 'undefined') {\n      this._hidden = 'hidden';\n      this._visibilityChange = 'visibilitychange';\n    } else if (typeof document['msHidden'] !== 'undefined') {\n      this._hidden = 'msHidden';\n      this._visibilityChange = 'msvisibilitychange';\n    } else if (typeof document['webkitHidden'] !== 'undefined') {\n      this._hidden = 'webkitHidden';\n      this._visibilityChange = 'webkitvisibilitychange';\n    } else {\n      logger.debug('not in the supported web environment');\n      return false;\n    }\n    return true;\n  };\n  SessionTracker.prototype._trackFunc = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var customAttrs, _a, attributes;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(typeof this._config.attributes === 'function')) return [3 /*break*/, 2];\n            return [4 /*yield*/, this._config.attributes()];\n          case 1:\n            _a = _b.sent();\n            return [3 /*break*/, 3];\n          case 2:\n            _a = this._config.attributes;\n            _b.label = 3;\n          case 3:\n            customAttrs = _a;\n            attributes = Object.assign({}, customAttrs);\n            if (document.visibilityState === this._hidden) {\n              this._tracker({\n                name: '_session.stop',\n                attributes: attributes\n              }, this._config.provider).catch(function (e) {\n                logger.debug('record session stop event failed.', e);\n              });\n            } else {\n              this._tracker({\n                name: '_session.start',\n                attributes: attributes\n              }, this._config.provider).catch(function (e) {\n                logger.debug('record session start event failed.', e);\n              });\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  SessionTracker.prototype._trackBeforeUnload = function (event) {\n    // before unload callback cannot be async => https://github.com/aws-amplify/amplify-js/issues/2088\n    var _this = this;\n    var customAttrs = typeof this._config.attributes === 'function' ? Promise.resolve(this._config.attributes()) : Promise.resolve(this._config.attributes);\n    customAttrs.then(function (custom) {\n      var attributes = Object.assign({}, custom);\n      _this._tracker({\n        name: '_session.stop',\n        attributes: attributes,\n        immediate: true\n      }, _this._config.provider).catch(function (e) {\n        logger.debug('record session stop event failed.', e);\n      });\n    });\n  };\n  // to keep configure a synchronized function\n  SessionTracker.prototype._sendInitialEvent = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var customAttrs, _a, attributes;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (initialEventSent) {\n              logger.debug('the start session has been sent when the page is loaded');\n              return [2 /*return*/];\n            } else {\n              initialEventSent = true;\n            }\n            if (!(typeof this._config.attributes === 'function')) return [3 /*break*/, 2];\n            return [4 /*yield*/, this._config.attributes()];\n          case 1:\n            _a = _b.sent();\n            return [3 /*break*/, 3];\n          case 2:\n            _a = this._config.attributes;\n            _b.label = 3;\n          case 3:\n            customAttrs = _a;\n            attributes = Object.assign({}, customAttrs);\n            this._tracker({\n              name: '_session.start',\n              attributes: attributes\n            }, this._config.provider).catch(function (e) {\n              logger.debug('record session start event failed.', e);\n            });\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  SessionTracker.prototype.configure = function (opts) {\n    if (!this._envCheck()) {\n      return this._config;\n    }\n    Object.assign(this._config, opts);\n    if (this._config.enable && !this._hasEnabled) {\n      // send a start session as soon as it's enabled\n      this._sendInitialEvent();\n      // listen on events\n      document.addEventListener(this._visibilityChange, this._trackFunc, false);\n      window.addEventListener('beforeunload', this._trackBeforeUnload, false);\n      this._hasEnabled = true;\n    } else if (!this._config.enable && this._hasEnabled) {\n      document.removeEventListener(this._visibilityChange, this._trackFunc, false);\n      window.removeEventListener('beforeunload', this._trackBeforeUnload, false);\n      this._hasEnabled = false;\n    }\n    return this._config;\n  };\n  return SessionTracker;\n}();\nexport { SessionTracker };\n//# sourceMappingURL=SessionTracker.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}