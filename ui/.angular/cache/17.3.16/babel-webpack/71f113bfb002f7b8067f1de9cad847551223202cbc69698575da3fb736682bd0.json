{"ast":null,"code":"import { __awaiter as e } from \"tslib\";\nimport { Auth as t } from \"aws-amplify\";\nimport n from \"lodash/get.js\";\nimport r from \"lodash/pickBy.js\";\nimport { createMachine as i, sendUpdate as a, assign as s } from \"xstate\";\nimport { runValidators as o } from \"../../validators/index.mjs\";\nimport { clearError as d, clearFormValues as l, clearTouched as c, clearValidationError as u, handleInput as m, handleSubmit as p, handleBlur as g, parsePhoneNumber as f, setCredentials as U, setFieldErrors as v, setRemoteError as S, setCodeDeliveryDetails as h, setUser as E } from \"./actions.mjs\";\nfunction y({\n  services: y\n}) {\n  return i({\n    id: \"signUpActor\",\n    initial: \"init\",\n    predictableActionArguments: !0,\n    states: {\n      init: {\n        always: [{\n          target: \"confirmSignUp\",\n          cond: \"shouldInitConfirmSignUp\"\n        }, {\n          target: \"signUp\"\n        }]\n      },\n      signUp: {\n        type: \"parallel\",\n        exit: [\"clearError\", \"clearFormValues\", \"clearTouched\"],\n        states: {\n          validation: {\n            initial: \"pending\",\n            states: {\n              pending: {\n                invoke: {\n                  src: \"validateSignUp\",\n                  onDone: {\n                    target: \"valid\",\n                    actions: \"clearValidationError\"\n                  },\n                  onError: {\n                    target: \"invalid\",\n                    actions: \"setFieldErrors\"\n                  }\n                }\n              },\n              valid: {\n                entry: \"sendUpdate\"\n              },\n              invalid: {\n                entry: \"sendUpdate\"\n              }\n            },\n            on: {\n              CHANGE: {\n                actions: \"handleInput\",\n                target: \".pending\"\n              },\n              BLUR: {\n                actions: \"handleBlur\",\n                target: \".pending\"\n              }\n            }\n          },\n          submission: {\n            initial: \"idle\",\n            states: {\n              idle: {\n                entry: \"sendUpdate\",\n                on: {\n                  SUBMIT: {\n                    actions: \"handleSubmit\",\n                    target: \"validate\"\n                  },\n                  FEDERATED_SIGN_IN: \"federatedSignIn\"\n                }\n              },\n              federatedSignIn: {\n                tags: [\"pending\"],\n                entry: [\"sendUpdate\", \"clearError\"],\n                invoke: {\n                  src: \"federatedSignIn\",\n                  onDone: \"#signUpActor.resolved\",\n                  onError: {\n                    actions: \"setRemoteError\"\n                  }\n                }\n              },\n              validate: {\n                entry: \"sendUpdate\",\n                invoke: {\n                  src: \"validateSignUp\",\n                  onDone: {\n                    target: \"pending\",\n                    actions: \"clearValidationError\"\n                  },\n                  onError: {\n                    target: \"idle\",\n                    actions: \"setFieldErrors\"\n                  }\n                }\n              },\n              pending: {\n                tags: [\"pending\"],\n                entry: [\"parsePhoneNumber\", \"sendUpdate\", \"clearError\"],\n                invoke: {\n                  src: \"signUp\",\n                  onDone: [{\n                    cond: \"shouldSkipConfirm\",\n                    target: \"skipConfirm\",\n                    actions: [\"setUser\", \"setCredentials\"]\n                  }, {\n                    target: \"resolved\",\n                    actions: [\"setUser\", \"setCredentials\", \"setCodeDeliveryDetails\"]\n                  }],\n                  onError: {\n                    target: \"idle\",\n                    actions: \"setRemoteError\"\n                  }\n                }\n              },\n              skipConfirm: {\n                always: {\n                  target: \"#signUpActor.resolved\",\n                  actions: \"setAutoSignInIntent\"\n                }\n              },\n              resolved: {\n                type: \"final\",\n                always: \"#signUpActor.confirmSignUp\"\n              }\n            }\n          }\n        }\n      },\n      confirmSignUp: {\n        initial: \"edit\",\n        states: {\n          edit: {\n            entry: \"sendUpdate\",\n            on: {\n              SUBMIT: {\n                actions: \"handleSubmit\",\n                target: \"submit\"\n              },\n              CHANGE: {\n                actions: \"handleInput\"\n              },\n              BLUR: {\n                actions: \"handleBlur\"\n              },\n              RESEND: \"resend\"\n            }\n          },\n          resend: {\n            tags: [\"pending\"],\n            entry: \"sendUpdate\",\n            invoke: {\n              src: \"resendConfirmationCode\",\n              onDone: {\n                target: \"edit\"\n              },\n              onError: [{\n                target: \"#signUpActor.resolved\",\n                actions: \"setAutoSignInIntent\",\n                cond: \"isUserAlreadyConfirmed\"\n              }, {\n                target: \"edit\",\n                actions: \"setRemoteError\"\n              }]\n            }\n          },\n          submit: {\n            tags: [\"pending\"],\n            entry: [\"sendUpdate\", \"clearError\"],\n            invoke: {\n              src: \"confirmSignUp\",\n              onDone: {\n                target: \"#signUpActor.resolved\",\n                actions: \"setAutoSignInIntent\"\n              },\n              onError: {\n                target: \"edit\",\n                actions: \"setRemoteError\"\n              }\n            }\n          }\n        }\n      },\n      resolved: {\n        type: \"final\",\n        data: (e, t) => {\n          const {\n            username: r,\n            password: i\n          } = e.authAttributes;\n          return {\n            user: n(t, \"data.user\") || e.user,\n            authAttributes: {\n              username: r,\n              password: i\n            },\n            intent: e.intent\n          };\n        }\n      }\n    }\n  }, {\n    guards: {\n      isUserAlreadyConfirmed: (e, t) => \"User is already confirmed.\" === t.data.message,\n      shouldInitConfirmSignUp: e => e.intent && \"confirmSignUp\" === e.intent,\n      shouldSkipConfirm: (e, t) => t.data.userConfirmed\n    },\n    actions: {\n      clearError: d,\n      clearFormValues: l,\n      clearTouched: c,\n      clearValidationError: u,\n      handleInput: m,\n      handleSubmit: p,\n      handleBlur: g,\n      parsePhoneNumber: f,\n      setCredentials: U,\n      setFieldErrors: v,\n      setRemoteError: S,\n      setCodeDeliveryDetails: h,\n      setUser: E,\n      sendUpdate: a(),\n      setAutoSignInIntent: s({\n        intent: e => \"confirmSignUp\" === (null == e ? void 0 : e.intent) ? \"autoSignInSubmit\" : \"autoSignIn\"\n      })\n    },\n    services: {\n      confirmSignUp(t, r) {\n        return e(this, void 0, void 0, function* () {\n          const {\n              user: e,\n              authAttributes: r,\n              formValues: i\n            } = t,\n            {\n              confirmation_code: a\n            } = i,\n            s = n(e, \"username\") || n(r, \"username\");\n          return yield y.handleConfirmSignUp({\n            username: s,\n            code: a\n          });\n        });\n      },\n      resendConfirmationCode(r, i) {\n        return e(this, void 0, void 0, function* () {\n          const {\n              user: e,\n              authAttributes: i\n            } = r,\n            a = n(e, \"username\") || n(i, \"username\");\n          return t.resendSignUp(a);\n        });\n      },\n      federatedSignIn(n, r) {\n        return e(this, void 0, void 0, function* () {\n          const {\n            provider: e\n          } = r.data;\n          return yield t.federatedSignIn({\n            provider: e\n          });\n        });\n      },\n      signUp(t, n) {\n        return e(this, void 0, void 0, function* () {\n          const {\n              formValues: e,\n              loginMechanisms: n\n            } = t,\n            [i = \"username\"] = n,\n            {\n              [i]: a,\n              password: s\n            } = e,\n            o = r(e, (e, t) => {\n              switch (t) {\n                case \"address\":\n                case \"birthdate\":\n                case \"email\":\n                case \"family_name\":\n                case \"gender\":\n                case \"given_name\":\n                case \"locale\":\n                case \"middle_name\":\n                case \"name\":\n                case \"nickname\":\n                case \"phone_number\":\n                case \"picture\":\n                case \"preferred_username\":\n                case \"profile\":\n                case \"updated_at\":\n                case \"website\":\n                case \"zoneinfo\":\n                  return !0;\n                default:\n                  return t.startsWith(\"custom:\");\n              }\n            });\n          return yield y.handleSignUp({\n            username: a,\n            password: s,\n            attributes: o\n          });\n        });\n      },\n      validateSignUp(t, n) {\n        return e(this, void 0, void 0, function* () {\n          return o(t.formValues, t.touched, t.passwordSettings, [y.validateFormPassword, y.validateConfirmPassword, y.validatePreferredUsername, y.validateCustomSignUp]);\n        });\n      }\n    }\n  });\n}\nexport { y as createSignUpMachine };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}