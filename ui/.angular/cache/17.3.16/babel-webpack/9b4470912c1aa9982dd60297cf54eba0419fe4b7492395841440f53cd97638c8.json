{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\nvar TRACE_ID_HEADER_NAME = \"X-Amzn-Trace-Id\";\nvar ENV_LAMBDA_FUNCTION_NAME = \"AWS_LAMBDA_FUNCTION_NAME\";\nvar ENV_TRACE_ID = \"_X_AMZN_TRACE_ID\";\nexport var recursionDetectionMiddleware = function (options) {\n  return function (next) {\n    return function (args) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var request, functionName, traceId, nonEmptyString;\n        return __generator(this, function (_a) {\n          request = args.request;\n          if (!HttpRequest.isInstance(request) || options.runtime !== \"node\" || request.headers.hasOwnProperty(TRACE_ID_HEADER_NAME)) {\n            return [2, next(args)];\n          }\n          functionName = process.env[ENV_LAMBDA_FUNCTION_NAME];\n          traceId = process.env[ENV_TRACE_ID];\n          nonEmptyString = function (str) {\n            return typeof str === \"string\" && str.length > 0;\n          };\n          if (nonEmptyString(functionName) && nonEmptyString(traceId)) {\n            request.headers[TRACE_ID_HEADER_NAME] = traceId;\n          }\n          return [2, next(__assign(__assign({}, args), {\n            request: request\n          }))];\n        });\n      });\n    };\n  };\n};\nexport var addRecursionDetectionMiddlewareOptions = {\n  step: \"build\",\n  tags: [\"RECURSION_DETECTION\"],\n  name: \"recursionDetectionMiddleware\",\n  override: true,\n  priority: \"low\"\n};\nexport var getRecursionDetectionPlugin = function (options) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.add(recursionDetectionMiddleware(options), addRecursionDetectionMiddlewareOptions);\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}