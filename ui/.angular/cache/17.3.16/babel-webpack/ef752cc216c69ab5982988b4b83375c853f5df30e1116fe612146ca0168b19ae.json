{"ast":null,"code":"import { __asyncValues, __awaiter, __generator, __values } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { ModelPredicateCreator } from '../../predicates';\nimport { isPredicateObj } from '../../types';\nimport { getStorename, getIndexKeys, extractPrimaryKeyValues, traverseModel, validatePredicate, isModelConstructor, extractPrimaryKeyFieldNames } from '../../util';\nimport { ModelRelationship } from '../relationship';\nvar logger = new Logger('DataStore');\nvar DB_NAME = 'amplify-datastore';\nvar StorageAdapterBase = /** @class */function () {\n  function StorageAdapterBase() {\n    this.dbName = DB_NAME;\n  }\n  /**\n   * Initializes local DB\n   *\n   * @param theSchema\n   * @param namespaceResolver\n   * @param modelInstanceCreator\n   * @param getModelConstructorByModelName\n   * @param sessionId\n   */\n  StorageAdapterBase.prototype.setUp = function (theSchema, namespaceResolver, modelInstanceCreator, getModelConstructorByModelName, sessionId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, error_1;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, this.preSetUpChecks()];\n          case 1:\n            _b.sent();\n            if (!!this.initPromise) return [3 /*break*/, 2];\n            this.initPromise = new Promise(function (res, rej) {\n              _this.resolve = res;\n              _this.reject = rej;\n            });\n            return [3 /*break*/, 4];\n          case 2:\n            return [4 /*yield*/, this.initPromise];\n          case 3:\n            _b.sent();\n            return [2 /*return*/];\n          case 4:\n            if (sessionId) {\n              this.dbName = DB_NAME + \"-\" + sessionId;\n            }\n            this.schema = theSchema;\n            this.namespaceResolver = namespaceResolver;\n            this.modelInstanceCreator = modelInstanceCreator;\n            this.getModelConstructorByModelName = getModelConstructorByModelName;\n            _b.label = 5;\n          case 5:\n            _b.trys.push([5, 8,, 9]);\n            if (!!this.db) return [3 /*break*/, 7];\n            _a = this;\n            return [4 /*yield*/, this.initDb()];\n          case 6:\n            _a.db = _b.sent();\n            this.resolve();\n            _b.label = 7;\n          case 7:\n            return [3 /*break*/, 9];\n          case 8:\n            error_1 = _b.sent();\n            this.reject(error_1);\n            return [3 /*break*/, 9];\n          case 9:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * @param modelConstructor\n   * @returns local DB table name\n   */\n  StorageAdapterBase.prototype.getStorenameForModel = function (modelConstructor) {\n    var namespace = this.namespaceResolver(modelConstructor);\n    var modelName = modelConstructor.name;\n    return getStorename(namespace, modelName);\n  };\n  /**\n   *\n   * @param model - instantiated model record\n   * @returns the record's primary key values\n   */\n  StorageAdapterBase.prototype.getIndexKeyValuesFromModel = function (model) {\n    var modelConstructor = Object.getPrototypeOf(model).constructor;\n    var namespaceName = this.namespaceResolver(modelConstructor);\n    var keys = getIndexKeys(this.schema.namespaces[namespaceName], modelConstructor.name);\n    return extractPrimaryKeyValues(model, keys);\n  };\n  /**\n   * Common metadata for `save` operation\n   * used by individual storage adapters\n   *\n   * @param model\n   */\n  StorageAdapterBase.prototype.saveMetadata = function (model) {\n    var _this = this;\n    var modelConstructor = Object.getPrototypeOf(model).constructor;\n    var storeName = this.getStorenameForModel(modelConstructor);\n    var namespaceName = this.namespaceResolver(modelConstructor);\n    var connectedModels = traverseModel(modelConstructor.name, model, this.schema.namespaces[namespaceName], this.modelInstanceCreator, this.getModelConstructorByModelName);\n    var set = new Set();\n    var connectionStoreNames = Object.values(connectedModels).map(function (_a) {\n      var modelName = _a.modelName,\n        item = _a.item,\n        instance = _a.instance;\n      var storeName = getStorename(namespaceName, modelName);\n      set.add(storeName);\n      var keys = getIndexKeys(_this.schema.namespaces[namespaceName], modelName);\n      return {\n        storeName: storeName,\n        item: item,\n        instance: instance,\n        keys: keys\n      };\n    });\n    var modelKeyValues = this.getIndexKeyValuesFromModel(model);\n    return {\n      storeName: storeName,\n      set: set,\n      connectionStoreNames: connectionStoreNames,\n      modelKeyValues: modelKeyValues\n    };\n  };\n  /**\n   * Enforces conditional save. Throws if condition is not met.\n   * used by individual storage adapters\n   *\n   * @param model\n   */\n  StorageAdapterBase.prototype.validateSaveCondition = function (condition, fromDB) {\n    if (!(condition && fromDB)) {\n      return;\n    }\n    var predicates = ModelPredicateCreator.getPredicates(condition);\n    var _a = predicates,\n      predicateObjs = _a.predicates,\n      type = _a.type;\n    var isValid = validatePredicate(fromDB, type, predicateObjs);\n    if (!isValid) {\n      var msg = 'Conditional update failed';\n      logger.error(msg, {\n        model: fromDB,\n        condition: predicateObjs\n      });\n      throw new Error(msg);\n    }\n  };\n  /**\n   * Instantiate models from POJO records returned from the database\n   *\n   * @param namespaceName - string model namespace\n   * @param srcModelName - string model name\n   * @param records - array of uninstantiated records\n   * @returns\n   */\n  StorageAdapterBase.prototype.load = function (namespaceName, srcModelName, records) {\n    return __awaiter(this, void 0, void 0, function () {\n      var namespace, relations, connectionStoreNames, modelConstructor;\n      var _this = this;\n      return __generator(this, function (_a) {\n        namespace = this.schema.namespaces[namespaceName];\n        relations = namespace.relationships[srcModelName].relationTypes;\n        connectionStoreNames = relations.map(function (_a) {\n          var modelName = _a.modelName;\n          return getStorename(namespaceName, modelName);\n        });\n        modelConstructor = this.getModelConstructorByModelName(namespaceName, srcModelName);\n        if (connectionStoreNames.length === 0) {\n          return [2 /*return*/, records.map(function (record) {\n            return _this.modelInstanceCreator(modelConstructor, record);\n          })];\n        }\n        return [2 /*return*/, records.map(function (record) {\n          return _this.modelInstanceCreator(modelConstructor, record);\n        })];\n      });\n    });\n  };\n  /**\n   * Extracts operands from a predicate group into an array of key values\n   * Used in the query method\n   *\n   * @param predicates - predicate group\n   * @param keyPath - string array of key names ['id', 'sortKey']\n   * @returns string[] of key values\n   *\n   * @example\n   * ```js\n   * { and:[{ id: { eq: 'abc' }}, { sortKey: { eq: 'def' }}] }\n   * ```\n   * Becomes\n   * ```\n   * ['abc', 'def']\n   * ```\n   */\n  StorageAdapterBase.prototype.keyValueFromPredicate = function (predicates, keyPath) {\n    var e_1, _a;\n    var predicateObjs = predicates.predicates;\n    if (predicateObjs.length !== keyPath.length) {\n      return;\n    }\n    var keyValues = [];\n    var _loop_1 = function (key) {\n      var predicateObj = predicateObjs.find(function (p) {\n        // it's a relevant predicate object only if it's an equality\n        // operation for a key field from the key:\n        return isPredicateObj(p) && p.field === key && p.operator === 'eq' && p.operand !== null && p.operand !== undefined;\n      });\n      predicateObj && keyValues.push(predicateObj.operand);\n    };\n    try {\n      for (var keyPath_1 = __values(keyPath), keyPath_1_1 = keyPath_1.next(); !keyPath_1_1.done; keyPath_1_1 = keyPath_1.next()) {\n        var key = keyPath_1_1.value;\n        _loop_1(key);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (keyPath_1_1 && !keyPath_1_1.done && (_a = keyPath_1.return)) _a.call(keyPath_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    return keyValues.length === keyPath.length ? keyValues : undefined;\n  };\n  /**\n   * Common metadata for `query` operation\n   * used by individual storage adapters\n   *\n   * @param modelConstructor\n   * @param predicate\n   * @param pagination\n   */\n  StorageAdapterBase.prototype.queryMetadata = function (modelConstructor, predicate, pagination) {\n    var storeName = this.getStorenameForModel(modelConstructor);\n    var namespaceName = this.namespaceResolver(modelConstructor);\n    var predicates = predicate && ModelPredicateCreator.getPredicates(predicate);\n    var keyPath = getIndexKeys(this.schema.namespaces[namespaceName], modelConstructor.name);\n    var queryByKey = predicates && this.keyValueFromPredicate(predicates, keyPath);\n    var hasSort = pagination && pagination.sort;\n    var hasPagination = pagination && pagination.limit;\n    return {\n      storeName: storeName,\n      namespaceName: namespaceName,\n      queryByKey: queryByKey,\n      predicates: predicates,\n      hasSort: hasSort,\n      hasPagination: hasPagination\n    };\n  };\n  /**\n   * Delete record\n   * Cascades to related records (for Has One and Has Many relationships)\n   *\n   * @param modelOrModelConstructor\n   * @param condition\n   * @returns\n   */\n  StorageAdapterBase.prototype.delete = function (modelOrModelConstructor, condition) {\n    return __awaiter(this, void 0, void 0, function () {\n      var deleteQueue, modelConstructor, namespace, models, deletedModels, deletedModels, model, modelConstructor, namespaceName, storeName, keyValues, fromDB, msg, predicates, _a, predicateObjs, type, isValid, msg, deletedModels;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, this.preOpCheck()];\n          case 1:\n            _b.sent();\n            deleteQueue = [];\n            if (!isModelConstructor(modelOrModelConstructor)) return [3 /*break*/, 9];\n            modelConstructor = modelOrModelConstructor;\n            namespace = this.namespaceResolver(modelConstructor);\n            return [4 /*yield*/, this.query(modelConstructor, condition)];\n          case 2:\n            models = _b.sent();\n            if (!(condition !== undefined)) return [3 /*break*/, 5];\n            return [4 /*yield*/, this.deleteTraverse(models, modelConstructor, namespace, deleteQueue)];\n          case 3:\n            _b.sent();\n            return [4 /*yield*/, this.deleteItem(deleteQueue)];\n          case 4:\n            _b.sent();\n            deletedModels = deleteQueue.reduce(function (acc, _a) {\n              var items = _a.items;\n              return acc.concat(items);\n            }, []);\n            return [2 /*return*/, [models, deletedModels]];\n          case 5:\n            return [4 /*yield*/, this.deleteTraverse(models, modelConstructor, namespace, deleteQueue)];\n          case 6:\n            _b.sent();\n            return [4 /*yield*/, this.deleteItem(deleteQueue)];\n          case 7:\n            _b.sent();\n            deletedModels = deleteQueue.reduce(function (acc, _a) {\n              var items = _a.items;\n              return acc.concat(items);\n            }, []);\n            return [2 /*return*/, [models, deletedModels]];\n          case 8:\n            return [3 /*break*/, 16];\n          case 9:\n            model = modelOrModelConstructor;\n            modelConstructor = Object.getPrototypeOf(model).constructor;\n            namespaceName = this.namespaceResolver(modelConstructor);\n            storeName = this.getStorenameForModel(modelConstructor);\n            if (!condition) return [3 /*break*/, 12];\n            keyValues = this.getIndexKeyValuesFromModel(model);\n            return [4 /*yield*/, this._get(storeName, keyValues)];\n          case 10:\n            fromDB = _b.sent();\n            if (fromDB === undefined) {\n              msg = 'Model instance not found in storage';\n              logger.warn(msg, {\n                model: model\n              });\n              return [2 /*return*/, [[model], []]];\n            }\n            predicates = ModelPredicateCreator.getPredicates(condition);\n            _a = predicates, predicateObjs = _a.predicates, type = _a.type;\n            isValid = validatePredicate(fromDB, type, predicateObjs);\n            if (!isValid) {\n              msg = 'Conditional update failed';\n              logger.error(msg, {\n                model: fromDB,\n                condition: predicateObjs\n              });\n              throw new Error(msg);\n            }\n            return [4 /*yield*/, this.deleteTraverse([model], modelConstructor, namespaceName, deleteQueue)];\n          case 11:\n            _b.sent();\n            return [3 /*break*/, 14];\n          case 12:\n            return [4 /*yield*/, this.deleteTraverse([model], modelConstructor, namespaceName, deleteQueue)];\n          case 13:\n            _b.sent();\n            _b.label = 14;\n          case 14:\n            return [4 /*yield*/, this.deleteItem(deleteQueue)];\n          case 15:\n            _b.sent();\n            deletedModels = deleteQueue.reduce(function (acc, _a) {\n              var items = _a.items;\n              return acc.concat(items);\n            }, []);\n            return [2 /*return*/, [[model], deletedModels]];\n          case 16:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Recursively traverse relationship graph and add\n   * all Has One and Has Many relations to `deleteQueue` param\n   *\n   * Actual deletion of records added to `deleteQueue` occurs in the `delete` method\n   *\n   * @param models\n   * @param modelConstructor\n   * @param namespace\n   * @param deleteQueue\n   */\n  StorageAdapterBase.prototype.deleteTraverse = function (models, modelConstructor, namespace, deleteQueue) {\n    var models_1, models_1_1;\n    var e_2, _a, e_3, _b;\n    return __awaiter(this, void 0, void 0, function () {\n      var cascadingRelationTypes, model, modelDefinition, modelMeta, relationships, relationships_1, relationships_1_1, r, queryObject, relatedRecords, e_3_1, e_2_1;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            cascadingRelationTypes = ['HAS_ONE', 'HAS_MANY'];\n            _c.label = 1;\n          case 1:\n            _c.trys.push([1, 19, 20, 25]);\n            models_1 = __asyncValues(models);\n            _c.label = 2;\n          case 2:\n            return [4 /*yield*/, models_1.next()];\n          case 3:\n            if (!(models_1_1 = _c.sent(), !models_1_1.done)) return [3 /*break*/, 18];\n            model = models_1_1.value;\n            modelDefinition = this.schema.namespaces[namespace].models[modelConstructor.name];\n            modelMeta = {\n              builder: modelConstructor,\n              schema: modelDefinition,\n              pkField: extractPrimaryKeyFieldNames(modelDefinition)\n            };\n            relationships = ModelRelationship.allFrom(modelMeta).filter(function (r) {\n              return cascadingRelationTypes.includes(r.type);\n            });\n            _c.label = 4;\n          case 4:\n            _c.trys.push([4, 11, 12, 17]);\n            relationships_1 = __asyncValues(relationships);\n            _c.label = 5;\n          case 5:\n            return [4 /*yield*/, relationships_1.next()];\n          case 6:\n            if (!(relationships_1_1 = _c.sent(), !relationships_1_1.done)) return [3 /*break*/, 10];\n            r = relationships_1_1.value;\n            queryObject = r.createRemoteQueryObject(model);\n            if (!(queryObject !== null)) return [3 /*break*/, 9];\n            return [4 /*yield*/, this.query(r.remoteModelConstructor, ModelPredicateCreator.createFromFlatEqualities(r.remoteDefinition, queryObject))];\n          case 7:\n            relatedRecords = _c.sent();\n            return [4 /*yield*/, this.deleteTraverse(relatedRecords, r.remoteModelConstructor, namespace, deleteQueue)];\n          case 8:\n            _c.sent();\n            _c.label = 9;\n          case 9:\n            return [3 /*break*/, 5];\n          case 10:\n            return [3 /*break*/, 17];\n          case 11:\n            e_3_1 = _c.sent();\n            e_3 = {\n              error: e_3_1\n            };\n            return [3 /*break*/, 17];\n          case 12:\n            _c.trys.push([12,, 15, 16]);\n            if (!(relationships_1_1 && !relationships_1_1.done && (_b = relationships_1.return))) return [3 /*break*/, 14];\n            return [4 /*yield*/, _b.call(relationships_1)];\n          case 13:\n            _c.sent();\n            _c.label = 14;\n          case 14:\n            return [3 /*break*/, 16];\n          case 15:\n            if (e_3) throw e_3.error;\n            return [7 /*endfinally*/];\n          case 16:\n            return [7 /*endfinally*/];\n          case 17:\n            return [3 /*break*/, 2];\n          case 18:\n            return [3 /*break*/, 25];\n          case 19:\n            e_2_1 = _c.sent();\n            e_2 = {\n              error: e_2_1\n            };\n            return [3 /*break*/, 25];\n          case 20:\n            _c.trys.push([20,, 23, 24]);\n            if (!(models_1_1 && !models_1_1.done && (_a = models_1.return))) return [3 /*break*/, 22];\n            return [4 /*yield*/, _a.call(models_1)];\n          case 21:\n            _c.sent();\n            _c.label = 22;\n          case 22:\n            return [3 /*break*/, 24];\n          case 23:\n            if (e_2) throw e_2.error;\n            return [7 /*endfinally*/];\n          case 24:\n            return [7 /*endfinally*/];\n          case 25:\n            deleteQueue.push({\n              storeName: getStorename(namespace, modelConstructor.name),\n              items: models\n            });\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  return StorageAdapterBase;\n}();\nexport { StorageAdapterBase };\n//# sourceMappingURL=StorageAdapterBase.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}