{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (g && (g = 0, op[0] && (_ = 0)), _) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { ConsoleLogger as Logger } from './Logger';\nimport { StorageHelper } from './StorageHelper';\nimport { makeQuerablePromise } from './JS';\nimport { FacebookOAuth, GoogleOAuth } from './OAuthHelper';\nimport { jitteredExponentialRetry } from './Util';\nimport { Amplify } from './Amplify';\nimport { getId, getCredentialsForIdentity } from './AwsClients/CognitoIdentity';\nimport { parseAWSExports } from './parseAWSExports';\nimport { Hub } from './Hub';\nvar logger = new Logger('Credentials');\nvar CREDENTIALS_TTL = 50 * 60 * 1000; // 50 min, can be modified on config if required in the future\nvar COGNITO_IDENTITY_KEY_PREFIX = 'CognitoIdentityId-';\nvar AMPLIFY_SYMBOL = typeof Symbol !== 'undefined' && typeof Symbol.for === 'function' ? Symbol.for('amplify_default') : '@@amplify_default';\nvar dispatchCredentialsEvent = function (event, data, message) {\n  Hub.dispatch('core', {\n    event: event,\n    data: data,\n    message: message\n  }, 'Credentials', AMPLIFY_SYMBOL);\n};\nvar CredentialsClass = /** @class */function () {\n  function CredentialsClass(config) {\n    this._gettingCredPromise = null;\n    this._refreshHandlers = {};\n    // Allow `Auth` to be injected for SSR, but Auth isn't a required dependency for Credentials\n    this.Auth = undefined;\n    this.configure(config);\n    this._refreshHandlers['google'] = GoogleOAuth.refreshGoogleToken;\n    this._refreshHandlers['facebook'] = FacebookOAuth.refreshFacebookToken;\n  }\n  CredentialsClass.prototype.getModuleName = function () {\n    return 'Credentials';\n  };\n  CredentialsClass.prototype.getCredSource = function () {\n    return this._credentials_source;\n  };\n  CredentialsClass.prototype.configure = function (config) {\n    if (!config) return this._config || {};\n    this._config = Object.assign({}, this._config, config);\n    var refreshHandlers = this._config.refreshHandlers;\n    // If the developer has provided an object of refresh handlers,\n    // then we can merge the provided handlers with the current handlers.\n    if (refreshHandlers) {\n      this._refreshHandlers = __assign(__assign({}, this._refreshHandlers), refreshHandlers);\n    }\n    this._storage = this._config.storage;\n    if (!this._storage) {\n      this._storage = new StorageHelper().getStorage();\n    }\n    this._storageSync = Promise.resolve();\n    if (typeof this._storage['sync'] === 'function') {\n      this._storageSync = this._storage['sync']();\n    }\n    dispatchCredentialsEvent('credentials_configured', null, \"Credentials has been configured successfully\");\n    return this._config;\n  };\n  CredentialsClass.prototype.get = function () {\n    logger.debug('getting credentials');\n    return this._pickupCredentials();\n  };\n  // currently we only store the guest identity in local storage\n  CredentialsClass.prototype._getCognitoIdentityIdStorageKey = function (identityPoolId) {\n    return \"\".concat(COGNITO_IDENTITY_KEY_PREFIX).concat(identityPoolId);\n  };\n  CredentialsClass.prototype._pickupCredentials = function () {\n    logger.debug('picking up credentials');\n    if (!this._gettingCredPromise || !this._gettingCredPromise.isPending()) {\n      logger.debug('getting new cred promise');\n      this._gettingCredPromise = makeQuerablePromise(this._keepAlive());\n    } else {\n      logger.debug('getting old cred promise');\n    }\n    return this._gettingCredPromise;\n  };\n  CredentialsClass.prototype._keepAlive = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var cred, _a, Auth, user_1, session, refreshToken_1, refreshRequest, err_1;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            logger.debug('checking if credentials exists and not expired');\n            cred = this._credentials;\n            if (cred && !this._isExpired(cred) && !this._isPastTTL()) {\n              logger.debug('credentials not changed and not expired, directly return');\n              return [2 /*return*/, Promise.resolve(cred)];\n            }\n            logger.debug('need to get a new credential or refresh the existing one');\n            _a = this.Auth, Auth = _a === void 0 ? Amplify.Auth : _a;\n            if (!Auth || typeof Auth.currentUserCredentials !== 'function') {\n              // If Auth module is not imported, do a best effort to get guest credentials\n              return [2 /*return*/, this._setCredentialsForGuest()];\n            }\n            if (!(!this._isExpired(cred) && this._isPastTTL())) return [3 /*break*/, 6];\n            logger.debug('ttl has passed but token is not yet expired');\n            _b.label = 1;\n          case 1:\n            _b.trys.push([1, 5,, 6]);\n            return [4 /*yield*/, Auth.currentUserPoolUser()];\n          case 2:\n            user_1 = _b.sent();\n            return [4 /*yield*/, Auth.currentSession()];\n          case 3:\n            session = _b.sent();\n            refreshToken_1 = session.refreshToken;\n            refreshRequest = new Promise(function (res, rej) {\n              user_1.refreshSession(refreshToken_1, function (err, data) {\n                return err ? rej(err) : res(data);\n              });\n            });\n            return [4 /*yield*/, refreshRequest];\n          case 4:\n            _b.sent(); // note that rejections will be caught and handled in the catch block.\n            return [3 /*break*/, 6];\n          case 5:\n            err_1 = _b.sent();\n            // should not throw because user might just be on guest access or is authenticated through federation\n            logger.debug('Error attempting to refreshing the session', err_1);\n            return [3 /*break*/, 6];\n          case 6:\n            return [2 /*return*/, Auth.currentUserCredentials()];\n        }\n      });\n    });\n  };\n  CredentialsClass.prototype.refreshFederatedToken = function (federatedInfo) {\n    logger.debug('Getting federated credentials');\n    var provider = federatedInfo.provider,\n      user = federatedInfo.user,\n      token = federatedInfo.token,\n      identity_id = federatedInfo.identity_id;\n    var expires_at = federatedInfo.expires_at;\n    // Make sure expires_at is in millis\n    expires_at = new Date(expires_at).getFullYear() === 1970 ? expires_at * 1000 : expires_at;\n    var that = this;\n    logger.debug('checking if federated jwt token expired');\n    if (expires_at > new Date().getTime()) {\n      // if not expired\n      logger.debug('token not expired');\n      return this._setCredentialsFromFederation({\n        provider: provider,\n        token: token,\n        user: user,\n        identity_id: identity_id,\n        expires_at: expires_at\n      });\n    } else {\n      // if refresh handler exists\n      if (that._refreshHandlers[provider] && typeof that._refreshHandlers[provider] === 'function') {\n        logger.debug('getting refreshed jwt token from federation provider');\n        return this._providerRefreshWithRetry({\n          refreshHandler: that._refreshHandlers[provider],\n          provider: provider,\n          user: user\n        });\n      } else {\n        logger.debug('no refresh handler for provider:', provider);\n        this.clear();\n        return Promise.reject('no refresh handler for provider');\n      }\n    }\n  };\n  CredentialsClass.prototype._providerRefreshWithRetry = function (_a) {\n    var _this = this;\n    var refreshHandler = _a.refreshHandler,\n      provider = _a.provider,\n      user = _a.user;\n    var MAX_DELAY_MS = 10 * 1000;\n    // refreshHandler will retry network errors, otherwise it will\n    // return NonRetryableError to break out of jitteredExponentialRetry\n    return jitteredExponentialRetry(refreshHandler, [], MAX_DELAY_MS).then(function (data) {\n      logger.debug('refresh federated token sucessfully', data);\n      return _this._setCredentialsFromFederation({\n        provider: provider,\n        token: data.token,\n        user: user,\n        identity_id: data.identity_id,\n        expires_at: data.expires_at\n      });\n    }).catch(function (e) {\n      var isNetworkError = typeof e === 'string' && e.toLowerCase().lastIndexOf('network error', e.length) === 0;\n      if (!isNetworkError) {\n        _this.clear();\n      }\n      logger.debug('refresh federated token failed', e);\n      return Promise.reject('refreshing federation token failed: ' + e);\n    });\n  };\n  CredentialsClass.prototype._isExpired = function (credentials) {\n    if (!credentials) {\n      logger.debug('no credentials for expiration check');\n      return true;\n    }\n    logger.debug('are these credentials expired?', credentials);\n    var ts = Date.now();\n    /* returns date object.\n        https://github.com/aws/aws-sdk-js-v3/blob/v1.0.0-beta.1/packages/types/src/credentials.ts#L26\n    */\n    var expiration = credentials.expiration;\n    return expiration.getTime() <= ts;\n  };\n  CredentialsClass.prototype._isPastTTL = function () {\n    return this._nextCredentialsRefresh <= Date.now();\n  };\n  CredentialsClass.prototype._setCredentialsForGuest = function () {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var _b, identityPoolId, region, mandatorySignIn, identityPoolRegion, identityId, _c, cognitoConfig, guestCredentialsProvider, credentials;\n      var _this = this;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            logger.debug('setting credentials for guest');\n            if (!((_a = this._config) === null || _a === void 0 ? void 0 : _a.identityPoolId)) {\n              // If Credentials are not configured thru Auth module,\n              // doing best effort to check if the library was configured\n              this._config = Object.assign({}, this._config, parseAWSExports(this._config || {}).Auth);\n            }\n            _b = this._config, identityPoolId = _b.identityPoolId, region = _b.region, mandatorySignIn = _b.mandatorySignIn, identityPoolRegion = _b.identityPoolRegion;\n            if (mandatorySignIn) {\n              return [2 /*return*/, Promise.reject('cannot get guest credentials when mandatory signin enabled')];\n            }\n            if (!identityPoolId) {\n              logger.debug('No Cognito Identity pool provided for unauthenticated access');\n              return [2 /*return*/, Promise.reject('No Cognito Identity pool provided for unauthenticated access')];\n            }\n            if (!identityPoolRegion && !region) {\n              logger.debug('region is not configured for getting the credentials');\n              return [2 /*return*/, Promise.reject('region is not configured for getting the credentials')];\n            }\n            _c = this;\n            return [4 /*yield*/, this._getGuestIdentityId()];\n          case 1:\n            identityId = _c._identityId = _d.sent();\n            cognitoConfig = {\n              region: identityPoolRegion !== null && identityPoolRegion !== void 0 ? identityPoolRegion : region\n            };\n            guestCredentialsProvider = function () {\n              return __awaiter(_this, void 0, void 0, function () {\n                var IdentityId, Credentials;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      if (!!identityId) return [3 /*break*/, 2];\n                      return [4 /*yield*/, getId(cognitoConfig, {\n                        IdentityPoolId: identityPoolId\n                      })];\n                    case 1:\n                      IdentityId = _a.sent().IdentityId;\n                      this._identityId = IdentityId;\n                      _a.label = 2;\n                    case 2:\n                      return [4 /*yield*/, getCredentialsForIdentity(cognitoConfig, {\n                        IdentityId: this._identityId\n                      })];\n                    case 3:\n                      Credentials = _a.sent().Credentials;\n                      return [2 /*return*/, {\n                        identityId: this._identityId,\n                        accessKeyId: Credentials.AccessKeyId,\n                        secretAccessKey: Credentials.SecretKey,\n                        sessionToken: Credentials.SessionToken,\n                        expiration: Credentials.Expiration\n                      }];\n                  }\n                });\n              });\n            };\n            credentials = guestCredentialsProvider().catch(function (err) {\n              return __awaiter(_this, void 0, void 0, function () {\n                return __generator(this, function (_a) {\n                  throw err;\n                });\n              });\n            });\n            return [2 /*return*/, this._loadCredentials(credentials, 'guest', false, null).then(function (res) {\n              return res;\n            }).catch(function (e) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var guestCredentialsProvider_1;\n                var _this = this;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      if (!(e.name === 'ResourceNotFoundException' && e.message === \"Identity '\".concat(identityId, \"' not found.\"))) return [3 /*break*/, 2];\n                      logger.debug('Failed to load guest credentials');\n                      return [4 /*yield*/, this._removeGuestIdentityId()];\n                    case 1:\n                      _a.sent();\n                      guestCredentialsProvider_1 = function () {\n                        return __awaiter(_this, void 0, void 0, function () {\n                          var IdentityId, Credentials;\n                          return __generator(this, function (_a) {\n                            switch (_a.label) {\n                              case 0:\n                                return [4 /*yield*/, getId(cognitoConfig, {\n                                  IdentityPoolId: identityPoolId\n                                })];\n                              case 1:\n                                IdentityId = _a.sent().IdentityId;\n                                this._identityId = IdentityId;\n                                return [4 /*yield*/, getCredentialsForIdentity(cognitoConfig, {\n                                  IdentityId: IdentityId\n                                })];\n                              case 2:\n                                Credentials = _a.sent().Credentials;\n                                return [2 /*return*/, {\n                                  identityId: IdentityId,\n                                  accessKeyId: Credentials.AccessKeyId,\n                                  secretAccessKey: Credentials.SecretKey,\n                                  sessionToken: Credentials.SessionToken,\n                                  expiration: Credentials.Expiration\n                                }];\n                            }\n                          });\n                        });\n                      };\n                      credentials = guestCredentialsProvider_1().catch(function (err) {\n                        return __awaiter(_this, void 0, void 0, function () {\n                          return __generator(this, function (_a) {\n                            throw err;\n                          });\n                        });\n                      });\n                      return [2 /*return*/, this._loadCredentials(credentials, 'guest', false, null)];\n                    case 2:\n                      return [2 /*return*/, e];\n                  }\n                });\n              });\n            })];\n        }\n      });\n    });\n  };\n  CredentialsClass.prototype._setCredentialsFromFederation = function (params) {\n    var _this = this;\n    var provider = params.provider,\n      token = params.token;\n    var identity_id = params.identity_id;\n    var domains = {\n      google: 'accounts.google.com',\n      facebook: 'graph.facebook.com',\n      amazon: 'www.amazon.com',\n      developer: 'cognito-identity.amazonaws.com'\n    };\n    // Use custom provider url instead of the predefined ones\n    var domain = domains[provider] || provider;\n    if (!domain) {\n      return Promise.reject('You must specify a federated provider');\n    }\n    var logins = {};\n    logins[domain] = token;\n    var _a = this._config,\n      identityPoolId = _a.identityPoolId,\n      region = _a.region,\n      identityPoolRegion = _a.identityPoolRegion;\n    if (!identityPoolId) {\n      logger.debug('No Cognito Federated Identity pool provided');\n      return Promise.reject('No Cognito Federated Identity pool provided');\n    }\n    if (!identityPoolRegion && !region) {\n      logger.debug('region is not configured for getting the credentials');\n      return Promise.reject('region is not configured for getting the credentials');\n    }\n    var cognitoConfig = {\n      region: identityPoolRegion !== null && identityPoolRegion !== void 0 ? identityPoolRegion : region\n    };\n    var authenticatedCredentialsProvider = function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var IdentityId, Credentials;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              if (!!identity_id) return [3 /*break*/, 2];\n              return [4 /*yield*/, getId(cognitoConfig, {\n                IdentityPoolId: identityPoolId,\n                Logins: logins\n              })];\n            case 1:\n              IdentityId = _a.sent().IdentityId;\n              identity_id = IdentityId;\n              _a.label = 2;\n            case 2:\n              return [4 /*yield*/, getCredentialsForIdentity(cognitoConfig, {\n                IdentityId: identity_id,\n                Logins: logins\n              })];\n            case 3:\n              Credentials = _a.sent().Credentials;\n              return [2 /*return*/, {\n                identityId: identity_id,\n                accessKeyId: Credentials.AccessKeyId,\n                secretAccessKey: Credentials.SecretKey,\n                sessionToken: Credentials.SessionToken,\n                expiration: Credentials.Expiration\n              }];\n          }\n        });\n      });\n    };\n    var credentials = authenticatedCredentialsProvider().catch(function (err) {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          throw err;\n        });\n      });\n    });\n    return this._loadCredentials(credentials, 'federated', true, params);\n  };\n  CredentialsClass.prototype._setCredentialsFromSession = function (session) {\n    var _this = this;\n    logger.debug('set credentials from session');\n    var idToken = session.getIdToken().getJwtToken();\n    var _a = this._config,\n      region = _a.region,\n      userPoolId = _a.userPoolId,\n      identityPoolId = _a.identityPoolId,\n      identityPoolRegion = _a.identityPoolRegion;\n    if (!identityPoolId) {\n      logger.debug('No Cognito Federated Identity pool provided');\n      return Promise.reject('No Cognito Federated Identity pool provided');\n    }\n    if (!identityPoolRegion && !region) {\n      logger.debug('region is not configured for getting the credentials');\n      return Promise.reject('region is not configured for getting the credentials');\n    }\n    var key = 'cognito-idp.' + region + '.amazonaws.com/' + userPoolId;\n    var logins = {};\n    logins[key] = idToken;\n    var cognitoConfig = {\n      region: identityPoolRegion !== null && identityPoolRegion !== void 0 ? identityPoolRegion : region\n    };\n    /*\n        Retreiving identityId with GetIdCommand to mimic the behavior in the following code in aws-sdk-v3:\n        https://git.io/JeDxU\n         Note: Retreive identityId from CredentialsProvider once aws-sdk-js v3 supports this.\n    */\n    var credentialsProvider = function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var guestIdentityId, generatedOrRetrievedIdentityId, IdentityId, _a, _b, AccessKeyId, Expiration, SecretKey, SessionToken, primaryIdentityId;\n        return __generator(this, function (_c) {\n          switch (_c.label) {\n            case 0:\n              return [4 /*yield*/, this._getGuestIdentityId()];\n            case 1:\n              guestIdentityId = _c.sent();\n              if (!!guestIdentityId) return [3 /*break*/, 3];\n              return [4 /*yield*/, getId(cognitoConfig, {\n                IdentityPoolId: identityPoolId,\n                Logins: logins\n              })];\n            case 2:\n              IdentityId = _c.sent().IdentityId;\n              generatedOrRetrievedIdentityId = IdentityId;\n              _c.label = 3;\n            case 3:\n              return [4 /*yield*/, getCredentialsForIdentity(cognitoConfig, {\n                IdentityId: guestIdentityId || generatedOrRetrievedIdentityId,\n                Logins: logins\n              })];\n            case 4:\n              _a = _c.sent(), _b = _a.Credentials, AccessKeyId = _b.AccessKeyId, Expiration = _b.Expiration, SecretKey = _b.SecretKey, SessionToken = _b.SessionToken, primaryIdentityId = _a.IdentityId;\n              this._identityId = primaryIdentityId;\n              if (!guestIdentityId) return [3 /*break*/, 6];\n              // if guestIdentity is found and used by GetCredentialsForIdentity\n              // it will be linked to the logins provided, and disqualified as an unauth identity\n              logger.debug(\"The guest identity \".concat(guestIdentityId, \" has been successfully linked to the logins\"));\n              if (guestIdentityId === primaryIdentityId) {\n                logger.debug(\"The guest identity \".concat(guestIdentityId, \" has become the primary identity\"));\n              }\n              // remove it from local storage to avoid being used as a guest Identity by _setCredentialsForGuest\n              return [4 /*yield*/, this._removeGuestIdentityId()];\n            case 5:\n              // remove it from local storage to avoid being used as a guest Identity by _setCredentialsForGuest\n              _c.sent();\n              _c.label = 6;\n            case 6:\n              // https://github.com/aws/aws-sdk-js-v3/blob/main/packages/credential-provider-cognito-identity/src/fromCognitoIdentity.ts#L40\n              return [2 /*return*/, {\n                accessKeyId: AccessKeyId,\n                secretAccessKey: SecretKey,\n                sessionToken: SessionToken,\n                expiration: Expiration,\n                identityId: primaryIdentityId\n              }];\n          }\n        });\n      });\n    };\n    var credentials = credentialsProvider().catch(function (err) {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          throw err;\n        });\n      });\n    });\n    return this._loadCredentials(credentials, 'userPool', true, null);\n  };\n  CredentialsClass.prototype._loadCredentials = function (credentials, source, authenticated, info) {\n    var _this = this;\n    var that = this;\n    return new Promise(function (res, rej) {\n      credentials.then(function (credentials) {\n        return __awaiter(_this, void 0, void 0, function () {\n          var user, provider, token, expires_at, identity_id;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                logger.debug('Load credentials successfully', credentials);\n                if (this._identityId && !credentials.identityId) {\n                  credentials['identityId'] = this._identityId;\n                }\n                that._credentials = credentials;\n                that._credentials.authenticated = authenticated;\n                that._credentials_source = source;\n                that._nextCredentialsRefresh = new Date().getTime() + CREDENTIALS_TTL;\n                if (source === 'federated') {\n                  user = Object.assign({\n                    id: this._credentials.identityId\n                  }, info.user);\n                  provider = info.provider, token = info.token, expires_at = info.expires_at, identity_id = info.identity_id;\n                  try {\n                    this._storage.setItem('aws-amplify-federatedInfo', JSON.stringify({\n                      provider: provider,\n                      token: token,\n                      user: user,\n                      expires_at: expires_at,\n                      identity_id: identity_id\n                    }));\n                  } catch (e) {\n                    logger.debug('Failed to put federated info into auth storage', e);\n                  }\n                }\n                if (!(source === 'guest')) return [3 /*break*/, 2];\n                return [4 /*yield*/, this._setGuestIdentityId(credentials.identityId)];\n              case 1:\n                _a.sent();\n                _a.label = 2;\n              case 2:\n                res(that._credentials);\n                return [2 /*return*/];\n            }\n          });\n        });\n      }).catch(function (err) {\n        if (err) {\n          logger.debug('Failed to load credentials', credentials);\n          logger.debug('Error loading credentials', err);\n          rej(err);\n          return;\n        }\n      });\n    });\n  };\n  CredentialsClass.prototype.set = function (params, source) {\n    if (source === 'session') {\n      return this._setCredentialsFromSession(params);\n    } else if (source === 'federation') {\n      return this._setCredentialsFromFederation(params);\n    } else if (source === 'guest') {\n      return this._setCredentialsForGuest();\n    } else {\n      logger.debug('no source specified for setting credentials');\n      return Promise.reject('invalid source');\n    }\n  };\n  CredentialsClass.prototype.clear = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        this._credentials = null;\n        this._credentials_source = null;\n        logger.debug('removing aws-amplify-federatedInfo from storage');\n        this._storage.removeItem('aws-amplify-federatedInfo');\n        return [2 /*return*/];\n      });\n    });\n  };\n  /* operations on local stored guest identity */\n  CredentialsClass.prototype._getGuestIdentityId = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var identityPoolId, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            identityPoolId = this._config.identityPoolId;\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this._storageSync];\n          case 2:\n            _a.sent();\n            return [2 /*return*/, this._storage.getItem(this._getCognitoIdentityIdStorageKey(identityPoolId))];\n          case 3:\n            e_1 = _a.sent();\n            logger.debug('Failed to get the cached guest identityId', e_1);\n            return [3 /*break*/, 4];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  CredentialsClass.prototype._setGuestIdentityId = function (identityId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var identityPoolId, e_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            identityPoolId = this._config.identityPoolId;\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this._storageSync];\n          case 2:\n            _a.sent();\n            this._storage.setItem(this._getCognitoIdentityIdStorageKey(identityPoolId), identityId);\n            return [3 /*break*/, 4];\n          case 3:\n            e_2 = _a.sent();\n            logger.debug('Failed to cache guest identityId', e_2);\n            return [3 /*break*/, 4];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  CredentialsClass.prototype._removeGuestIdentityId = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var identityPoolId;\n      return __generator(this, function (_a) {\n        identityPoolId = this._config.identityPoolId;\n        logger.debug(\"removing \".concat(this._getCognitoIdentityIdStorageKey(identityPoolId), \" from storage\"));\n        this._storage.removeItem(this._getCognitoIdentityIdStorageKey(identityPoolId));\n        return [2 /*return*/];\n      });\n    });\n  };\n  /**\n   * Compact version of credentials\n   * @param {Object} credentials\n   * @return {Object} - Credentials\n   */\n  CredentialsClass.prototype.shear = function (credentials) {\n    return {\n      accessKeyId: credentials.accessKeyId,\n      sessionToken: credentials.sessionToken,\n      secretAccessKey: credentials.secretAccessKey,\n      identityId: credentials.identityId,\n      authenticated: credentials.authenticated\n    };\n  };\n  return CredentialsClass;\n}();\nexport { CredentialsClass };\nexport var Credentials = new CredentialsClass(null);\nAmplify.register(Credentials);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}