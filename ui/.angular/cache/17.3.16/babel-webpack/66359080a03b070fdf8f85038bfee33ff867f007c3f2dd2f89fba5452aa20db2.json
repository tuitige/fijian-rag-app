{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { AWS_CLOUDWATCH_CATEGORY } from '../Util/Constants';\nvar LOG_LEVELS = {\n  VERBOSE: 1,\n  DEBUG: 2,\n  INFO: 3,\n  WARN: 4,\n  ERROR: 5\n};\nexport var LOG_TYPE = /*#__PURE__*/function (LOG_TYPE) {\n  LOG_TYPE[\"DEBUG\"] = \"DEBUG\";\n  LOG_TYPE[\"ERROR\"] = \"ERROR\";\n  LOG_TYPE[\"INFO\"] = \"INFO\";\n  LOG_TYPE[\"WARN\"] = \"WARN\";\n  LOG_TYPE[\"VERBOSE\"] = \"VERBOSE\";\n  return LOG_TYPE;\n}(LOG_TYPE || {});\n/**\n * Write logs\n * @class Logger\n */\nexport var ConsoleLogger = /** @class */function () {\n  /**\n   * @constructor\n   * @param {string} name - Name of the logger\n   */\n  function ConsoleLogger(name, level) {\n    if (level === void 0) {\n      level = LOG_TYPE.WARN;\n    }\n    this.name = name;\n    this.level = level;\n    this._pluggables = [];\n  }\n  ConsoleLogger.prototype._padding = function (n) {\n    return n < 10 ? '0' + n : '' + n;\n  };\n  ConsoleLogger.prototype._ts = function () {\n    var dt = new Date();\n    return [this._padding(dt.getMinutes()), this._padding(dt.getSeconds())].join(':') + '.' + dt.getMilliseconds();\n  };\n  ConsoleLogger.prototype.configure = function (config) {\n    if (!config) return this._config;\n    this._config = config;\n    return this._config;\n  };\n  /**\n   * Write log\n   * @method\n   * @memeberof Logger\n   * @param {LOG_TYPE|string} type - log type, default INFO\n   * @param {string|object} msg - Logging message or object\n   */\n  ConsoleLogger.prototype._log = function (type) {\n    var e_1, _a;\n    var msg = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      msg[_i - 1] = arguments[_i];\n    }\n    var logger_level_name = this.level;\n    if (ConsoleLogger.LOG_LEVEL) {\n      logger_level_name = ConsoleLogger.LOG_LEVEL;\n    }\n    if (typeof window !== 'undefined' && window.LOG_LEVEL) {\n      logger_level_name = window.LOG_LEVEL;\n    }\n    var logger_level = LOG_LEVELS[logger_level_name];\n    var type_level = LOG_LEVELS[type];\n    if (!(type_level >= logger_level)) {\n      // Do nothing if type is not greater than or equal to logger level (handle undefined)\n      return;\n    }\n    var log = console.log.bind(console);\n    if (type === LOG_TYPE.ERROR && console.error) {\n      log = console.error.bind(console);\n    }\n    if (type === LOG_TYPE.WARN && console.warn) {\n      log = console.warn.bind(console);\n    }\n    var prefix = \"[\".concat(type, \"] \").concat(this._ts(), \" \").concat(this.name);\n    var message = '';\n    if (msg.length === 1 && typeof msg[0] === 'string') {\n      message = \"\".concat(prefix, \" - \").concat(msg[0]);\n      log(message);\n    } else if (msg.length === 1) {\n      message = \"\".concat(prefix, \" \").concat(msg[0]);\n      log(prefix, msg[0]);\n    } else if (typeof msg[0] === 'string') {\n      var obj = msg.slice(1);\n      if (obj.length === 1) {\n        obj = obj[0];\n      }\n      message = \"\".concat(prefix, \" - \").concat(msg[0], \" \").concat(obj);\n      log(\"\".concat(prefix, \" - \").concat(msg[0]), obj);\n    } else {\n      message = \"\".concat(prefix, \" \").concat(msg);\n      log(prefix, msg);\n    }\n    try {\n      for (var _b = __values(this._pluggables), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var plugin = _c.value;\n        var logEvent = {\n          message: message,\n          timestamp: Date.now()\n        };\n        plugin.pushLogs([logEvent]);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n  /**\n   * Write General log. Default to INFO\n   * @method\n   * @memeberof Logger\n   * @param {string|object} msg - Logging message or object\n   */\n  ConsoleLogger.prototype.log = function () {\n    var msg = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      msg[_i] = arguments[_i];\n    }\n    this._log.apply(this, __spreadArray([LOG_TYPE.INFO], __read(msg), false));\n  };\n  /**\n   * Write INFO log\n   * @method\n   * @memeberof Logger\n   * @param {string|object} msg - Logging message or object\n   */\n  ConsoleLogger.prototype.info = function () {\n    var msg = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      msg[_i] = arguments[_i];\n    }\n    this._log.apply(this, __spreadArray([LOG_TYPE.INFO], __read(msg), false));\n  };\n  /**\n   * Write WARN log\n   * @method\n   * @memeberof Logger\n   * @param {string|object} msg - Logging message or object\n   */\n  ConsoleLogger.prototype.warn = function () {\n    var msg = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      msg[_i] = arguments[_i];\n    }\n    this._log.apply(this, __spreadArray([LOG_TYPE.WARN], __read(msg), false));\n  };\n  /**\n   * Write ERROR log\n   * @method\n   * @memeberof Logger\n   * @param {string|object} msg - Logging message or object\n   */\n  ConsoleLogger.prototype.error = function () {\n    var msg = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      msg[_i] = arguments[_i];\n    }\n    this._log.apply(this, __spreadArray([LOG_TYPE.ERROR], __read(msg), false));\n  };\n  /**\n   * Write DEBUG log\n   * @method\n   * @memeberof Logger\n   * @param {string|object} msg - Logging message or object\n   */\n  ConsoleLogger.prototype.debug = function () {\n    var msg = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      msg[_i] = arguments[_i];\n    }\n    this._log.apply(this, __spreadArray([LOG_TYPE.DEBUG], __read(msg), false));\n  };\n  /**\n   * Write VERBOSE log\n   * @method\n   * @memeberof Logger\n   * @param {string|object} msg - Logging message or object\n   */\n  ConsoleLogger.prototype.verbose = function () {\n    var msg = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      msg[_i] = arguments[_i];\n    }\n    this._log.apply(this, __spreadArray([LOG_TYPE.VERBOSE], __read(msg), false));\n  };\n  ConsoleLogger.prototype.addPluggable = function (pluggable) {\n    if (pluggable && pluggable.getCategoryName() === AWS_CLOUDWATCH_CATEGORY) {\n      this._pluggables.push(pluggable);\n      pluggable.configure(this._config);\n    }\n  };\n  ConsoleLogger.prototype.listPluggables = function () {\n    return this._pluggables;\n  };\n  ConsoleLogger.LOG_LEVEL = null;\n  return ConsoleLogger;\n}();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}