{"ast":null,"code":"import { __awaiter, __generator, __read, __spread, __values } from \"tslib\";\nimport { OpType } from '../types';\nimport { getIdentifierValue } from './utils';\n// https://github.com/aws-amplify/amplify-js/blob/datastore-docs/packages/datastore/docs/sync-engine.md#merger\nvar ModelMerger = /** @class */function () {\n  function ModelMerger(outbox, ownSymbol) {\n    this.outbox = outbox;\n    this.ownSymbol = ownSymbol;\n  }\n  /**\n   *\n   * @param storage Storage adapter that contains the data.\n   * @param model The model from an outbox mutation.\n   * @returns The type of operation (INSERT/UPDATE/DELETE)\n   */\n  ModelMerger.prototype.merge = function (storage, model, modelDefinition) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result, mutationsForModel, isDelete;\n      var _a, _b;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            return [4 /*yield*/, this.outbox.getForModel(storage, model, modelDefinition)];\n          case 1:\n            mutationsForModel = _c.sent();\n            isDelete = model._deleted;\n            if (!(mutationsForModel.length === 0)) return [3 /*break*/, 5];\n            if (!isDelete) return [3 /*break*/, 3];\n            result = OpType.DELETE;\n            return [4 /*yield*/, storage.delete(model, undefined, this.ownSymbol)];\n          case 2:\n            _c.sent();\n            return [3 /*break*/, 5];\n          case 3:\n            return [4 /*yield*/, storage.save(model, undefined, this.ownSymbol)];\n          case 4:\n            _a = __read.apply(void 0, [_c.sent(), 1]), _b = __read(_a[0], 2), result = _b[1];\n            _c.label = 5;\n          case 5:\n            return [2 /*return*/, result];\n        }\n      });\n    });\n  };\n  ModelMerger.prototype.mergePage = function (storage, modelConstructor, items, modelDefinition) {\n    return __awaiter(this, void 0, void 0, function () {\n      var itemsMap, items_1, items_1_1, item, modelId, page;\n      var e_1, _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            itemsMap = new Map();\n            try {\n              for (items_1 = __values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {\n                item = items_1_1.value;\n                modelId = getIdentifierValue(modelDefinition, item);\n                itemsMap.set(modelId, item);\n              }\n            } catch (e_1_1) {\n              e_1 = {\n                error: e_1_1\n              };\n            } finally {\n              try {\n                if (items_1_1 && !items_1_1.done && (_a = items_1.return)) _a.call(items_1);\n              } finally {\n                if (e_1) throw e_1.error;\n              }\n            }\n            page = __spread(itemsMap.values());\n            return [4 /*yield*/, storage.batchSave(modelConstructor, page, this.ownSymbol)];\n          case 1:\n            return [2 /*return*/, _b.sent()];\n        }\n      });\n    });\n  };\n  return ModelMerger;\n}();\nexport { ModelMerger };\n//# sourceMappingURL=merger.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}