{"ast":null,"code":"import { __assign, __awaiter, __generator, __read, __spread } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport camelcaseKeys from 'camelcase-keys';\nimport { ConsoleLogger as Logger, Credentials, getAmplifyUserAgentObject } from '@aws-amplify/core';\nimport { LocationClient, SearchPlaceIndexForTextCommand, SearchPlaceIndexForSuggestionsCommand, SearchPlaceIndexForPositionCommand, BatchPutGeofenceCommand, GetPlaceCommand, GetGeofenceCommand, ListGeofencesCommand, BatchDeleteGeofenceCommand } from '@aws-sdk/client-location';\nimport { mapSearchOptions, validateGeofenceId, validateGeofencesInput } from '../util';\nvar logger = new Logger('AmazonLocationServiceProvider');\nvar AmazonLocationServiceProvider = /** @class */function () {\n  /**\n   * Initialize Geo with AWS configurations\n   * @param {Object} config - Configuration object for Geo\n   */\n  function AmazonLocationServiceProvider(config) {\n    this._config = config ? config : {};\n    logger.debug('Geo Options', this._config);\n  }\n  /**\n   * get the category of the plugin\n   * @returns {string} name of the category\n   */\n  AmazonLocationServiceProvider.prototype.getCategory = function () {\n    return AmazonLocationServiceProvider.CATEGORY;\n  };\n  /**\n   * get provider name of the plugin\n   * @returns {string} name of the provider\n   */\n  AmazonLocationServiceProvider.prototype.getProviderName = function () {\n    return AmazonLocationServiceProvider.PROVIDER_NAME;\n  };\n  /**\n   * Configure Geo part with aws configuration\n   * @param {Object} config - Configuration of the Geo\n   * @return {Object} - Current configuration\n   */\n  AmazonLocationServiceProvider.prototype.configure = function (config) {\n    logger.debug('configure Amazon Location Service Provider', config);\n    if (!config) return this._config;\n    this._config = Object.assign({}, this._config, config);\n    return this._config;\n  };\n  /**\n   * Get the map resources that are currently available through the provider\n   * @returns {AmazonLocationServiceMapStyle[]}- Array of available map resources\n   */\n  AmazonLocationServiceProvider.prototype.getAvailableMaps = function () {\n    this._verifyMapResources();\n    var mapStyles = [];\n    var availableMaps = this._config.maps.items;\n    var region = this._config.region;\n    for (var mapName in availableMaps) {\n      var style = availableMaps[mapName].style;\n      mapStyles.push({\n        mapName: mapName,\n        style: style,\n        region: region\n      });\n    }\n    return mapStyles;\n  };\n  /**\n   * Get the map resource set as default in amplify config\n   * @returns {AmazonLocationServiceMapStyle} - Map resource set as the default in amplify config\n   */\n  AmazonLocationServiceProvider.prototype.getDefaultMap = function () {\n    this._verifyMapResources();\n    var mapName = this._config.maps.default;\n    var style = this._config.maps.items[mapName].style;\n    var region = this._config.region;\n    return {\n      mapName: mapName,\n      style: style,\n      region: region\n    };\n  };\n  /**\n   * Search by text input with optional parameters\n   * @param  {string} text - The text string that is to be searched for\n   * @param  {SearchByTextOptions} options? - Optional parameters to the search\n   * @returns {Promise<Place[]>} - Promise resolves to a list of Places that match search parameters\n   */\n  AmazonLocationServiceProvider.prototype.searchByText = function (text, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, locationServiceInput, client, command, response, error_1, PascalResults, results;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n            this._verifySearchIndex(options === null || options === void 0 ? void 0 : options.searchIndexName);\n            locationServiceInput = {\n              Text: text,\n              IndexName: this._config.search_indices.default\n            };\n            /**\n             * Map search options to Amazon Location Service input object\n             */\n            if (options) {\n              locationServiceInput = __assign(__assign({}, locationServiceInput), mapSearchOptions(options, locationServiceInput));\n            }\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgentObject()\n            });\n            command = new SearchPlaceIndexForTextCommand(locationServiceInput);\n            _a.label = 2;\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n            return [4 /*yield*/, client.send(command)];\n          case 3:\n            response = _a.sent();\n            return [3 /*break*/, 5];\n          case 4:\n            error_1 = _a.sent();\n            logger.debug(error_1);\n            throw error_1;\n          case 5:\n            PascalResults = response.Results.map(function (result) {\n              return result.Place;\n            });\n            results = camelcaseKeys(PascalResults, {\n              deep: true\n            });\n            return [2 /*return*/, results];\n        }\n      });\n    });\n  };\n  /**\n   * Search for suggestions based on the input text\n   * @param  {string} text - The text string that is to be searched for\n   * @param  {SearchByTextOptions} options? - Optional parameters to the search\n   * @returns {Promise<SearchForSuggestionsResults>} - Resolves to an array of search suggestion strings\n   */\n  AmazonLocationServiceProvider.prototype.searchForSuggestions = function (text, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, locationServiceInput, client, command, response, error_2, results;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n            this._verifySearchIndex(options === null || options === void 0 ? void 0 : options.searchIndexName);\n            locationServiceInput = {\n              Text: text,\n              IndexName: this._config.search_indices.default\n            };\n            /**\n             * Map search options to Amazon Location Service input object\n             */\n            if (options) {\n              locationServiceInput = __assign(__assign({}, locationServiceInput), mapSearchOptions(options, locationServiceInput));\n            }\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgentObject()\n            });\n            command = new SearchPlaceIndexForSuggestionsCommand(locationServiceInput);\n            _a.label = 2;\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n            return [4 /*yield*/, client.send(command)];\n          case 3:\n            response = _a.sent();\n            return [3 /*break*/, 5];\n          case 4:\n            error_2 = _a.sent();\n            logger.debug(error_2);\n            throw error_2;\n          case 5:\n            results = response.Results.map(function (result) {\n              return {\n                text: result.Text,\n                placeId: result.PlaceId\n              };\n            });\n            return [2 /*return*/, results];\n        }\n      });\n    });\n  };\n  AmazonLocationServiceProvider.prototype._verifyPlaceId = function (placeId) {\n    if (placeId.length === 0) {\n      var errorString = 'PlaceId cannot be an empty string.';\n      logger.debug(errorString);\n      throw new Error(errorString);\n    }\n  };\n  AmazonLocationServiceProvider.prototype.searchByPlaceId = function (placeId, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, client, searchByPlaceIdInput, command, response, error_3, place;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n            this._verifySearchIndex(options === null || options === void 0 ? void 0 : options.searchIndexName);\n            this._verifyPlaceId(placeId);\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgentObject()\n            });\n            searchByPlaceIdInput = {\n              PlaceId: placeId,\n              IndexName: (options === null || options === void 0 ? void 0 : options.searchIndexName) || this._config.search_indices.default\n            };\n            command = new GetPlaceCommand(searchByPlaceIdInput);\n            _a.label = 2;\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n            return [4 /*yield*/, client.send(command)];\n          case 3:\n            response = _a.sent();\n            return [3 /*break*/, 5];\n          case 4:\n            error_3 = _a.sent();\n            logger.debug(error_3);\n            throw error_3;\n          case 5:\n            place = response.Place;\n            if (place) {\n              return [2 /*return*/, camelcaseKeys(place, {\n                deep: true\n              })];\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Reverse geocoding search via a coordinate point on the map\n   * @param coordinates - Coordinates array for the search input\n   * @param options - Options parameters for the search\n   * @returns {Promise<Place>} - Promise that resolves to a place matching search coordinates\n   */\n  AmazonLocationServiceProvider.prototype.searchByCoordinates = function (coordinates, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, locationServiceInput, client, command, response, error_4, PascalResults, results;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n            this._verifySearchIndex(options === null || options === void 0 ? void 0 : options.searchIndexName);\n            locationServiceInput = {\n              Position: coordinates,\n              IndexName: this._config.search_indices.default\n            };\n            if (options) {\n              if (options.searchIndexName) {\n                locationServiceInput.IndexName = options.searchIndexName;\n              }\n              locationServiceInput.MaxResults = options.maxResults;\n            }\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgentObject()\n            });\n            command = new SearchPlaceIndexForPositionCommand(locationServiceInput);\n            _a.label = 2;\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n            return [4 /*yield*/, client.send(command)];\n          case 3:\n            response = _a.sent();\n            return [3 /*break*/, 5];\n          case 4:\n            error_4 = _a.sent();\n            logger.debug(error_4);\n            throw error_4;\n          case 5:\n            PascalResults = response.Results.map(function (result) {\n              return result.Place;\n            });\n            results = camelcaseKeys(PascalResults[0], {\n              deep: true\n            });\n            return [2 /*return*/, results];\n        }\n      });\n    });\n  };\n  /**\n   * Create geofences inside of a geofence collection\n   * @param geofences - Array of geofence objects to create\n   * @param options? - Optional parameters for creating geofences\n   * @returns {Promise<AmazonLocationServiceSaveGeofencesResults>} - Promise that resolves to an object with:\n   *   successes: list of geofences successfully created\n   *   errors: list of geofences that failed to create\n   */\n  AmazonLocationServiceProvider.prototype.saveGeofences = function (geofences, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, PascalGeofences, results, geofenceBatches, apiLimit;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (geofences.length < 1) {\n              throw new Error('Geofence input array is empty');\n            }\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n            // Verify geofence collection exists in aws-config.js\n            try {\n              this._verifyGeofenceCollections(options === null || options === void 0 ? void 0 : options.collectionName);\n            } catch (error) {\n              logger.debug(error);\n              throw error;\n            }\n            validateGeofencesInput(geofences);\n            PascalGeofences = geofences.map(function (_a) {\n              var geofenceId = _a.geofenceId,\n                polygon = _a.geometry.polygon;\n              return {\n                GeofenceId: geofenceId,\n                Geometry: {\n                  Polygon: polygon\n                }\n              };\n            });\n            results = {\n              successes: [],\n              errors: []\n            };\n            geofenceBatches = [];\n            while (PascalGeofences.length > 0) {\n              apiLimit = 10;\n              geofenceBatches.push(PascalGeofences.splice(0, apiLimit));\n            }\n            return [4 /*yield*/, Promise.all(geofenceBatches.map(function (batch) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var response, error_5;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      _a.trys.push([0, 2,, 3]);\n                      return [4 /*yield*/, this._AmazonLocationServiceBatchPutGeofenceCall(batch, (options === null || options === void 0 ? void 0 : options.collectionName) || this._config.geofenceCollections.default)];\n                    case 1:\n                      response = _a.sent();\n                      return [3 /*break*/, 3];\n                    case 2:\n                      error_5 = _a.sent();\n                      // If the API call fails, add the geofences to the errors array and move to next batch\n                      batch.forEach(function (geofence) {\n                        results.errors.push({\n                          geofenceId: geofence.GeofenceId,\n                          error: {\n                            code: 'APIConnectionError',\n                            message: error_5.message\n                          }\n                        });\n                      });\n                      return [2 /*return*/];\n                    case 3:\n                      // Push all successes to results\n                      response.Successes.forEach(function (success) {\n                        var GeofenceId = success.GeofenceId,\n                          CreateTime = success.CreateTime,\n                          UpdateTime = success.UpdateTime;\n                        results.successes.push({\n                          geofenceId: GeofenceId,\n                          createTime: CreateTime,\n                          updateTime: UpdateTime\n                        });\n                      });\n                      // Push all errors to results\n                      response.Errors.forEach(function (error) {\n                        var _a = error.Error,\n                          Code = _a.Code,\n                          Message = _a.Message,\n                          GeofenceId = error.GeofenceId;\n                        results.errors.push({\n                          error: {\n                            code: Code,\n                            message: Message\n                          },\n                          geofenceId: GeofenceId\n                        });\n                      });\n                      return [2 /*return*/];\n                  }\n                });\n              });\n            }))];\n          case 2:\n            _a.sent();\n            return [2 /*return*/, results];\n        }\n      });\n    });\n  };\n  /**\n   * Get geofence from a geofence collection\n   * @param geofenceId:string\n   * @param options?: Optional parameters for getGeofence\n   * @returns {Promise<AmazonLocationServiceGeofence>} - Promise that resolves to a geofence object\n   */\n  AmazonLocationServiceProvider.prototype.getGeofence = function (geofenceId, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, client, commandInput, command, response, error_6, GeofenceId, CreateTime, UpdateTime, Status, Geometry, geofence;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n            // Verify geofence collection exists in aws-config.js\n            try {\n              this._verifyGeofenceCollections(options === null || options === void 0 ? void 0 : options.collectionName);\n            } catch (error) {\n              logger.debug(error);\n              throw error;\n            }\n            validateGeofenceId(geofenceId);\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgentObject()\n            });\n            commandInput = {\n              GeofenceId: geofenceId,\n              CollectionName: (options === null || options === void 0 ? void 0 : options.collectionName) || this._config.geofenceCollections.default\n            };\n            command = new GetGeofenceCommand(commandInput);\n            _a.label = 2;\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n            return [4 /*yield*/, client.send(command)];\n          case 3:\n            response = _a.sent();\n            return [3 /*break*/, 5];\n          case 4:\n            error_6 = _a.sent();\n            logger.debug(error_6);\n            throw error_6;\n          case 5:\n            GeofenceId = response.GeofenceId, CreateTime = response.CreateTime, UpdateTime = response.UpdateTime, Status = response.Status, Geometry = response.Geometry;\n            geofence = {\n              createTime: CreateTime,\n              geofenceId: GeofenceId,\n              geometry: {\n                polygon: Geometry.Polygon\n              },\n              status: Status,\n              updateTime: UpdateTime\n            };\n            return [2 /*return*/, geofence];\n        }\n      });\n    });\n  };\n  /**\n   * List geofences from a geofence collection\n   * @param  options?: ListGeofenceOptions\n   * @returns {Promise<ListGeofencesResults>} - Promise that resolves to an object with:\n   *   entries: list of geofences - 100 geofences are listed per page\n   *   nextToken: token for next page of geofences\n   */\n  AmazonLocationServiceProvider.prototype.listGeofences = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, client, listGeofencesInput, command, response, error_7, NextToken, Entries, results;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n            // Verify geofence collection exists in aws-config.js\n            try {\n              this._verifyGeofenceCollections(options === null || options === void 0 ? void 0 : options.collectionName);\n            } catch (error) {\n              logger.debug(error);\n              throw error;\n            }\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgentObject()\n            });\n            listGeofencesInput = {\n              NextToken: options === null || options === void 0 ? void 0 : options.nextToken,\n              CollectionName: (options === null || options === void 0 ? void 0 : options.collectionName) || this._config.geofenceCollections.default\n            };\n            command = new ListGeofencesCommand(listGeofencesInput);\n            _a.label = 2;\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n            return [4 /*yield*/, client.send(command)];\n          case 3:\n            response = _a.sent();\n            return [3 /*break*/, 5];\n          case 4:\n            error_7 = _a.sent();\n            logger.debug(error_7);\n            throw error_7;\n          case 5:\n            NextToken = response.NextToken, Entries = response.Entries;\n            results = {\n              entries: Entries.map(function (_a) {\n                var GeofenceId = _a.GeofenceId,\n                  CreateTime = _a.CreateTime,\n                  UpdateTime = _a.UpdateTime,\n                  Status = _a.Status,\n                  Polygon = _a.Geometry.Polygon;\n                return {\n                  geofenceId: GeofenceId,\n                  createTime: CreateTime,\n                  updateTime: UpdateTime,\n                  status: Status,\n                  geometry: {\n                    polygon: Polygon\n                  }\n                };\n              }),\n              nextToken: NextToken\n            };\n            return [2 /*return*/, results];\n        }\n      });\n    });\n  };\n  /**\n   * Delete geofences from a geofence collection\n   * @param geofenceIds: string|string[]\n   * @param options?: GeofenceOptions\n   * @returns {Promise<DeleteGeofencesResults>} - Promise that resolves to an object with:\n   *  successes: list of geofences successfully deleted\n   *  errors: list of geofences that failed to delete\n   */\n  AmazonLocationServiceProvider.prototype.deleteGeofences = function (geofenceIds, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, badGeofenceIds, results, geofenceIdBatches, count;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (geofenceIds.length < 1) {\n              throw new Error('GeofenceId input array is empty');\n            }\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n            this._verifyGeofenceCollections(options === null || options === void 0 ? void 0 : options.collectionName);\n            badGeofenceIds = geofenceIds.filter(function (geofenceId) {\n              try {\n                validateGeofenceId(geofenceId);\n              } catch (error) {\n                return true;\n              }\n            });\n            if (badGeofenceIds.length > 0) {\n              throw new Error(\"Invalid geofence ids: \" + badGeofenceIds.join(', '));\n            }\n            results = {\n              successes: [],\n              errors: []\n            };\n            geofenceIdBatches = [];\n            count = 0;\n            while (count < geofenceIds.length) {\n              geofenceIdBatches.push(geofenceIds.slice(count, count += 10));\n            }\n            return [4 /*yield*/, Promise.all(geofenceIdBatches.map(function (batch) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var response, error_8, badGeofenceIds;\n                var _a;\n                return __generator(this, function (_b) {\n                  switch (_b.label) {\n                    case 0:\n                      _b.trys.push([0, 2,, 3]);\n                      return [4 /*yield*/, this._AmazonLocationServiceBatchDeleteGeofenceCall(batch, (options === null || options === void 0 ? void 0 : options.collectionName) || this._config.geofenceCollections.default)];\n                    case 1:\n                      response = _b.sent();\n                      return [3 /*break*/, 3];\n                    case 2:\n                      error_8 = _b.sent();\n                      // If the API call fails, add the geofences to the errors array and move to next batch\n                      batch.forEach(function (geofenceId) {\n                        var errorObject = {\n                          geofenceId: geofenceId,\n                          error: {\n                            code: error_8.message,\n                            message: error_8.message\n                          }\n                        };\n                        results.errors.push(errorObject);\n                      });\n                      return [2 /*return*/];\n                    case 3:\n                      badGeofenceIds = response.Errors.map(function (_a) {\n                        var geofenceId = _a.geofenceId;\n                        return geofenceId;\n                      });\n                      (_a = results.successes).push.apply(_a, __spread(batch.filter(function (Id) {\n                        return !badGeofenceIds.includes(Id);\n                      })));\n                      return [2 /*return*/];\n                  }\n                });\n              });\n            }))];\n          case 2:\n            _a.sent();\n            return [2 /*return*/, results];\n        }\n      });\n    });\n  };\n  /**\n   * @private\n   */\n  AmazonLocationServiceProvider.prototype._ensureCredentials = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, cred, error_9;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, Credentials.get()];\n          case 1:\n            credentials = _a.sent();\n            if (!credentials) return [2 /*return*/, false];\n            cred = Credentials.shear(credentials);\n            logger.debug('Set credentials for storage. Credentials are:', cred);\n            this._config.credentials = cred;\n            return [2 /*return*/, true];\n          case 2:\n            error_9 = _a.sent();\n            logger.debug('Ensure credentials error. Credentials are:', error_9);\n            return [2 /*return*/, false];\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  AmazonLocationServiceProvider.prototype._verifyMapResources = function () {\n    if (!this._config.maps) {\n      var errorString = \"No map resources found in amplify config, run 'amplify add geo' to create one and run `amplify push` after\";\n      logger.debug(errorString);\n      throw new Error(errorString);\n    }\n    if (!this._config.maps.default) {\n      var errorString = \"No default map resource found in amplify config, run 'amplify add geo' to create one and run `amplify push` after\";\n      logger.debug(errorString);\n      throw new Error(errorString);\n    }\n  };\n  AmazonLocationServiceProvider.prototype._verifySearchIndex = function (optionalSearchIndex) {\n    if ((!this._config.search_indices || !this._config.search_indices.default) && !optionalSearchIndex) {\n      var errorString = 'No Search Index found in amplify config, please run `amplify add geo` to create one and run `amplify push` after.';\n      logger.debug(errorString);\n      throw new Error(errorString);\n    }\n  };\n  AmazonLocationServiceProvider.prototype._verifyGeofenceCollections = function (optionalGeofenceCollectionName) {\n    if ((!this._config.geofenceCollections || !this._config.geofenceCollections.default) && !optionalGeofenceCollectionName) {\n      var errorString = 'No Geofence Collections found, please run `amplify add geo` to create one and run `amplify push` after.';\n      logger.debug(errorString);\n      throw new Error(errorString);\n    }\n  };\n  AmazonLocationServiceProvider.prototype._AmazonLocationServiceBatchPutGeofenceCall = function (PascalGeofences, collectionName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var geofenceInput, client, command, response, error_10;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            geofenceInput = {\n              Entries: PascalGeofences,\n              CollectionName: collectionName || this._config.geofenceCollections.default\n            };\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgentObject()\n            });\n            command = new BatchPutGeofenceCommand(geofenceInput);\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, client.send(command)];\n          case 2:\n            response = _a.sent();\n            return [3 /*break*/, 4];\n          case 3:\n            error_10 = _a.sent();\n            throw error_10;\n          case 4:\n            return [2 /*return*/, response];\n        }\n      });\n    });\n  };\n  AmazonLocationServiceProvider.prototype._AmazonLocationServiceBatchDeleteGeofenceCall = function (geofenceIds, collectionName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var deleteGeofencesInput, client, command, response, error_11;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            deleteGeofencesInput = {\n              GeofenceIds: geofenceIds,\n              CollectionName: collectionName || this._config.geofenceCollections.default\n            };\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgentObject()\n            });\n            command = new BatchDeleteGeofenceCommand(deleteGeofencesInput);\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, client.send(command)];\n          case 2:\n            response = _a.sent();\n            return [3 /*break*/, 4];\n          case 3:\n            error_11 = _a.sent();\n            throw error_11;\n          case 4:\n            return [2 /*return*/, response];\n        }\n      });\n    });\n  };\n  AmazonLocationServiceProvider.CATEGORY = 'Geo';\n  AmazonLocationServiceProvider.PROVIDER_NAME = 'AmazonLocationService';\n  return AmazonLocationServiceProvider;\n}();\nexport { AmazonLocationServiceProvider };\n//# sourceMappingURL=AmazonLocationServiceProvider.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}