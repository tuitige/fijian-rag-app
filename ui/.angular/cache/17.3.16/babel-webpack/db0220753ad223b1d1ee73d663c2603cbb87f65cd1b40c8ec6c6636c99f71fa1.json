{"ast":null,"code":"import { __awaiter, __generator, __read, __spread } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Auth } from '@aws-amplify/auth';\nimport { GRAPHQL_AUTH_MODE } from '@aws-amplify/api-graphql';\nimport { ModelAttributeAuthProvider, ModelAttributeAuthAllow } from '../types';\nfunction getProviderFromRule(rule) {\n  // private with no provider means userPools\n  if (rule.allow === 'private' && !rule.provider) {\n    return ModelAttributeAuthProvider.USER_POOLS;\n  }\n  // public with no provider means apiKey\n  if (rule.allow === 'public' && !rule.provider) {\n    return ModelAttributeAuthProvider.API_KEY;\n  }\n  return rule.provider;\n}\nfunction sortAuthRulesWithPriority(rules) {\n  var allowSortPriority = [ModelAttributeAuthAllow.CUSTOM, ModelAttributeAuthAllow.OWNER, ModelAttributeAuthAllow.GROUPS, ModelAttributeAuthAllow.PRIVATE, ModelAttributeAuthAllow.PUBLIC];\n  var providerSortPriority = [ModelAttributeAuthProvider.FUNCTION, ModelAttributeAuthProvider.USER_POOLS, ModelAttributeAuthProvider.OIDC, ModelAttributeAuthProvider.IAM, ModelAttributeAuthProvider.API_KEY];\n  return __spread(rules).sort(function (a, b) {\n    if (a.allow === b.allow) {\n      return providerSortPriority.indexOf(getProviderFromRule(a)) - providerSortPriority.indexOf(getProviderFromRule(b));\n    }\n    return allowSortPriority.indexOf(a.allow) - allowSortPriority.indexOf(b.allow);\n  });\n}\nfunction getAuthRules(_a) {\n  var rules = _a.rules,\n    currentUser = _a.currentUser;\n  // Using Set to ensure uniqueness\n  var authModes = new Set();\n  rules.forEach(function (rule) {\n    switch (rule.allow) {\n      case ModelAttributeAuthAllow.CUSTOM:\n        // custom with no provider -> function\n        if (!rule.provider || rule.provider === ModelAttributeAuthProvider.FUNCTION) {\n          authModes.add(GRAPHQL_AUTH_MODE.AWS_LAMBDA);\n        }\n        break;\n      case ModelAttributeAuthAllow.GROUPS:\n      case ModelAttributeAuthAllow.OWNER:\n        {\n          // We shouldn't attempt User Pool or OIDC if there isn't an authenticated user\n          if (currentUser) {\n            if (rule.provider === ModelAttributeAuthProvider.USER_POOLS) {\n              authModes.add(GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS);\n            } else if (rule.provider === ModelAttributeAuthProvider.OIDC) {\n              authModes.add(GRAPHQL_AUTH_MODE.OPENID_CONNECT);\n            }\n          }\n          break;\n        }\n      case ModelAttributeAuthAllow.PRIVATE:\n        {\n          // We shouldn't attempt private if there isn't an authenticated user\n          if (currentUser) {\n            // private with no provider means userPools\n            if (!rule.provider || rule.provider === ModelAttributeAuthProvider.USER_POOLS) {\n              authModes.add(GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS);\n            } else if (rule.provider === ModelAttributeAuthProvider.IAM) {\n              authModes.add(GRAPHQL_AUTH_MODE.AWS_IAM);\n            }\n          }\n          break;\n        }\n      case ModelAttributeAuthAllow.PUBLIC:\n        {\n          if (rule.provider === ModelAttributeAuthProvider.IAM) {\n            authModes.add(GRAPHQL_AUTH_MODE.AWS_IAM);\n          } else if (!rule.provider || rule.provider === ModelAttributeAuthProvider.API_KEY) {\n            // public with no provider means apiKey\n            authModes.add(GRAPHQL_AUTH_MODE.API_KEY);\n          }\n          break;\n        }\n      default:\n        break;\n    }\n  });\n  return Array.from(authModes);\n}\n/**\n * Returns an array of auth modes to try based on the schema, model, and\n * authenticated user (or lack thereof). Rules are sourced from `getAuthRules`\n * and returned in the order they ought to be attempted.\n *\n * @see sortAuthRulesWithPriority\n * @see getAuthRules\n *\n * @param param0 The `{schema, modelName}` to inspect.\n * @returns A sorted array of auth modes to attempt.\n */\nexport var multiAuthStrategy = function (amplifyContext) {\n  return function (_a) {\n    var schema = _a.schema,\n      modelName = _a.modelName;\n    return __awaiter(void 0, void 0, void 0, function () {\n      var currentUser, e_1, attributes, authAttribute, sortedRules;\n      var _b;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            amplifyContext.Auth = amplifyContext.Auth || Auth;\n            _c.label = 1;\n          case 1:\n            _c.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, amplifyContext.Auth.currentAuthenticatedUser()];\n          case 2:\n            currentUser = _c.sent();\n            return [3 /*break*/, 4];\n          case 3:\n            e_1 = _c.sent();\n            return [3 /*break*/, 4];\n          case 4:\n            attributes = schema.namespaces.user.models[modelName].attributes;\n            if (attributes) {\n              authAttribute = attributes.find(function (attr) {\n                return attr.type === 'auth';\n              });\n              if ((_b = authAttribute === null || authAttribute === void 0 ? void 0 : authAttribute.properties) === null || _b === void 0 ? void 0 : _b.rules) {\n                sortedRules = sortAuthRulesWithPriority(authAttribute.properties.rules);\n                return [2 /*return*/, getAuthRules({\n                  currentUser: currentUser,\n                  rules: sortedRules\n                })];\n              }\n            }\n            return [2 /*return*/, []];\n        }\n      });\n    });\n  };\n};\n//# sourceMappingURL=multiAuthStrategy.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}