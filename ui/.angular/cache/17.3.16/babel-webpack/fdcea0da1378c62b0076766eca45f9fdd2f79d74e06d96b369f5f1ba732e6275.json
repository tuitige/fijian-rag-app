{"ast":null,"code":"import { __awaiter, __extends, __generator, __rest } from \"tslib\";\nimport { RETRY_MODES } from \"./config\";\nimport { DefaultRateLimiter } from \"./DefaultRateLimiter\";\nimport { StandardRetryStrategy } from \"./StandardRetryStrategy\";\nvar AdaptiveRetryStrategy = function (_super) {\n  __extends(AdaptiveRetryStrategy, _super);\n  function AdaptiveRetryStrategy(maxAttemptsProvider, options) {\n    var _this = this;\n    var _a = options !== null && options !== void 0 ? options : {},\n      rateLimiter = _a.rateLimiter,\n      superOptions = __rest(_a, [\"rateLimiter\"]);\n    _this = _super.call(this, maxAttemptsProvider, superOptions) || this;\n    _this.rateLimiter = rateLimiter !== null && rateLimiter !== void 0 ? rateLimiter : new DefaultRateLimiter();\n    _this.mode = RETRY_MODES.ADAPTIVE;\n    return _this;\n  }\n  AdaptiveRetryStrategy.prototype.retry = function (next, args) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n      return __generator(this, function (_a) {\n        return [2, _super.prototype.retry.call(this, next, args, {\n          beforeRequest: function () {\n            return __awaiter(_this, void 0, void 0, function () {\n              return __generator(this, function (_a) {\n                return [2, this.rateLimiter.getSendToken()];\n              });\n            });\n          },\n          afterRequest: function (response) {\n            _this.rateLimiter.updateClientSendingRate(response);\n          }\n        })];\n      });\n    });\n  };\n  return AdaptiveRetryStrategy;\n}(StandardRetryStrategy);\nexport { AdaptiveRetryStrategy };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}