{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __awaiter, __generator } from \"tslib\";\nimport { ConsoleLogger as Logger, Credentials, AnalyticsAction } from '@aws-amplify/core';\nimport { KinesisClient, PutRecordsCommand } from '@aws-sdk/client-kinesis';\nimport { fromUtf8 } from '@aws-sdk/util-utf8-browser';\nimport { getAnalyticsUserAgent } from '../utils/UserAgent';\nvar logger = new Logger('AWSKinesisProvider');\n// events buffer\nvar BUFFER_SIZE = 1000;\nvar FLUSH_SIZE = 100;\nvar FLUSH_INTERVAL = 5 * 1000; // 5s\nvar RESEND_LIMIT = 5;\nvar AWSKinesisProvider = /** @class */function () {\n  function AWSKinesisProvider(config) {\n    this._buffer = [];\n    this._config = config || {};\n    this._config.bufferSize = this._config.bufferSize || BUFFER_SIZE;\n    this._config.flushSize = this._config.flushSize || FLUSH_SIZE;\n    this._config.flushInterval = this._config.flushInterval || FLUSH_INTERVAL;\n    this._config.resendLimit = this._config.resendLimit || RESEND_LIMIT;\n    this._setupTimer();\n  }\n  AWSKinesisProvider.prototype._setupTimer = function () {\n    var _this = this;\n    if (this._timer) {\n      clearInterval(this._timer);\n    }\n    var _a = this._config,\n      flushSize = _a.flushSize,\n      flushInterval = _a.flushInterval;\n    this._timer = setInterval(function () {\n      var size = _this._buffer.length < flushSize ? _this._buffer.length : flushSize;\n      var events = [];\n      for (var i = 0; i < size; i += 1) {\n        var params = _this._buffer.shift();\n        events.push(params);\n      }\n      _this._sendFromBuffer(events);\n    }, flushInterval);\n  };\n  /**\n   * get the category of the plugin\n   */\n  AWSKinesisProvider.prototype.getCategory = function () {\n    return 'Analytics';\n  };\n  /**\n   * get provider name of the plugin\n   */\n  AWSKinesisProvider.prototype.getProviderName = function () {\n    return 'AWSKinesis';\n  };\n  /**\n   * configure the plugin\n   * @param {Object} config - configuration\n   */\n  AWSKinesisProvider.prototype.configure = function (config) {\n    logger.debug('configure Analytics', config);\n    var conf = config || {};\n    this._config = Object.assign({}, this._config, conf);\n    this._setupTimer();\n    return this._config;\n  };\n  /**\n   * record an event\n   * @param {Object} params - the params of an event\n   */\n  AWSKinesisProvider.prototype.record = function (params) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, this._getCredentials()];\n          case 1:\n            credentials = _b.sent();\n            if (!credentials) return [2 /*return*/, Promise.resolve(false)];\n            Object.assign(params, {\n              config: this._config,\n              credentials: credentials\n            });\n            if ((_a = params.event) === null || _a === void 0 ? void 0 : _a.immediate) {\n              this._sendEvents([params]);\n              return [2 /*return*/, Promise.resolve(true)];\n            } else {\n              return [2 /*return*/, this._putToBuffer(params)];\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  AWSKinesisProvider.prototype.updateEndpoint = function () {\n    logger.debug('updateEndpoint is not implemented in Kinesis provider');\n    return Promise.resolve(true);\n  };\n  /**\n   * @private\n   * @param params - params for the event recording\n   * Put events into buffer\n   */\n  AWSKinesisProvider.prototype._putToBuffer = function (params) {\n    if (this._buffer.length < BUFFER_SIZE) {\n      this._buffer.push(params);\n      return Promise.resolve(true);\n    } else {\n      logger.debug('exceed analytics events buffer size');\n      return Promise.reject(false);\n    }\n  };\n  AWSKinesisProvider.prototype._sendFromBuffer = function (events) {\n    var _this = this;\n    // collapse events by credentials\n    // events = [ {params} ]\n    var eventsGroups = [];\n    var preCred = null;\n    var group = [];\n    for (var i = 0; i < events.length; i += 1) {\n      var cred = events[i].credentials;\n      if (i === 0) {\n        group.push(events[i]);\n        preCred = cred;\n      } else {\n        if (cred.sessionToken === preCred.sessionToken && cred.identityId === preCred.identityId) {\n          logger.debug('no change for cred, put event in the same group');\n          group.push(events[i]);\n        } else {\n          eventsGroups.push(group);\n          group = [];\n          group.push(events[i]);\n          preCred = cred;\n        }\n      }\n    }\n    eventsGroups.push(group);\n    eventsGroups.map(function (evts) {\n      _this._sendEvents(evts);\n    });\n  };\n  AWSKinesisProvider.prototype._sendEvents = function (group) {\n    var _this = this;\n    if (group.length === 0) {\n      return;\n    }\n    var _a = group[0],\n      config = _a.config,\n      credentials = _a.credentials;\n    var initClients = this._init(config, credentials);\n    if (!initClients) return false;\n    var records = {};\n    group.map(function (params) {\n      // spit by streamName\n      var evt = params.event;\n      var streamName = evt.streamName;\n      if (records[streamName] === undefined) {\n        records[streamName] = [];\n      }\n      var bufferData = evt.data && typeof evt.data !== 'string' ? JSON.stringify(evt.data) : evt.data;\n      var Data = fromUtf8(bufferData);\n      var PartitionKey = evt.partitionKey || 'partition-' + credentials.identityId;\n      var record = {\n        Data: Data,\n        PartitionKey: PartitionKey\n      };\n      records[streamName].push(record);\n    });\n    Object.keys(records).map(function (streamName) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var command, err_1;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              logger.debug('putting records to kinesis with records', records[streamName]);\n              _a.label = 1;\n            case 1:\n              _a.trys.push([1, 3,, 4]);\n              command = new PutRecordsCommand({\n                Records: records[streamName],\n                StreamName: streamName\n              });\n              return [4 /*yield*/, this._kinesis.send(command)];\n            case 2:\n              _a.sent();\n              logger.debug('Upload records to stream', streamName);\n              return [3 /*break*/, 4];\n            case 3:\n              err_1 = _a.sent();\n              logger.debug('Failed to upload records to Kinesis', err_1);\n              return [3 /*break*/, 4];\n            case 4:\n              return [2 /*return*/];\n          }\n        });\n      });\n    });\n  };\n  AWSKinesisProvider.prototype._init = function (config, credentials) {\n    logger.debug('init clients');\n    if (this._kinesis && this._config.credentials && this._config.credentials.sessionToken === credentials.sessionToken && this._config.credentials.identityId === credentials.identityId) {\n      logger.debug('no change for analytics config, directly return from init');\n      return true;\n    }\n    this._config.credentials = credentials;\n    var region = config.region,\n      endpoint = config.endpoint;\n    return this._initKinesis(region, endpoint, credentials);\n  };\n  AWSKinesisProvider.prototype._initKinesis = function (region, endpoint, credentials) {\n    logger.debug('initialize kinesis with credentials', credentials);\n    this._kinesis = new KinesisClient({\n      region: region,\n      credentials: credentials,\n      customUserAgent: getAnalyticsUserAgent(AnalyticsAction.Record),\n      endpoint: endpoint\n    });\n    return true;\n  };\n  /**\n   * @private\n   * check if current credentials exists\n   */\n  AWSKinesisProvider.prototype._getCredentials = function () {\n    var _this = this;\n    return Credentials.get().then(function (credentials) {\n      if (!credentials) return null;\n      logger.debug('set credentials for analytics', _this._config.credentials);\n      return Credentials.shear(credentials);\n    }).catch(function (err) {\n      logger.debug('ensure credentials error', err);\n      return null;\n    });\n  };\n  return AWSKinesisProvider;\n}();\nexport { AWSKinesisProvider };\n//# sourceMappingURL=AWSKinesisProvider.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}