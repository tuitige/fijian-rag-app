{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __assign, __awaiter, __generator, __read } from \"tslib\";\nimport { parse } from 'url'; // Used for OAuth parsing of Cognito Hosted UI\nimport { launchUri } from './urlOpener';\nimport * as oAuthStorage from './oauthStorage';\nimport { Buffer } from 'buffer';\nimport { isCognitoHostedOpts, CognitoHostedUIIdentityProvider } from '../types/Auth';\nimport { AuthAction, Category, ConsoleLogger as Logger, getAmplifyUserAgent, Hub, urlSafeEncode, USER_AGENT_HEADER } from '@aws-amplify/core';\nimport { Sha256 } from '@aws-crypto/sha256-js';\nvar AMPLIFY_SYMBOL = typeof Symbol !== 'undefined' && typeof Symbol.for === 'function' ? Symbol.for('amplify_default') : '@@amplify_default';\nvar dispatchAuthEvent = function (event, data, message) {\n  Hub.dispatch('auth', {\n    event: event,\n    data: data,\n    message: message\n  }, 'Auth', AMPLIFY_SYMBOL);\n};\nvar logger = new Logger('OAuth');\nvar OAuth = /** @class */function () {\n  function OAuth(_a) {\n    var config = _a.config,\n      cognitoClientId = _a.cognitoClientId,\n      _b = _a.scopes,\n      scopes = _b === void 0 ? [] : _b;\n    this._urlOpener = config.urlOpener || launchUri;\n    this._config = config;\n    this._cognitoClientId = cognitoClientId;\n    if (!this.isValidScopes(scopes)) throw Error('scopes must be a String Array');\n    this._scopes = scopes;\n  }\n  OAuth.prototype.isValidScopes = function (scopes) {\n    return Array.isArray(scopes) && scopes.every(function (scope) {\n      return typeof scope === 'string';\n    });\n  };\n  OAuth.prototype.oauthSignIn = function (responseType, domain, redirectSignIn, clientId, provider, customState) {\n    if (responseType === void 0) {\n      responseType = 'code';\n    }\n    if (provider === void 0) {\n      provider = CognitoHostedUIIdentityProvider.Cognito;\n    }\n    var generatedState = this._generateState(32);\n    /* encodeURIComponent is not URL safe, use urlSafeEncode instead. Cognito\n    single-encodes/decodes url on first sign in and double-encodes/decodes url\n    when user already signed in. Using encodeURIComponent, Base32, Base64 add\n    characters % or = which on further encoding becomes unsafe. '=' create issue\n    for parsing query params.\n    Refer: https://github.com/aws-amplify/amplify-js/issues/5218 */\n    var state = customState ? generatedState + \"-\" + urlSafeEncode(customState) : generatedState;\n    oAuthStorage.setState(state);\n    var pkce_key = this._generateRandom(128);\n    oAuthStorage.setPKCE(pkce_key);\n    var code_challenge = this._generateChallenge(pkce_key);\n    var code_challenge_method = 'S256';\n    var scopesString = this._scopes.join(' ');\n    var queryString = Object.entries(__assign(__assign({\n      redirect_uri: redirectSignIn,\n      response_type: responseType,\n      client_id: clientId,\n      identity_provider: provider,\n      scope: scopesString,\n      state: state\n    }, responseType === 'code' ? {\n      code_challenge: code_challenge\n    } : {}), responseType === 'code' ? {\n      code_challenge_method: code_challenge_method\n    } : {})).map(function (_a) {\n      var _b = __read(_a, 2),\n        k = _b[0],\n        v = _b[1];\n      return encodeURIComponent(k) + \"=\" + encodeURIComponent(v);\n    }).join('&');\n    var URL = \"https://\" + domain + \"/oauth2/authorize?\" + queryString;\n    logger.debug(\"Redirecting to \" + URL);\n    this._urlOpener(URL, redirectSignIn);\n  };\n  OAuth.prototype._handleCodeFlow = function (currentUrl) {\n    return __awaiter(this, void 0, void 0, function () {\n      var code, currentUrlPathname, redirectSignInPathname, oAuthTokenEndpoint, client_id, redirect_uri, code_verifier, oAuthTokenBody, body, customUserAgentDetails, _a, access_token, refresh_token, id_token, error;\n      var _b;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            code = (parse(currentUrl).query || '').split('&').map(function (pairings) {\n              return pairings.split('=');\n            }).reduce(function (accum, _a) {\n              var _b;\n              var _c = __read(_a, 2),\n                k = _c[0],\n                v = _c[1];\n              return __assign(__assign({}, accum), (_b = {}, _b[k] = v, _b));\n            }, {\n              code: undefined\n            }).code;\n            currentUrlPathname = parse(currentUrl).pathname || '/';\n            redirectSignInPathname = parse(this._config.redirectSignIn).pathname || '/';\n            if (!code || currentUrlPathname !== redirectSignInPathname) {\n              return [2 /*return*/];\n            }\n            oAuthTokenEndpoint = 'https://' + this._config.domain + '/oauth2/token';\n            dispatchAuthEvent('codeFlow', {}, \"Retrieving tokens from \" + oAuthTokenEndpoint);\n            client_id = isCognitoHostedOpts(this._config) ? this._cognitoClientId : this._config.clientID;\n            redirect_uri = isCognitoHostedOpts(this._config) ? this._config.redirectSignIn : this._config.redirectUri;\n            code_verifier = oAuthStorage.getPKCE();\n            oAuthTokenBody = __assign({\n              grant_type: 'authorization_code',\n              code: code,\n              client_id: client_id,\n              redirect_uri: redirect_uri\n            }, code_verifier ? {\n              code_verifier: code_verifier\n            } : {});\n            logger.debug(\"Calling token endpoint: \" + oAuthTokenEndpoint + \" with\", oAuthTokenBody);\n            body = Object.entries(oAuthTokenBody).map(function (_a) {\n              var _b = __read(_a, 2),\n                k = _b[0],\n                v = _b[1];\n              return encodeURIComponent(k) + \"=\" + encodeURIComponent(v);\n            }).join('&');\n            customUserAgentDetails = {\n              category: Category.Auth,\n              action: AuthAction.FederatedSignIn\n            };\n            return [4 /*yield*/, fetch(oAuthTokenEndpoint, {\n              method: 'POST',\n              headers: (_b = {\n                'Content-Type': 'application/x-www-form-urlencoded'\n              }, _b[USER_AGENT_HEADER] = getAmplifyUserAgent(customUserAgentDetails), _b),\n              body: body\n            })];\n          case 1:\n            return [4 /*yield*/, _c.sent().json()];\n          case 2:\n            _a = _c.sent(), access_token = _a.access_token, refresh_token = _a.refresh_token, id_token = _a.id_token, error = _a.error;\n            if (error) {\n              throw new Error(error);\n            }\n            return [2 /*return*/, {\n              accessToken: access_token,\n              refreshToken: refresh_token,\n              idToken: id_token\n            }];\n        }\n      });\n    });\n  };\n  OAuth.prototype._handleImplicitFlow = function (currentUrl) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, id_token, access_token;\n      return __generator(this, function (_b) {\n        _a = (parse(currentUrl).hash || '#').substr(1) // Remove # from returned code\n        .split('&').map(function (pairings) {\n          return pairings.split('=');\n        }).reduce(function (accum, _a) {\n          var _b;\n          var _c = __read(_a, 2),\n            k = _c[0],\n            v = _c[1];\n          return __assign(__assign({}, accum), (_b = {}, _b[k] = v, _b));\n        }, {\n          id_token: undefined,\n          access_token: undefined\n        }), id_token = _a.id_token, access_token = _a.access_token;\n        dispatchAuthEvent('implicitFlow', {}, \"Got tokens from \" + currentUrl);\n        logger.debug(\"Retrieving implicit tokens from \" + currentUrl + \" with\");\n        return [2 /*return*/, {\n          accessToken: access_token,\n          idToken: id_token,\n          refreshToken: null\n        }];\n      });\n    });\n  };\n  OAuth.prototype.handleAuthResponse = function (currentUrl) {\n    return __awaiter(this, void 0, void 0, function () {\n      var urlParams, error, error_description, state, _a, _b, e_1;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _c.trys.push([0, 5,, 6]);\n            urlParams = currentUrl ? __assign(__assign({}, (parse(currentUrl).hash || '#').substr(1).split('&').map(function (entry) {\n              return entry.split('=');\n            }).reduce(function (acc, _a) {\n              var _b = __read(_a, 2),\n                k = _b[0],\n                v = _b[1];\n              return acc[k] = v, acc;\n            }, {})), (parse(currentUrl).query || '').split('&').map(function (entry) {\n              return entry.split('=');\n            }).reduce(function (acc, _a) {\n              var _b = __read(_a, 2),\n                k = _b[0],\n                v = _b[1];\n              return acc[k] = v, acc;\n            }, {})) : {};\n            error = urlParams.error, error_description = urlParams.error_description;\n            if (error) {\n              throw new Error(error_description);\n            }\n            state = this._validateState(urlParams);\n            logger.debug(\"Starting \" + this._config.responseType + \" flow with \" + currentUrl);\n            if (!(this._config.responseType === 'code')) return [3 /*break*/, 2];\n            _a = [{}];\n            return [4 /*yield*/, this._handleCodeFlow(currentUrl)];\n          case 1:\n            return [2 /*return*/, __assign.apply(void 0, [__assign.apply(void 0, _a.concat([_c.sent()])), {\n              state: state\n            }])];\n          case 2:\n            _b = [{}];\n            return [4 /*yield*/, this._handleImplicitFlow(currentUrl)];\n          case 3:\n            return [2 /*return*/, __assign.apply(void 0, [__assign.apply(void 0, _b.concat([_c.sent()])), {\n              state: state\n            }])];\n          case 4:\n            return [3 /*break*/, 6];\n          case 5:\n            e_1 = _c.sent();\n            logger.debug(\"Error handling auth response.\", e_1);\n            throw e_1;\n          case 6:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  OAuth.prototype._validateState = function (urlParams) {\n    if (!urlParams) {\n      return;\n    }\n    var savedState = oAuthStorage.getState();\n    var returnedState = urlParams.state;\n    // This is because savedState only exists if the flow was initiated by Amplify\n    if (savedState && savedState !== returnedState) {\n      throw new Error('Invalid state in OAuth flow');\n    }\n    return returnedState;\n  };\n  OAuth.prototype.signOut = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var oAuthLogoutEndpoint, client_id, signout_uri;\n      return __generator(this, function (_a) {\n        oAuthLogoutEndpoint = 'https://' + this._config.domain + '/logout?';\n        client_id = isCognitoHostedOpts(this._config) ? this._cognitoClientId : this._config.oauth.clientID;\n        signout_uri = isCognitoHostedOpts(this._config) ? this._config.redirectSignOut : this._config.returnTo;\n        oAuthLogoutEndpoint += Object.entries({\n          client_id: client_id,\n          logout_uri: encodeURIComponent(signout_uri)\n        }).map(function (_a) {\n          var _b = __read(_a, 2),\n            k = _b[0],\n            v = _b[1];\n          return k + \"=\" + v;\n        }).join('&');\n        dispatchAuthEvent('oAuthSignOut', {\n          oAuth: 'signOut'\n        }, \"Signing out from \" + oAuthLogoutEndpoint);\n        logger.debug(\"Signing out from \" + oAuthLogoutEndpoint);\n        return [2 /*return*/, this._urlOpener(oAuthLogoutEndpoint, signout_uri)];\n      });\n    });\n  };\n  OAuth.prototype._generateState = function (length) {\n    var result = '';\n    var i = length;\n    var chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    for (; i > 0; --i) result += chars[Math.round(Math.random() * (chars.length - 1))];\n    return result;\n  };\n  OAuth.prototype._generateChallenge = function (code) {\n    var awsCryptoHash = new Sha256();\n    awsCryptoHash.update(code);\n    var resultFromAWSCrypto = awsCryptoHash.digestSync();\n    var b64 = Buffer.from(resultFromAWSCrypto).toString('base64');\n    var base64URLFromAWSCrypto = this._base64URL(b64);\n    return base64URLFromAWSCrypto;\n  };\n  OAuth.prototype._base64URL = function (string) {\n    return string.replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n  };\n  OAuth.prototype._generateRandom = function (size) {\n    var CHARSET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~';\n    var buffer = new Uint8Array(size);\n    if (typeof window !== 'undefined' && !!window.crypto) {\n      window.crypto.getRandomValues(buffer);\n    } else {\n      for (var i = 0; i < size; i += 1) {\n        buffer[i] = Math.random() * CHARSET.length | 0;\n      }\n    }\n    return this._bufferToString(buffer);\n  };\n  OAuth.prototype._bufferToString = function (buffer) {\n    var CHARSET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var state = [];\n    for (var i = 0; i < buffer.byteLength; i += 1) {\n      var index = buffer[i] % CHARSET.length;\n      state.push(CHARSET[index]);\n    }\n    return state.join('');\n  };\n  return OAuth;\n}();\nexport default OAuth;\n//# sourceMappingURL=OAuth.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}