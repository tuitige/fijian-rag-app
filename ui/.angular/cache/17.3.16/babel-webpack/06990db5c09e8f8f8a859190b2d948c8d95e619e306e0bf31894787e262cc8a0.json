{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { Amplify, ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { AWSLexProvider } from './Providers';\nvar logger = new Logger('Interactions');\nvar InteractionsClass = /** @class */function () {\n  /**\n   * Initialize PubSub with AWS configurations\n   *\n   * @param {InteractionsOptions} options - Configuration object for Interactions\n   */\n  function InteractionsClass(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    this._options = options;\n    logger.debug('Interactions Options', this._options);\n    this._pluggables = {};\n  }\n  InteractionsClass.prototype.getModuleName = function () {\n    return 'Interactions';\n  };\n  /**\n   *\n   * @param {InteractionsOptions} options - Configuration object for Interactions\n   * @return {InteractionsOptions} - The current configuration\n   */\n  InteractionsClass.prototype.configure = function (options) {\n    var _this = this;\n    var opt = options ? options.Interactions || options : {};\n    logger.debug('configure Interactions', {\n      opt: opt\n    });\n    this._options = __assign(__assign({\n      bots: {}\n    }, opt), opt.Interactions);\n    var aws_bots_config = this._options.aws_bots_config;\n    var bots_config = this._options.bots;\n    if (!Object.keys(bots_config).length && aws_bots_config) {\n      // Convert aws_bots_config to bots object\n      if (Array.isArray(aws_bots_config)) {\n        aws_bots_config.forEach(function (bot) {\n          _this._options.bots[bot.name] = bot;\n        });\n      }\n    }\n    // configure bots to their specific providers\n    Object.keys(bots_config).forEach(function (botKey) {\n      var _a;\n      var bot = bots_config[botKey];\n      var providerName = bot.providerName || 'AWSLexProvider';\n      // add default provider if required\n      if (!_this._pluggables.AWSLexProvider && providerName === 'AWSLexProvider') {\n        _this._pluggables.AWSLexProvider = new AWSLexProvider();\n      }\n      // configure bot with it's respective provider\n      if (_this._pluggables[providerName]) {\n        _this._pluggables[providerName].configure((_a = {}, _a[bot.name] = bot, _a));\n      } else {\n        logger.debug(\"bot \" + bot.name + \" was not configured as \" + providerName + \" provider was not found\");\n      }\n    });\n    return this._options;\n  };\n  InteractionsClass.prototype.addPluggable = function (pluggable) {\n    var _this = this;\n    if (pluggable && pluggable.getCategory() === 'Interactions') {\n      if (!this._pluggables[pluggable.getProviderName()]) {\n        // configure bots for the new plugin\n        Object.keys(this._options.bots).filter(function (botKey) {\n          return _this._options.bots[botKey].providerName === pluggable.getProviderName();\n        }).forEach(function (botKey) {\n          var _a;\n          var bot = _this._options.bots[botKey];\n          pluggable.configure((_a = {}, _a[bot.name] = bot, _a));\n        });\n        this._pluggables[pluggable.getProviderName()] = pluggable;\n        return;\n      } else {\n        throw new Error('Pluggable ' + pluggable.getProviderName() + ' already plugged');\n      }\n    }\n  };\n  InteractionsClass.prototype.send = function (botname, message) {\n    return __awaiter(this, void 0, void 0, function () {\n      var botProvider;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this._options.bots || !this._options.bots[botname]) {\n              return [2 /*return*/, Promise.reject('Bot ' + botname + ' does not exist')];\n            }\n            botProvider = this._options.bots[botname].providerName || 'AWSLexProvider';\n            if (!this._pluggables[botProvider]) {\n              return [2 /*return*/, Promise.reject('Bot ' + botProvider + ' does not have valid pluggin did you try addPluggable first?')];\n            }\n            return [4 /*yield*/, this._pluggables[botProvider].sendMessage(botname, message)];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  InteractionsClass.prototype.onComplete = function (botname, callback) {\n    if (!this._options.bots || !this._options.bots[botname]) {\n      throw new Error('Bot ' + botname + ' does not exist');\n    }\n    var botProvider = this._options.bots[botname].providerName || 'AWSLexProvider';\n    if (!this._pluggables[botProvider]) {\n      throw new Error('Bot ' + botProvider + ' does not have valid pluggin did you try addPluggable first?');\n    }\n    this._pluggables[botProvider].onComplete(botname, callback);\n  };\n  return InteractionsClass;\n}();\nexport { InteractionsClass };\nexport var Interactions = new InteractionsClass();\nAmplify.register(Interactions);\n//# sourceMappingURL=Interactions.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}