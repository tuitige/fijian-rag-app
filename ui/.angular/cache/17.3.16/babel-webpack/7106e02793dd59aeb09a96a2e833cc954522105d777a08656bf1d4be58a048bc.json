{"ast":null,"code":"import { __asyncGenerator, __asyncValues, __await, __generator } from \"tslib\";\nexport function getUnmarshalledStream(source, options) {\n  var _a;\n  return _a = {}, _a[Symbol.asyncIterator] = function () {\n    return __asyncGenerator(this, arguments, function () {\n      var source_1, source_1_1, chunk, message, messageType, unmodeledError, code, exception, deserializedException, error, event_1, deserialized, e_1_1;\n      var _a, _b;\n      var e_1, _c;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            _d.trys.push([0, 12, 13, 18]);\n            source_1 = __asyncValues(source);\n            _d.label = 1;\n          case 1:\n            return [4, __await(source_1.next())];\n          case 2:\n            if (!(source_1_1 = _d.sent(), !source_1_1.done)) return [3, 11];\n            chunk = source_1_1.value;\n            message = options.eventStreamCodec.decode(chunk);\n            messageType = message.headers[\":message-type\"].value;\n            if (!(messageType === \"error\")) return [3, 3];\n            unmodeledError = new Error(message.headers[\":error-message\"].value || \"UnknownError\");\n            unmodeledError.name = message.headers[\":error-code\"].value;\n            throw unmodeledError;\n          case 3:\n            if (!(messageType === \"exception\")) return [3, 5];\n            code = message.headers[\":exception-type\"].value;\n            exception = (_a = {}, _a[code] = message, _a);\n            return [4, __await(options.deserializer(exception))];\n          case 4:\n            deserializedException = _d.sent();\n            if (deserializedException.$unknown) {\n              error = new Error(options.toUtf8(message.body));\n              error.name = code;\n              throw error;\n            }\n            throw deserializedException[code];\n          case 5:\n            if (!(messageType === \"event\")) return [3, 9];\n            event_1 = (_b = {}, _b[message.headers[\":event-type\"].value] = message, _b);\n            return [4, __await(options.deserializer(event_1))];\n          case 6:\n            deserialized = _d.sent();\n            if (deserialized.$unknown) return [3, 10];\n            return [4, __await(deserialized)];\n          case 7:\n            return [4, _d.sent()];\n          case 8:\n            _d.sent();\n            return [3, 10];\n          case 9:\n            throw Error(\"Unrecognizable event type: \".concat(message.headers[\":event-type\"].value));\n          case 10:\n            return [3, 1];\n          case 11:\n            return [3, 18];\n          case 12:\n            e_1_1 = _d.sent();\n            e_1 = {\n              error: e_1_1\n            };\n            return [3, 18];\n          case 13:\n            _d.trys.push([13,, 16, 17]);\n            if (!(source_1_1 && !source_1_1.done && (_c = source_1.return))) return [3, 15];\n            return [4, __await(_c.call(source_1))];\n          case 14:\n            _d.sent();\n            _d.label = 15;\n          case 15:\n            return [3, 17];\n          case 16:\n            if (e_1) throw e_1.error;\n            return [7];\n          case 17:\n            return [7];\n          case 18:\n            return [2];\n        }\n      });\n    });\n  }, _a;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}