{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __extends } from \"tslib\";\nimport { AnalyticsAction, ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { AWSKinesisProvider } from './AWSKinesisProvider';\nimport { PutRecordBatchCommand, FirehoseClient } from '@aws-sdk/client-firehose';\nimport { fromUtf8 } from '@aws-sdk/util-utf8-browser';\nimport { getAnalyticsUserAgent } from '../utils/UserAgent';\nvar logger = new Logger('AWSKineisFirehoseProvider');\nvar AWSKinesisFirehoseProvider = /** @class */function (_super) {\n  __extends(AWSKinesisFirehoseProvider, _super);\n  function AWSKinesisFirehoseProvider(config) {\n    return _super.call(this, config) || this;\n  }\n  /**\n   * get provider name of the plugin\n   */\n  AWSKinesisFirehoseProvider.prototype.getProviderName = function () {\n    return 'AWSKinesisFirehose';\n  };\n  AWSKinesisFirehoseProvider.prototype._sendEvents = function (group) {\n    var _this = this;\n    if (group.length === 0) {\n      return;\n    }\n    var _a = group[0],\n      config = _a.config,\n      credentials = _a.credentials;\n    var initClients = this._init(config, credentials);\n    if (!initClients) return false;\n    var records = {};\n    group.map(function (params) {\n      // split by streamName\n      var evt = params.event;\n      var streamName = evt.streamName,\n        data = evt.data;\n      if (records[streamName] === undefined) {\n        records[streamName] = [];\n      }\n      var bufferData = data && typeof data !== 'string' ? JSON.stringify(data) : data;\n      var Data = fromUtf8(bufferData);\n      var record = {\n        Data: Data\n      };\n      records[streamName].push(record);\n    });\n    Object.keys(records).map(function (streamName) {\n      logger.debug('putting records to kinesis', streamName, 'with records', records[streamName]);\n      _this._kinesisFirehose.send(new PutRecordBatchCommand({\n        Records: records[streamName],\n        DeliveryStreamName: streamName\n      })).then(function (res) {\n        return logger.debug('Upload records to stream', streamName);\n      }).catch(function (err) {\n        return logger.debug('Failed to upload records to Kinesis', err);\n      });\n    });\n  };\n  AWSKinesisFirehoseProvider.prototype._init = function (config, credentials) {\n    logger.debug('init clients');\n    if (this._kinesisFirehose && this._config.credentials && this._config.credentials.sessionToken === credentials.sessionToken && this._config.credentials.identityId === credentials.identityId) {\n      logger.debug('no change for analytics config, directly return from init');\n      return true;\n    }\n    this._config.credentials = credentials;\n    var region = config.region;\n    return this._initFirehose(region, credentials);\n  };\n  AWSKinesisFirehoseProvider.prototype._initFirehose = function (region, credentials) {\n    logger.debug('initialize kinesis firehose with credentials', credentials);\n    this._kinesisFirehose = new FirehoseClient({\n      apiVersion: '2015-08-04',\n      region: region,\n      credentials: credentials,\n      customUserAgent: getAnalyticsUserAgent(AnalyticsAction.Record)\n    });\n    return true;\n  };\n  return AWSKinesisFirehoseProvider;\n}(AWSKinesisProvider);\nexport { AWSKinesisFirehoseProvider };\n//# sourceMappingURL=AWSKinesisFirehoseProvider.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}