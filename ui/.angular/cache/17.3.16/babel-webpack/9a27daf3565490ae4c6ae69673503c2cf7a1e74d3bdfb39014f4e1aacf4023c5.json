{"ast":null,"code":"import { __assign, __read, __spread } from \"tslib\";\nimport { extractPrimaryKeyFieldNames, extractPrimaryKeyValues } from '../util';\nexport { ModelSortPredicateCreator } from './sort';\nvar predicatesAllSet = new WeakSet();\nexport function isPredicatesAll(predicate) {\n  return predicatesAllSet.has(predicate);\n}\n/**\n * The valid logical grouping keys for a predicate group.\n */\nvar groupKeys = new Set(['and', 'or', 'not']);\n/**\n * Determines whether an object is a GraphQL style predicate \"group\", which must be an\n * object containing a single \"group key\", which then contains the child condition(s).\n *\n * E.g.,\n *\n * ```\n * { and: [ ... ] }\n * { not: { ... } }\n * ```\n *\n * @param o The object to test.\n */\nvar isGroup = function (o) {\n  var keys = __spread(Object.keys(o));\n  return keys.length === 1 && groupKeys.has(keys[0]);\n};\n/**\n * Determines whether an object specifies no conditions and should match everything,\n * as would be the case with `Predicates.ALL`.\n *\n * @param o The object to test.\n */\nvar isEmpty = function (o) {\n  return !Array.isArray(o) && Object.keys(o).length === 0;\n};\n/**\n * The valid comparison operators that can be used as keys in a predicate comparison object.\n */\nexport var comparisonKeys = new Set(['eq', 'ne', 'gt', 'lt', 'ge', 'le', 'contains', 'notContains', 'beginsWith', 'between']);\n/**\n * Determines whether an object is a GraphQL style predicate comparison node, which must\n * be an object containing a single \"comparison operator\" key, which then contains the\n * operand or operands to compare against.\n *\n * @param o The object to test.\n */\nvar isComparison = function (o) {\n  var keys = __spread(Object.keys(o));\n  return !Array.isArray(o) && keys.length === 1 && comparisonKeys.has(keys[0]);\n};\n/**\n * A light check to determine whether an object is a valid GraphQL Condition AST.\n *\n * @param o The object to test.\n */\nvar isValid = function (o) {\n  if (Array.isArray(o)) {\n    return o.every(function (v) {\n      return isValid(v);\n    });\n  } else {\n    return Object.keys(o).length <= 1;\n  }\n};\n// This symbol is not used at runtime, only its type (unique symbol)\nexport var PredicateAll = Symbol('A predicate that matches all records');\nvar Predicates = /** @class */function () {\n  function Predicates() {}\n  Object.defineProperty(Predicates, \"ALL\", {\n    get: function () {\n      var predicate = function (c) {\n        return c;\n      };\n      predicatesAllSet.add(predicate);\n      return predicate;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Predicates;\n}();\nexport { Predicates };\nvar ModelPredicateCreator = /** @class */function () {\n  function ModelPredicateCreator() {}\n  /**\n   * Determines whether the given storage predicate (lookup key) is a predicate\n   * key that DataStore recognizes.\n   *\n   * @param predicate The storage predicate (lookup key) to test.\n   */\n  ModelPredicateCreator.isValidPredicate = function (predicate) {\n    return ModelPredicateCreator.predicateGroupsMap.has(predicate);\n  };\n  /**\n   * Looks for the storage predicate AST that corresponds to a given storage\n   * predicate key.\n   *\n   * The key must have been created internally by a DataStore utility\n   * method, such as `ModelPredicate.createFromAST()`.\n   *\n   * @param predicate The predicate reference to look up.\n   * @param throwOnInvalid Whether to throw an exception if the predicate\n   * isn't a valid DataStore predicate.\n   */\n  ModelPredicateCreator.getPredicates = function (predicate, throwOnInvalid) {\n    if (throwOnInvalid === void 0) {\n      throwOnInvalid = true;\n    }\n    if (throwOnInvalid && !ModelPredicateCreator.isValidPredicate(predicate)) {\n      throw new Error('The predicate is not valid');\n    }\n    return ModelPredicateCreator.predicateGroupsMap.get(predicate);\n  };\n  /**\n   * using the PK values from the given `model` (which can be a partial of T\n   * Creates a predicate that matches an instance described by `modelDefinition`\n   * that contains only PK field values.)\n   *\n   * @param modelDefinition The model definition to create a predicate for.\n   * @param model The model instance to extract value equalities from.\n   */\n  ModelPredicateCreator.createForPk = function (modelDefinition, model) {\n    var keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n    var keyValues = extractPrimaryKeyValues(model, keyFields);\n    var predicate = this.createFromAST(modelDefinition, {\n      and: keyFields.map(function (field, idx) {\n        var _a;\n        var operand = keyValues[idx];\n        return _a = {}, _a[field] = {\n          eq: operand\n        }, _a;\n      })\n    });\n    return predicate;\n  };\n  /**\n   * Searches a `Model` table for records matching the given equalities object.\n   *\n   * This only matches against fields given in the equalities object. No other\n   * fields are tested by the predicate.\n   *\n   * @param modelDefinition The model we need a predicate for.\n   * @param flatEqualities An object holding field equalities to search for.\n   */\n  ModelPredicateCreator.createFromFlatEqualities = function (modelDefinition, flatEqualities) {\n    var ast = {\n      and: Object.entries(flatEqualities).map(function (_a) {\n        var _b;\n        var _c = __read(_a, 2),\n          k = _c[0],\n          v = _c[1];\n        return _b = {}, _b[k] = {\n          eq: v\n        }, _b;\n      })\n    };\n    return this.createFromAST(modelDefinition, ast);\n  };\n  /**\n   * Accepts a GraphQL style filter predicate tree and transforms it into an\n   * AST that can be used for a storage adapter predicate. Example input:\n   *\n   * ```js\n   * {\n   * \tand: [\n   * \t\t{ name: { eq: \"Bob Jones\" } },\n   * \t\t{ age: { between: [32, 64] } },\n   * \t\t{ not: {\n   * \t\t\tor: [\n   * \t\t\t\t{ favoriteFood: { eq: 'pizza' } },\n   * \t\t\t\t{ favoriteFood: { eq: 'tacos' } },\n   * \t\t\t]\n   * \t\t}}\n   * \t]\n   * }\n   * ```\n   *\n   * @param gql GraphQL style filter node.\n   */\n  ModelPredicateCreator.transformGraphQLFilterNodeToPredicateAST = function (gql) {\n    var _this = this;\n    if (!isValid(gql)) {\n      throw new Error('Invalid GraphQL Condition or subtree: ' + JSON.stringify(gql));\n    }\n    if (isEmpty(gql)) {\n      return {\n        type: 'and',\n        predicates: []\n      };\n    } else if (isGroup(gql)) {\n      var groupkey = Object.keys(gql)[0];\n      var children = this.transformGraphQLFilterNodeToPredicateAST(gql[groupkey]);\n      return {\n        type: groupkey,\n        predicates: Array.isArray(children) ? children : [children]\n      };\n    } else if (isComparison(gql)) {\n      var operatorKey = Object.keys(gql)[0];\n      return {\n        operator: operatorKey,\n        operand: gql[operatorKey]\n      };\n    } else {\n      if (Array.isArray(gql)) {\n        return gql.map(function (o) {\n          return _this.transformGraphQLFilterNodeToPredicateAST(o);\n        });\n      } else {\n        var fieldKey = Object.keys(gql)[0];\n        return __assign({\n          field: fieldKey\n        }, this.transformGraphQLFilterNodeToPredicateAST(gql[fieldKey]));\n      }\n    }\n  };\n  /**\n   * Accepts a GraphQL style filter predicate tree and transforms it into a predicate\n   * that storage adapters understand. Example input:\n   *\n   * ```js\n   * {\n   * \tand: [\n   * \t\t{ name: { eq: \"Bob Jones\" } },\n   * \t\t{ age: { between: [32, 64] } },\n   * \t\t{ not: {\n   * \t\t\tor: [\n   * \t\t\t\t{ favoriteFood: { eq: 'pizza' } },\n   * \t\t\t\t{ favoriteFood: { eq: 'tacos' } },\n   * \t\t\t]\n   * \t\t}}\n   * \t]\n   * }\n   * ```\n   *\n   * @param modelDefinition The model that the AST/predicate must be compatible with.\n   * @param ast The graphQL style AST that should specify conditions for `modelDefinition`.\n   */\n  ModelPredicateCreator.createFromAST = function (modelDefinition, ast) {\n    var key = {};\n    ModelPredicateCreator.predicateGroupsMap.set(key, this.transformGraphQLFilterNodeToPredicateAST(ast));\n    return key;\n  };\n  /**\n   * Map of storage predicates (key objects) to storage predicate AST's.\n   */\n  ModelPredicateCreator.predicateGroupsMap = new WeakMap();\n  return ModelPredicateCreator;\n}();\nexport { ModelPredicateCreator };\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}