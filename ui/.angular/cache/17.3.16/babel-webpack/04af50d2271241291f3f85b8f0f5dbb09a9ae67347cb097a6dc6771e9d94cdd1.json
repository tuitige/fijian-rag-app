{"ast":null,"code":"import { __assign, __awaiter, __extends, __generator } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AbstractInteractionsProvider } from './InteractionsProvider';\nimport { LexRuntimeServiceClient, PostTextCommand, PostContentCommand } from '@aws-sdk/client-lex-runtime-service';\nimport { ConsoleLogger as Logger, Credentials, getAmplifyUserAgentObject } from '@aws-amplify/core';\nimport { convert } from './AWSLexProviderHelper/utils';\nvar logger = new Logger('AWSLexProvider');\nvar AWSLexProvider = /** @class */function (_super) {\n  __extends(AWSLexProvider, _super);\n  function AWSLexProvider(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var _this = _super.call(this, options) || this;\n    _this._botsCompleteCallback = {};\n    return _this;\n  }\n  AWSLexProvider.prototype.getProviderName = function () {\n    return 'AWSLexProvider';\n  };\n  AWSLexProvider.prototype.configure = function (config) {\n    if (config === void 0) {\n      config = {};\n    }\n    var propertiesToTest = ['name', 'alias', 'region'];\n    Object.keys(config).forEach(function (botKey) {\n      var botConfig = config[botKey];\n      // is bot config correct\n      if (!propertiesToTest.every(function (x) {\n        return x in botConfig;\n      })) {\n        throw new Error('invalid bot configuration');\n      }\n    });\n    return _super.prototype.configure.call(this, config);\n  };\n  /**\n   * @private\n   * @deprecated\n   * This is used internally by 'sendMessage' to call onComplete callback\n   * for a bot if configured\n   */\n  AWSLexProvider.prototype.reportBotStatus = function (data, botname) {\n    var _this = this;\n    // Check if state is fulfilled to resolve onFullfilment promise\n    logger.debug('postContent state', data.dialogState);\n    if (data.dialogState === 'ReadyForFulfillment' || data.dialogState === 'Fulfilled') {\n      if (typeof this._botsCompleteCallback[botname] === 'function') {\n        setTimeout(function () {\n          return _this._botsCompleteCallback[botname](null, data);\n        }, 0);\n      }\n      if (this._config && typeof this._config[botname].onComplete === 'function') {\n        setTimeout(function () {\n          return _this._config[botname].onComplete(null, data);\n        }, 0);\n      }\n    }\n    if (data.dialogState === 'Failed') {\n      if (typeof this._botsCompleteCallback[botname] === 'function') {\n        setTimeout(function () {\n          return _this._botsCompleteCallback[botname]('Bot conversation failed');\n        }, 0);\n      }\n      if (this._config && typeof this._config[botname].onComplete === 'function') {\n        setTimeout(function () {\n          return _this._config[botname].onComplete('Bot conversation failed');\n        }, 0);\n      }\n    }\n  };\n  AWSLexProvider.prototype.sendMessage = function (botname, message) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, error_1, params, postTextCommand, data, err_1, content, messageType, inputStream, _a, postContentCommand, data, audioArray, _b, response, err_2;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            // check if bot exists\n            if (!this._config[botname]) {\n              return [2 /*return*/, Promise.reject('Bot ' + botname + ' does not exist')];\n            }\n            _c.label = 1;\n          case 1:\n            _c.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, Credentials.get()];\n          case 2:\n            credentials = _c.sent();\n            return [3 /*break*/, 4];\n          case 3:\n            error_1 = _c.sent();\n            return [2 /*return*/, Promise.reject('No credentials')];\n          case 4:\n            this.lexRuntimeServiceClient = new LexRuntimeServiceClient({\n              region: this._config[botname].region,\n              credentials: credentials,\n              customUserAgent: getAmplifyUserAgentObject()\n            });\n            if (!(typeof message === 'string')) return [3 /*break*/, 9];\n            params = {\n              botAlias: this._config[botname].alias,\n              botName: botname,\n              inputText: message,\n              userId: credentials.identityId\n            };\n            logger.debug('postText to lex', message);\n            _c.label = 5;\n          case 5:\n            _c.trys.push([5, 7,, 8]);\n            postTextCommand = new PostTextCommand(params);\n            return [4 /*yield*/, this.lexRuntimeServiceClient.send(postTextCommand)];\n          case 6:\n            data = _c.sent();\n            this.reportBotStatus(data, botname);\n            return [2 /*return*/, data];\n          case 7:\n            err_1 = _c.sent();\n            return [2 /*return*/, Promise.reject(err_1)];\n          case 8:\n            return [3 /*break*/, 21];\n          case 9:\n            content = message.content, messageType = message.options.messageType;\n            if (!(messageType === 'voice')) return [3 /*break*/, 13];\n            if (typeof content !== 'object') {\n              return [2 /*return*/, Promise.reject('invalid content type')];\n            }\n            if (!(content instanceof Uint8Array)) return [3 /*break*/, 10];\n            _a = content;\n            return [3 /*break*/, 12];\n          case 10:\n            return [4 /*yield*/, convert(content)];\n          case 11:\n            _a = _c.sent();\n            _c.label = 12;\n          case 12:\n            inputStream = _a;\n            params = {\n              botAlias: this._config[botname].alias,\n              botName: botname,\n              contentType: 'audio/x-l16; sample-rate=16000; channel-count=1',\n              userId: credentials.identityId,\n              accept: 'audio/mpeg',\n              inputStream: inputStream\n            };\n            return [3 /*break*/, 14];\n          case 13:\n            if (typeof content !== 'string') return [2 /*return*/, Promise.reject('invalid content type')];\n            params = {\n              botAlias: this._config[botname].alias,\n              botName: botname,\n              contentType: 'text/plain; charset=utf-8',\n              inputStream: content,\n              userId: credentials.identityId,\n              accept: 'audio/mpeg'\n            };\n            _c.label = 14;\n          case 14:\n            logger.debug('postContent to lex', message);\n            _c.label = 15;\n          case 15:\n            _c.trys.push([15, 20,, 21]);\n            postContentCommand = new PostContentCommand(params);\n            return [4 /*yield*/, this.lexRuntimeServiceClient.send(postContentCommand)];\n          case 16:\n            data = _c.sent();\n            if (!data.audioStream) return [3 /*break*/, 18];\n            return [4 /*yield*/, convert(data.audioStream)];\n          case 17:\n            _b = _c.sent();\n            return [3 /*break*/, 19];\n          case 18:\n            _b = undefined;\n            _c.label = 19;\n          case 19:\n            audioArray = _b;\n            response = __assign(__assign({}, data), {\n              audioStream: audioArray\n            });\n            this.reportBotStatus(response, botname);\n            return [2 /*return*/, response];\n          case 20:\n            err_2 = _c.sent();\n            return [2 /*return*/, Promise.reject(err_2)];\n          case 21:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  AWSLexProvider.prototype.onComplete = function (botname, callback) {\n    // does bot exist\n    if (!this._config[botname]) {\n      throw new Error('Bot ' + botname + ' does not exist');\n    }\n    this._botsCompleteCallback[botname] = callback;\n  };\n  return AWSLexProvider;\n}(AbstractInteractionsProvider);\nexport { AWSLexProvider };\n//# sourceMappingURL=AWSLexProvider.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}