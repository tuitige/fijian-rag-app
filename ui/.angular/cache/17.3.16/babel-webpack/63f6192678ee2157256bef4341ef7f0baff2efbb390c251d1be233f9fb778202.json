{"ast":null,"code":"import { __assign, __values } from \"tslib\";\nimport { cloneRequest } from \"./cloneRequest\";\nexport var moveHeadersToQuery = function (request, options) {\n  var e_1, _a;\n  var _b;\n  if (options === void 0) {\n    options = {};\n  }\n  var _c = typeof request.clone === \"function\" ? request.clone() : cloneRequest(request),\n    headers = _c.headers,\n    _d = _c.query,\n    query = _d === void 0 ? {} : _d;\n  try {\n    for (var _e = __values(Object.keys(headers)), _f = _e.next(); !_f.done; _f = _e.next()) {\n      var name_1 = _f.value;\n      var lname = name_1.toLowerCase();\n      if (lname.slice(0, 6) === \"x-amz-\" && !((_b = options.unhoistableHeaders) === null || _b === void 0 ? void 0 : _b.has(lname))) {\n        query[name_1] = headers[name_1];\n        delete headers[name_1];\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (_f && !_f.done && (_a = _e.return)) _a.call(_e);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n  return __assign(__assign({}, request), {\n    headers: headers,\n    query: query\n  });\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}