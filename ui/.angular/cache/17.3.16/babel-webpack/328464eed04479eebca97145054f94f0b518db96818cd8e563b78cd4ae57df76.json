{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { MqttOverWSProvider } from './MqttOverWSProvider';\nimport { Signer, Credentials } from '@aws-amplify/core';\nvar SERVICE_NAME = 'iotdevicegateway';\nvar AWSIoTProvider = /** @class */function (_super) {\n  __extends(AWSIoTProvider, _super);\n  function AWSIoTProvider(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    return _super.call(this, options) || this;\n  }\n  Object.defineProperty(AWSIoTProvider.prototype, \"region\", {\n    get: function () {\n      return this.options['aws_pubsub_region'];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  AWSIoTProvider.prototype.getProviderName = function () {\n    return 'AWSIoTProvider';\n  };\n  Object.defineProperty(AWSIoTProvider.prototype, \"endpoint\", {\n    get: function () {\n      var _this = this;\n      return function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          var endpoint, serviceInfo, _a, access_key, secret_key, session_token, result;\n          return __generator(this, function (_b) {\n            switch (_b.label) {\n              case 0:\n                endpoint = this.options.aws_pubsub_endpoint;\n                serviceInfo = {\n                  service: SERVICE_NAME,\n                  region: this.region\n                };\n                return [4 /*yield*/, Credentials.get()];\n              case 1:\n                _a = _b.sent(), access_key = _a.accessKeyId, secret_key = _a.secretAccessKey, session_token = _a.sessionToken;\n                result = Signer.signUrl(endpoint, {\n                  access_key: access_key,\n                  secret_key: secret_key,\n                  session_token: session_token\n                }, serviceInfo);\n                return [2 /*return*/, result];\n            }\n          });\n        });\n      }();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return AWSIoTProvider;\n}(MqttOverWSProvider);\nexport { AWSIoTProvider };\n//# sourceMappingURL=AWSIotProvider.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}