{"ast":null,"code":"import { __read, __spread, __values } from \"tslib\";\nvar connectionTimeout = function (error) {\n  return /^Connection failed: Connection Timeout/.test(error.message);\n};\nvar serverError = function (error) {\n  return /^Error: Request failed with status code 5\\d\\d/.test(error.message);\n};\nexport var mutationErrorMap = {\n  BadModel: function () {\n    return false;\n  },\n  BadRecord: function (error) {\n    var message = error.message;\n    return /^Cannot return \\w+ for [\\w-_]+ type/.test(message) || /^Variable '.+' has coerced Null value for NonNull type/.test(message); // newly required field, out of date client\n  },\n  ConfigError: function () {\n    return false;\n  },\n  Transient: function (error) {\n    return connectionTimeout(error) || serverError(error);\n  },\n  Unauthorized: function (error) {\n    return error.message === 'Unauthorized' || /^Request failed with status code 401/.test(error.message);\n  }\n};\nexport var subscriptionErrorMap = {\n  BadModel: function () {\n    return false;\n  },\n  BadRecord: function () {\n    return false;\n  },\n  ConfigError: function () {\n    return false;\n  },\n  Transient: function (observableError) {\n    var error = unwrapObservableError(observableError);\n    return connectionTimeout(error) || serverError(error);\n  },\n  Unauthorized: function (observableError) {\n    var error = unwrapObservableError(observableError);\n    return /Connection failed.+Unauthorized/.test(error.message);\n  }\n};\nexport var syncErrorMap = {\n  BadModel: function () {\n    return false;\n  },\n  BadRecord: function (error) {\n    return /^Cannot return \\w+ for [\\w-_]+ type/.test(error.message);\n  },\n  ConfigError: function () {\n    return false;\n  },\n  Transient: function (error) {\n    return connectionTimeout(error) || serverError(error);\n  },\n  Unauthorized: function (error) {\n    return error.errorType === 'Unauthorized';\n  }\n};\n/**\n * Get the first error reason of an observable.\n * Allows for error maps to be easily applied to observable errors\n *\n * @param observableError an error from ZenObservable subscribe error callback\n */\nfunction unwrapObservableError(observableError) {\n  var _a = observableError.error,\n    _b = __read((_a === void 0 ? {\n      errors: []\n    } : _a).errors, 1),\n    error = _b[0];\n  return error;\n}\nexport function getMutationErrorType(error) {\n  return mapErrorToType(mutationErrorMap, error);\n}\nexport function getSubscriptionErrorType(error) {\n  return mapErrorToType(subscriptionErrorMap, error);\n}\nexport function getSyncErrorType(error) {\n  return mapErrorToType(syncErrorMap, error);\n}\n/**\n * Categorizes an error with a broad error type, intended to make\n * customer error handling code simpler.\n * @param errorMap Error names and a list of patterns that indicate them (each pattern as a regex or function)\n * @param error The underying error to categorize.\n */\nexport function mapErrorToType(errorMap, error) {\n  var e_1, _a;\n  var errorTypes = __spread(Object.keys(errorMap));\n  try {\n    for (var errorTypes_1 = __values(errorTypes), errorTypes_1_1 = errorTypes_1.next(); !errorTypes_1_1.done; errorTypes_1_1 = errorTypes_1.next()) {\n      var errorType = errorTypes_1_1.value;\n      var matcher = errorMap[errorType];\n      if (matcher === null || matcher === void 0 ? void 0 : matcher(error)) {\n        return errorType;\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (errorTypes_1_1 && !errorTypes_1_1.done && (_a = errorTypes_1.return)) _a.call(errorTypes_1);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n  return 'Unknown';\n}\n//# sourceMappingURL=errorMaps.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}