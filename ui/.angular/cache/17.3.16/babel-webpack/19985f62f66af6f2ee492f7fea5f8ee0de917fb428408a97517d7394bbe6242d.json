{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { isThrottlingError } from \"@aws-sdk/service-error-classification\";\nvar DefaultRateLimiter = function () {\n  function DefaultRateLimiter(options) {\n    var _a, _b, _c, _d, _e;\n    this.currentCapacity = 0;\n    this.enabled = false;\n    this.lastMaxRate = 0;\n    this.measuredTxRate = 0;\n    this.requestCount = 0;\n    this.lastTimestamp = 0;\n    this.timeWindow = 0;\n    this.beta = (_a = options === null || options === void 0 ? void 0 : options.beta) !== null && _a !== void 0 ? _a : 0.7;\n    this.minCapacity = (_b = options === null || options === void 0 ? void 0 : options.minCapacity) !== null && _b !== void 0 ? _b : 1;\n    this.minFillRate = (_c = options === null || options === void 0 ? void 0 : options.minFillRate) !== null && _c !== void 0 ? _c : 0.5;\n    this.scaleConstant = (_d = options === null || options === void 0 ? void 0 : options.scaleConstant) !== null && _d !== void 0 ? _d : 0.4;\n    this.smooth = (_e = options === null || options === void 0 ? void 0 : options.smooth) !== null && _e !== void 0 ? _e : 0.8;\n    var currentTimeInSeconds = this.getCurrentTimeInSeconds();\n    this.lastThrottleTime = currentTimeInSeconds;\n    this.lastTxRateBucket = Math.floor(this.getCurrentTimeInSeconds());\n    this.fillRate = this.minFillRate;\n    this.maxCapacity = this.minCapacity;\n  }\n  DefaultRateLimiter.prototype.getCurrentTimeInSeconds = function () {\n    return Date.now() / 1000;\n  };\n  DefaultRateLimiter.prototype.getSendToken = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2, this.acquireTokenBucket(1)];\n      });\n    });\n  };\n  DefaultRateLimiter.prototype.acquireTokenBucket = function (amount) {\n    return __awaiter(this, void 0, void 0, function () {\n      var delay_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.enabled) {\n              return [2];\n            }\n            this.refillTokenBucket();\n            if (!(amount > this.currentCapacity)) return [3, 2];\n            delay_1 = (amount - this.currentCapacity) / this.fillRate * 1000;\n            return [4, new Promise(function (resolve) {\n              return setTimeout(resolve, delay_1);\n            })];\n          case 1:\n            _a.sent();\n            _a.label = 2;\n          case 2:\n            this.currentCapacity = this.currentCapacity - amount;\n            return [2];\n        }\n      });\n    });\n  };\n  DefaultRateLimiter.prototype.refillTokenBucket = function () {\n    var timestamp = this.getCurrentTimeInSeconds();\n    if (!this.lastTimestamp) {\n      this.lastTimestamp = timestamp;\n      return;\n    }\n    var fillAmount = (timestamp - this.lastTimestamp) * this.fillRate;\n    this.currentCapacity = Math.min(this.maxCapacity, this.currentCapacity + fillAmount);\n    this.lastTimestamp = timestamp;\n  };\n  DefaultRateLimiter.prototype.updateClientSendingRate = function (response) {\n    var calculatedRate;\n    this.updateMeasuredRate();\n    if (isThrottlingError(response)) {\n      var rateToUse = !this.enabled ? this.measuredTxRate : Math.min(this.measuredTxRate, this.fillRate);\n      this.lastMaxRate = rateToUse;\n      this.calculateTimeWindow();\n      this.lastThrottleTime = this.getCurrentTimeInSeconds();\n      calculatedRate = this.cubicThrottle(rateToUse);\n      this.enableTokenBucket();\n    } else {\n      this.calculateTimeWindow();\n      calculatedRate = this.cubicSuccess(this.getCurrentTimeInSeconds());\n    }\n    var newRate = Math.min(calculatedRate, 2 * this.measuredTxRate);\n    this.updateTokenBucketRate(newRate);\n  };\n  DefaultRateLimiter.prototype.calculateTimeWindow = function () {\n    this.timeWindow = this.getPrecise(Math.pow(this.lastMaxRate * (1 - this.beta) / this.scaleConstant, 1 / 3));\n  };\n  DefaultRateLimiter.prototype.cubicThrottle = function (rateToUse) {\n    return this.getPrecise(rateToUse * this.beta);\n  };\n  DefaultRateLimiter.prototype.cubicSuccess = function (timestamp) {\n    return this.getPrecise(this.scaleConstant * Math.pow(timestamp - this.lastThrottleTime - this.timeWindow, 3) + this.lastMaxRate);\n  };\n  DefaultRateLimiter.prototype.enableTokenBucket = function () {\n    this.enabled = true;\n  };\n  DefaultRateLimiter.prototype.updateTokenBucketRate = function (newRate) {\n    this.refillTokenBucket();\n    this.fillRate = Math.max(newRate, this.minFillRate);\n    this.maxCapacity = Math.max(newRate, this.minCapacity);\n    this.currentCapacity = Math.min(this.currentCapacity, this.maxCapacity);\n  };\n  DefaultRateLimiter.prototype.updateMeasuredRate = function () {\n    var t = this.getCurrentTimeInSeconds();\n    var timeBucket = Math.floor(t * 2) / 2;\n    this.requestCount++;\n    if (timeBucket > this.lastTxRateBucket) {\n      var currentRate = this.requestCount / (timeBucket - this.lastTxRateBucket);\n      this.measuredTxRate = this.getPrecise(currentRate * this.smooth + this.measuredTxRate * (1 - this.smooth));\n      this.requestCount = 0;\n      this.lastTxRateBucket = timeBucket;\n    }\n  };\n  DefaultRateLimiter.prototype.getPrecise = function (num) {\n    return parseFloat(num.toFixed(8));\n  };\n  return DefaultRateLimiter;\n}();\nexport { DefaultRateLimiter };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}