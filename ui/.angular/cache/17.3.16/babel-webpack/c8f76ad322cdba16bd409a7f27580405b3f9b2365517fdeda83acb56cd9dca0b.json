{"ast":null,"code":"'use strict';\n\nconst mapObj = require('map-obj');\nconst camelCase = require('camelcase');\nconst QuickLru = require('quick-lru');\nconst has = (array, key) => array.some(x => {\n  if (typeof x === 'string') {\n    return x === key;\n  }\n  x.lastIndex = 0;\n  return x.test(key);\n});\nconst cache = new QuickLru({\n  maxSize: 100000\n});\n\n// Reproduces behavior from `map-obj`\nconst isObject = value => typeof value === 'object' && value !== null && !(value instanceof RegExp) && !(value instanceof Error) && !(value instanceof Date);\nconst camelCaseConvert = (input, options) => {\n  if (!isObject(input)) {\n    return input;\n  }\n  options = {\n    deep: false,\n    pascalCase: false,\n    ...options\n  };\n  const {\n    exclude,\n    pascalCase,\n    stopPaths,\n    deep\n  } = options;\n  const stopPathsSet = new Set(stopPaths);\n  const makeMapper = parentPath => (key, value) => {\n    if (deep && isObject(value)) {\n      const path = parentPath === undefined ? key : `${parentPath}.${key}`;\n      if (!stopPathsSet.has(path)) {\n        value = mapObj(value, makeMapper(path));\n      }\n    }\n    if (!(exclude && has(exclude, key))) {\n      const cacheKey = pascalCase ? `${key}_` : key;\n      if (cache.has(cacheKey)) {\n        key = cache.get(cacheKey);\n      } else {\n        const ret = camelCase(key, {\n          pascalCase\n        });\n        if (key.length < 100) {\n          // Prevent abuse\n          cache.set(cacheKey, ret);\n        }\n        key = ret;\n      }\n    }\n    return [key, value];\n  };\n  return mapObj(input, makeMapper(undefined));\n};\nmodule.exports = (input, options) => {\n  if (Array.isArray(input)) {\n    return Object.keys(input).map(key => camelCaseConvert(input[key], options));\n  }\n  return camelCaseConvert(input, options);\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}