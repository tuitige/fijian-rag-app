{"ast":null,"code":"import { __awaiter as r } from \"tslib\";\nimport { Amplify as t, Auth as s } from \"aws-amplify\";\nimport \"../../types/authenticator/user.mjs\";\nimport \"../../types/authenticator/attributes.mjs\";\nimport \"../../types/primitives/componentClassName.mjs\";\nimport \"../../i18n/translations.mjs\";\nimport { hasSpecialChars as n } from \"../../helpers/authenticator/utils.mjs\";\nimport \"../../helpers/accountSettings/utils.mjs\";\nconst o = {\n  getAmplifyConfig() {\n    return r(this, void 0, void 0, function* () {\n      return t.configure();\n    });\n  },\n  getCurrentUser() {\n    return r(this, void 0, void 0, function* () {\n      return s.currentAuthenticatedUser();\n    });\n  },\n  handleSignUp(t) {\n    return r(this, void 0, void 0, function* () {\n      return s.signUp(Object.assign(Object.assign({}, t), {\n        autoSignIn: {\n          enabled: !0\n        }\n      }));\n    });\n  },\n  handleSignIn({\n    username: t,\n    password: n\n  }) {\n    return r(this, void 0, void 0, function* () {\n      return s.signIn(t, n);\n    });\n  },\n  handleConfirmSignIn({\n    user: t,\n    code: n,\n    mfaType: o\n  }) {\n    return r(this, void 0, void 0, function* () {\n      return s.confirmSignIn(t, n, o);\n    });\n  },\n  handleConfirmSignUp({\n    username: t,\n    code: n\n  }) {\n    return r(this, void 0, void 0, function* () {\n      return yield s.confirmSignUp(t, n);\n    });\n  },\n  handleForgotPasswordSubmit({\n    username: t,\n    code: n,\n    password: o\n  }) {\n    return r(this, void 0, void 0, function* () {\n      return s.forgotPasswordSubmit(t, n, o);\n    });\n  },\n  handleForgotPassword(t) {\n    return r(this, void 0, void 0, function* () {\n      return s.forgotPassword(t);\n    });\n  },\n  validateCustomSignUp(t, s) {\n    return r(this, void 0, void 0, function* () {});\n  },\n  validateFormPassword(t, s, o) {\n    return r(this, void 0, void 0, function* () {\n      const {\n          password: r\n        } = t,\n        {\n          password: e\n        } = s;\n      if (!e || !o) return null;\n      const i = [],\n        a = +(null == o ? void 0 : o.passwordPolicyMinLength);\n      r.length < a && i.push(`Password must have at least ${a} characters`);\n      const u = null == o ? void 0 : o.passwordPolicyCharacters;\n      return null == u || u.forEach(t => {\n        switch (t) {\n          case \"REQUIRES_LOWERCASE\":\n            /[a-z]/.test(r) || i.push(\"Password must have lower case letters\");\n            break;\n          case \"REQUIRES_UPPERCASE\":\n            /[A-Z]/.test(r) || i.push(\"Password must have upper case letters\");\n            break;\n          case \"REQUIRES_NUMBERS\":\n            /[0-9]/.test(r) || i.push(\"Password must have numbers\");\n            break;\n          case \"REQUIRES_SYMBOLS\":\n            n(r) || i.push(\"Password must have special characters\");\n        }\n      }), 0 !== i.length ? {\n        password: i\n      } : null;\n    });\n  },\n  validateConfirmPassword(t, s) {\n    return r(this, void 0, void 0, function* () {\n      const {\n          password: r,\n          confirm_password: n\n        } = t,\n        {\n          confirm_password: o,\n          password: e\n        } = s;\n      return r || n ? (r || n) && r !== n && (o && e || (null == r ? void 0 : r.length) >= 6 && (null == n ? void 0 : n.length) >= 6) ? {\n        confirm_password: \"Your passwords must match\"\n      } : void 0 : null;\n    });\n  },\n  validatePreferredUsername(t, s) {\n    return r(this, void 0, void 0, function* () {});\n  }\n};\nexport { o as defaultServices };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}