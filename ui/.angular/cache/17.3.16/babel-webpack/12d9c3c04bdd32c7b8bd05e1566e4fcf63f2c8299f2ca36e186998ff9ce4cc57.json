{"ast":null,"code":"import { toHex } from \"@aws-sdk/util-hex-encoding\";\nvar Int64 = function () {\n  function Int64(bytes) {\n    this.bytes = bytes;\n    if (bytes.byteLength !== 8) {\n      throw new Error(\"Int64 buffers must be exactly 8 bytes\");\n    }\n  }\n  Int64.fromNumber = function (number) {\n    if (number > 9223372036854776000 || number < -9223372036854776000) {\n      throw new Error(\"\".concat(number, \" is too large (or, if negative, too small) to represent as an Int64\"));\n    }\n    var bytes = new Uint8Array(8);\n    for (var i = 7, remaining = Math.abs(Math.round(number)); i > -1 && remaining > 0; i--, remaining /= 256) {\n      bytes[i] = remaining;\n    }\n    if (number < 0) {\n      negate(bytes);\n    }\n    return new Int64(bytes);\n  };\n  Int64.prototype.valueOf = function () {\n    var bytes = this.bytes.slice(0);\n    var negative = bytes[0] & 128;\n    if (negative) {\n      negate(bytes);\n    }\n    return parseInt(toHex(bytes), 16) * (negative ? -1 : 1);\n  };\n  Int64.prototype.toString = function () {\n    return String(this.valueOf());\n  };\n  return Int64;\n}();\nexport { Int64 };\nfunction negate(bytes) {\n  for (var i = 0; i < 8; i++) {\n    bytes[i] ^= 0xff;\n  }\n  for (var i = 7; i > -1; i--) {\n    bytes[i]++;\n    if (bytes[i] !== 0) break;\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}