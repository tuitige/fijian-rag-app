{"ast":null,"code":"import { __asyncValues, __awaiter, __extends, __generator, __values } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport AsyncStorageDatabase from './AsyncStorageDatabase';\nimport { OpType, QueryOne } from '../../types';\nimport { DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR, traverseModel, validatePredicate, inMemoryPagination, keysEqual, getStorename, getIndexKeys } from '../../util';\nimport { StorageAdapterBase } from './StorageAdapterBase';\nvar AsyncStorageAdapter = /** @class */function (_super) {\n  __extends(AsyncStorageAdapter, _super);\n  function AsyncStorageAdapter() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  // no-ops for this adapter\n  AsyncStorageAdapter.prototype.preSetUpChecks = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/];\n      });\n    });\n  };\n  AsyncStorageAdapter.prototype.preOpCheck = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/];\n      });\n    });\n  };\n  /**\n   * Open AsyncStorage database\n   * Create new DB if one doesn't exist\n   *\n   * Called by `StorageAdapterBase.setUp()`\n   *\n   * @returns AsyncStorageDatabase instance\n   */\n  AsyncStorageAdapter.prototype.initDb = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var db;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            db = new AsyncStorageDatabase();\n            return [4 /*yield*/, db.init()];\n          case 1:\n            _a.sent();\n            return [2 /*return*/, db];\n        }\n      });\n    });\n  };\n  AsyncStorageAdapter.prototype.clear = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.db.clear()];\n          case 1:\n            _a.sent();\n            this.db = undefined;\n            this.initPromise = undefined;\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  AsyncStorageAdapter.prototype.batchSave = function (modelConstructor, items) {\n    return __awaiter(this, void 0, void 0, function () {\n      var modelName, namespaceName, storeName, keys, batch, _loop_1, this_1, items_1, items_1_1, item;\n      var e_1, _a;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (items.length === 0) {\n              return [2 /*return*/, []];\n            }\n            modelName = modelConstructor.name;\n            namespaceName = this.namespaceResolver(modelConstructor);\n            storeName = getStorename(namespaceName, modelName);\n            keys = getIndexKeys(this.schema.namespaces[namespaceName], modelName);\n            batch = [];\n            _loop_1 = function (item) {\n              var model = this_1.modelInstanceCreator(modelConstructor, item);\n              var connectedModels = traverseModel(modelName, model, this_1.schema.namespaces[namespaceName], this_1.modelInstanceCreator, this_1.getModelConstructorByModelName);\n              var keyValuesPath = this_1.getIndexKeyValuesPath(model);\n              var instance = connectedModels.find(function (_a) {\n                var instance = _a.instance;\n                var instanceKeyValuesPath = _this.getIndexKeyValuesPath(instance);\n                return keysEqual([instanceKeyValuesPath], [keyValuesPath]);\n              }).instance;\n              batch.push(instance);\n            };\n            this_1 = this;\n            try {\n              for (items_1 = __values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {\n                item = items_1_1.value;\n                _loop_1(item);\n              }\n            } catch (e_1_1) {\n              e_1 = {\n                error: e_1_1\n              };\n            } finally {\n              try {\n                if (items_1_1 && !items_1_1.done && (_a = items_1.return)) _a.call(items_1);\n              } finally {\n                if (e_1) throw e_1.error;\n              }\n            }\n            return [4 /*yield*/, this.db.batchSave(storeName, batch, keys)];\n          case 1:\n            return [2 /*return*/, _b.sent()];\n        }\n      });\n    });\n  };\n  AsyncStorageAdapter.prototype._get = function (storeName, keyArr) {\n    return __awaiter(this, void 0, void 0, function () {\n      var itemKeyValuesPath;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            itemKeyValuesPath = keyArr.join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n            return [4 /*yield*/, this.db.get(itemKeyValuesPath, storeName)];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  AsyncStorageAdapter.prototype.save = function (model, condition) {\n    var e_2, _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var _b, storeName, connectionStoreNames, modelKeyValues, fromDB, result, connectionStoreNames_1, connectionStoreNames_1_1, resItem, storeName_1, item, instance, keys, itemKeyValues, fromDB_1, opType, e_2_1;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _b = this.saveMetadata(model), storeName = _b.storeName, connectionStoreNames = _b.connectionStoreNames, modelKeyValues = _b.modelKeyValues;\n            return [4 /*yield*/, this._get(storeName, modelKeyValues)];\n          case 1:\n            fromDB = _c.sent();\n            this.validateSaveCondition(condition, fromDB);\n            result = [];\n            _c.label = 2;\n          case 2:\n            _c.trys.push([2, 9, 10, 15]);\n            connectionStoreNames_1 = __asyncValues(connectionStoreNames);\n            _c.label = 3;\n          case 3:\n            return [4 /*yield*/, connectionStoreNames_1.next()];\n          case 4:\n            if (!(connectionStoreNames_1_1 = _c.sent(), !connectionStoreNames_1_1.done)) return [3 /*break*/, 8];\n            resItem = connectionStoreNames_1_1.value;\n            storeName_1 = resItem.storeName, item = resItem.item, instance = resItem.instance, keys = resItem.keys;\n            itemKeyValues = keys.map(function (key) {\n              return item[key];\n            });\n            return [4 /*yield*/, this._get(storeName_1, itemKeyValues)];\n          case 5:\n            fromDB_1 = _c.sent();\n            opType = fromDB_1 ? OpType.UPDATE : OpType.INSERT;\n            if (!(keysEqual(itemKeyValues, modelKeyValues) || opType === OpType.INSERT)) return [3 /*break*/, 7];\n            return [4 /*yield*/, this.db.save(item, storeName_1, keys, itemKeyValues.join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR))];\n          case 6:\n            _c.sent();\n            result.push([instance, opType]);\n            _c.label = 7;\n          case 7:\n            return [3 /*break*/, 3];\n          case 8:\n            return [3 /*break*/, 15];\n          case 9:\n            e_2_1 = _c.sent();\n            e_2 = {\n              error: e_2_1\n            };\n            return [3 /*break*/, 15];\n          case 10:\n            _c.trys.push([10,, 13, 14]);\n            if (!(connectionStoreNames_1_1 && !connectionStoreNames_1_1.done && (_a = connectionStoreNames_1.return))) return [3 /*break*/, 12];\n            return [4 /*yield*/, _a.call(connectionStoreNames_1)];\n          case 11:\n            _c.sent();\n            _c.label = 12;\n          case 12:\n            return [3 /*break*/, 14];\n          case 13:\n            if (e_2) throw e_2.error;\n            return [7 /*endfinally*/];\n          case 14:\n            return [7 /*endfinally*/];\n          case 15:\n            return [2 /*return*/, result];\n        }\n      });\n    });\n  };\n  AsyncStorageAdapter.prototype.query = function (modelConstructor, predicate, pagination) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, storeName, namespaceName, queryByKey, predicates, hasSort, hasPagination, records;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this.queryMetadata(modelConstructor, predicate, pagination), storeName = _a.storeName, namespaceName = _a.namespaceName, queryByKey = _a.queryByKey, predicates = _a.predicates, hasSort = _a.hasSort, hasPagination = _a.hasPagination;\n            return [4 /*yield*/, function () {\n              return __awaiter(_this, void 0, void 0, function () {\n                var keyValues, record, filtered, all;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      if (!queryByKey) return [3 /*break*/, 2];\n                      keyValues = queryByKey.join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n                      return [4 /*yield*/, this.getByKey(storeName, keyValues)];\n                    case 1:\n                      record = _a.sent();\n                      return [2 /*return*/, record ? [record] : []];\n                    case 2:\n                      if (!predicates) return [3 /*break*/, 4];\n                      return [4 /*yield*/, this.filterOnPredicate(storeName, predicates)];\n                    case 3:\n                      filtered = _a.sent();\n                      return [2 /*return*/, this.inMemoryPagination(filtered, pagination)];\n                    case 4:\n                      if (!(hasSort || hasPagination)) return [3 /*break*/, 6];\n                      return [4 /*yield*/, this.getAll(storeName)];\n                    case 5:\n                      all = _a.sent();\n                      return [2 /*return*/, this.inMemoryPagination(all, pagination)];\n                    case 6:\n                      return [2 /*return*/, this.getAll(storeName)];\n                  }\n                });\n              });\n            }()];\n          case 1:\n            records = _b.sent();\n            return [4 /*yield*/, this.load(namespaceName, modelConstructor.name, records)];\n          case 2:\n            return [2 /*return*/, _b.sent()];\n        }\n      });\n    });\n  };\n  AsyncStorageAdapter.prototype.getByKey = function (storeName, keyValuePath) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.db.get(keyValuePath, storeName)];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  AsyncStorageAdapter.prototype.getAll = function (storeName) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.db.getAll(storeName)];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  AsyncStorageAdapter.prototype.filterOnPredicate = function (storeName, predicates) {\n    return __awaiter(this, void 0, void 0, function () {\n      var predicateObjs, type, all, filtered;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            predicateObjs = predicates.predicates, type = predicates.type;\n            return [4 /*yield*/, this.getAll(storeName)];\n          case 1:\n            all = _a.sent();\n            filtered = predicateObjs ? all.filter(function (m) {\n              return validatePredicate(m, type, predicateObjs);\n            }) : all;\n            return [2 /*return*/, filtered];\n        }\n      });\n    });\n  };\n  AsyncStorageAdapter.prototype.inMemoryPagination = function (records, pagination) {\n    return inMemoryPagination(records, pagination);\n  };\n  AsyncStorageAdapter.prototype.queryOne = function (modelConstructor, firstOrLast) {\n    if (firstOrLast === void 0) {\n      firstOrLast = QueryOne.FIRST;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var storeName, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            storeName = this.getStorenameForModel(modelConstructor);\n            return [4 /*yield*/, this.db.getOne(firstOrLast, storeName)];\n          case 1:\n            result = _a.sent();\n            return [2 /*return*/, result && this.modelInstanceCreator(modelConstructor, result)];\n        }\n      });\n    });\n  };\n  AsyncStorageAdapter.prototype.deleteItem = function (deleteQueue) {\n    var e_3, _a, e_4, _b;\n    return __awaiter(this, void 0, void 0, function () {\n      var _c, _d, deleteItem, storeName, items, items_2, items_2_1, item, keyValuesPath, e_4_1, e_3_1;\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            _e.trys.push([0, 17, 18, 23]);\n            _c = __asyncValues(deleteQueue);\n            _e.label = 1;\n          case 1:\n            return [4 /*yield*/, _c.next()];\n          case 2:\n            if (!(_d = _e.sent(), !_d.done)) return [3 /*break*/, 16];\n            deleteItem = _d.value;\n            storeName = deleteItem.storeName, items = deleteItem.items;\n            _e.label = 3;\n          case 3:\n            _e.trys.push([3, 9, 10, 15]);\n            items_2 = __asyncValues(items);\n            _e.label = 4;\n          case 4:\n            return [4 /*yield*/, items_2.next()];\n          case 5:\n            if (!(items_2_1 = _e.sent(), !items_2_1.done)) return [3 /*break*/, 8];\n            item = items_2_1.value;\n            if (!item) return [3 /*break*/, 7];\n            if (!(typeof item === 'object')) return [3 /*break*/, 7];\n            keyValuesPath = this.getIndexKeyValuesPath(item);\n            return [4 /*yield*/, this.db.delete(keyValuesPath, storeName)];\n          case 6:\n            _e.sent();\n            _e.label = 7;\n          case 7:\n            return [3 /*break*/, 4];\n          case 8:\n            return [3 /*break*/, 15];\n          case 9:\n            e_4_1 = _e.sent();\n            e_4 = {\n              error: e_4_1\n            };\n            return [3 /*break*/, 15];\n          case 10:\n            _e.trys.push([10,, 13, 14]);\n            if (!(items_2_1 && !items_2_1.done && (_b = items_2.return))) return [3 /*break*/, 12];\n            return [4 /*yield*/, _b.call(items_2)];\n          case 11:\n            _e.sent();\n            _e.label = 12;\n          case 12:\n            return [3 /*break*/, 14];\n          case 13:\n            if (e_4) throw e_4.error;\n            return [7 /*endfinally*/];\n          case 14:\n            return [7 /*endfinally*/];\n          case 15:\n            return [3 /*break*/, 1];\n          case 16:\n            return [3 /*break*/, 23];\n          case 17:\n            e_3_1 = _e.sent();\n            e_3 = {\n              error: e_3_1\n            };\n            return [3 /*break*/, 23];\n          case 18:\n            _e.trys.push([18,, 21, 22]);\n            if (!(_d && !_d.done && (_a = _c.return))) return [3 /*break*/, 20];\n            return [4 /*yield*/, _a.call(_c)];\n          case 19:\n            _e.sent();\n            _e.label = 20;\n          case 20:\n            return [3 /*break*/, 22];\n          case 21:\n            if (e_3) throw e_3.error;\n            return [7 /*endfinally*/];\n          case 22:\n            return [7 /*endfinally*/];\n          case 23:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  //#region platform-specific helper methods\n  /**\n   * Retrieves concatenated primary key values from a model\n   *\n   * @param model\n   * @returns\n   */\n  AsyncStorageAdapter.prototype.getIndexKeyValuesPath = function (model) {\n    return this.getIndexKeyValuesFromModel(model).join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n  };\n  return AsyncStorageAdapter;\n}(StorageAdapterBase);\nexport { AsyncStorageAdapter };\nexport default new AsyncStorageAdapter();\n//# sourceMappingURL=AsyncStorageAdapter.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}