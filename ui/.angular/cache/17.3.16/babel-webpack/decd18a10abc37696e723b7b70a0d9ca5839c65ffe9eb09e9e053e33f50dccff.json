{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { DeleteDeliveryStreamInput, DeleteDeliveryStreamOutput } from \"../models/models_0\";\nimport { deserializeAws_json1_1DeleteDeliveryStreamCommand, serializeAws_json1_1DeleteDeliveryStreamCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Deletes a delivery stream and its data.</p>\n *          <p>To check the state of a delivery stream, use <a>DescribeDeliveryStream</a>. You can delete a delivery stream only if it is in one of the following states:\n *             <code>ACTIVE</code>, <code>DELETING</code>, <code>CREATING_FAILED</code>, or\n *             <code>DELETING_FAILED</code>. You can't delete a delivery stream that is in the\n *             <code>CREATING</code> state. While the deletion request is in process, the delivery\n *          stream is in the <code>DELETING</code> state.</p>\n *          <p>While the delivery stream is in the <code>DELETING</code> state, the service might\n *          continue to accept records, but it doesn't make any guarantees with respect to delivering\n *          the data. Therefore, as a best practice, first stop any applications that are sending\n *          records before you delete a delivery stream.</p>\n */\nvar DeleteDeliveryStreamCommand = /** @class */function (_super) {\n  __extends(DeleteDeliveryStreamCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function DeleteDeliveryStreamCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  DeleteDeliveryStreamCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"FirehoseClient\";\n    var commandName = \"DeleteDeliveryStreamCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: DeleteDeliveryStreamInput.filterSensitiveLog,\n      outputFilterSensitiveLog: DeleteDeliveryStreamOutput.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  DeleteDeliveryStreamCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1DeleteDeliveryStreamCommand(input, context);\n  };\n  DeleteDeliveryStreamCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1DeleteDeliveryStreamCommand(output, context);\n  };\n  return DeleteDeliveryStreamCommand;\n}($Command);\nexport { DeleteDeliveryStreamCommand };\n//# sourceMappingURL=DeleteDeliveryStreamCommand.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}