{"ast":null,"code":"import { __assign, __awaiter, __generator, __read } from \"tslib\";\nimport { HttpRequest as __HttpRequest, isValidHostname as __isValidHostname } from \"@aws-sdk/protocol-http\";\nimport { decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectNonNull as __expectNonNull, expectObject as __expectObject, expectString as __expectString, limitedParseDouble as __limitedParseDouble, map as __map, parseRfc3339DateTime as __parseRfc3339DateTime, resolvedPath as __resolvedPath, serializeFloat as __serializeFloat, throwDefaultError } from \"@aws-sdk/smithy-client\";\nimport { LocationServiceException as __BaseException } from \"../models/LocationServiceException\";\nimport { AccessDeniedException, ConflictException, InternalServerException, ResourceNotFoundException, ServiceQuotaExceededException, ThrottlingException, ValidationException } from \"../models/models_0\";\nexport var serializeAws_restJson1AssociateTrackerConsumerCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/tracking/v0/trackers/{TrackerName}/consumers\";\n          resolvedPath = __resolvedPath(resolvedPath, input, \"TrackerName\", function () {\n            return input.TrackerName;\n          }, \"{TrackerName}\", false);\n          body = JSON.stringify(__assign({}, input.ConsumerArn != null && {\n            ConsumerArn: input.ConsumerArn\n          }));\n          return [4, context.endpoint()];\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"tracking.\" + resolvedHostname;\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1BatchDeleteDevicePositionHistoryCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/tracking/v0/trackers/{TrackerName}/delete-positions\";\n          resolvedPath = __resolvedPath(resolvedPath, input, \"TrackerName\", function () {\n            return input.TrackerName;\n          }, \"{TrackerName}\", false);\n          body = JSON.stringify(__assign({}, input.DeviceIds != null && {\n            DeviceIds: serializeAws_restJson1DeviceIdsList(input.DeviceIds, context)\n          }));\n          return [4, context.endpoint()];\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"tracking.\" + resolvedHostname;\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1BatchDeleteGeofenceCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/geofencing/v0/collections/{CollectionName}/delete-geofences\";\n          resolvedPath = __resolvedPath(resolvedPath, input, \"CollectionName\", function () {\n            return input.CollectionName;\n          }, \"{CollectionName}\", false);\n          body = JSON.stringify(__assign({}, input.GeofenceIds != null && {\n            GeofenceIds: serializeAws_restJson1IdList(input.GeofenceIds, context)\n          }));\n          return [4, context.endpoint()];\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"geofencing.\" + resolvedHostname;\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1BatchEvaluateGeofencesCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/geofencing/v0/collections/{CollectionName}/positions\";\n          resolvedPath = __resolvedPath(resolvedPath, input, \"CollectionName\", function () {\n            return input.CollectionName;\n          }, \"{CollectionName}\", false);\n          body = JSON.stringify(__assign({}, input.DevicePositionUpdates != null && {\n            DevicePositionUpdates: serializeAws_restJson1DevicePositionUpdateList(input.DevicePositionUpdates, context)\n          }));\n          return [4, context.endpoint()];\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"geofencing.\" + resolvedHostname;\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1BatchGetDevicePositionCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/tracking/v0/trackers/{TrackerName}/get-positions\";\n          resolvedPath = __resolvedPath(resolvedPath, input, \"TrackerName\", function () {\n            return input.TrackerName;\n          }, \"{TrackerName}\", false);\n          body = JSON.stringify(__assign({}, input.DeviceIds != null && {\n            DeviceIds: serializeAws_restJson1IdList(input.DeviceIds, context)\n          }));\n          return [4, context.endpoint()];\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"tracking.\" + resolvedHostname;\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1BatchPutGeofenceCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/geofencing/v0/collections/{CollectionName}/put-geofences\";\n          resolvedPath = __resolvedPath(resolvedPath, input, \"CollectionName\", function () {\n            return input.CollectionName;\n          }, \"{CollectionName}\", false);\n          body = JSON.stringify(__assign({}, input.Entries != null && {\n            Entries: serializeAws_restJson1BatchPutGeofenceRequestEntryList(input.Entries, context)\n          }));\n          return [4, context.endpoint()];\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"geofencing.\" + resolvedHostname;\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1BatchUpdateDevicePositionCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/tracking/v0/trackers/{TrackerName}/positions\";\n          resolvedPath = __resolvedPath(resolvedPath, input, \"TrackerName\", function () {\n            return input.TrackerName;\n          }, \"{TrackerName}\", false);\n          body = JSON.stringify(__assign({}, input.Updates != null && {\n            Updates: serializeAws_restJson1DevicePositionUpdateList(input.Updates, context)\n          }));\n          return [4, context.endpoint()];\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"tracking.\" + resolvedHostname;\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1CalculateRouteCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/routes/v0/calculators/{CalculatorName}/calculate/route\";\n          resolvedPath = __resolvedPath(resolvedPath, input, \"CalculatorName\", function () {\n            return input.CalculatorName;\n          }, \"{CalculatorName}\", false);\n          body = JSON.stringify(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, input.CarModeOptions != null && {\n            CarModeOptions: serializeAws_restJson1CalculateRouteCarModeOptions(input.CarModeOptions, context)\n          }), input.DepartNow != null && {\n            DepartNow: input.DepartNow\n          }), input.DeparturePosition != null && {\n            DeparturePosition: serializeAws_restJson1Position(input.DeparturePosition, context)\n          }), input.DepartureTime != null && {\n            DepartureTime: input.DepartureTime.toISOString().split(\".\")[0] + \"Z\"\n          }), input.DestinationPosition != null && {\n            DestinationPosition: serializeAws_restJson1Position(input.DestinationPosition, context)\n          }), input.DistanceUnit != null && {\n            DistanceUnit: input.DistanceUnit\n          }), input.IncludeLegGeometry != null && {\n            IncludeLegGeometry: input.IncludeLegGeometry\n          }), input.TravelMode != null && {\n            TravelMode: input.TravelMode\n          }), input.TruckModeOptions != null && {\n            TruckModeOptions: serializeAws_restJson1CalculateRouteTruckModeOptions(input.TruckModeOptions, context)\n          }), input.WaypointPositions != null && {\n            WaypointPositions: serializeAws_restJson1WaypointPositionList(input.WaypointPositions, context)\n          }));\n          return [4, context.endpoint()];\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"routes.\" + resolvedHostname;\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1CalculateRouteMatrixCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/routes/v0/calculators/{CalculatorName}/calculate/route-matrix\";\n          resolvedPath = __resolvedPath(resolvedPath, input, \"CalculatorName\", function () {\n            return input.CalculatorName;\n          }, \"{CalculatorName}\", false);\n          body = JSON.stringify(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, input.CarModeOptions != null && {\n            CarModeOptions: serializeAws_restJson1CalculateRouteCarModeOptions(input.CarModeOptions, context)\n          }), input.DepartNow != null && {\n            DepartNow: input.DepartNow\n          }), input.DeparturePositions != null && {\n            DeparturePositions: serializeAws_restJson1PositionList(input.DeparturePositions, context)\n          }), input.DepartureTime != null && {\n            DepartureTime: input.DepartureTime.toISOString().split(\".\")[0] + \"Z\"\n          }), input.DestinationPositions != null && {\n            DestinationPositions: serializeAws_restJson1PositionList(input.DestinationPositions, context)\n          }), input.DistanceUnit != null && {\n            DistanceUnit: input.DistanceUnit\n          }), input.TravelMode != null && {\n            TravelMode: input.TravelMode\n          }), input.TruckModeOptions != null && {\n            TruckModeOptions: serializeAws_restJson1CalculateRouteTruckModeOptions(input.TruckModeOptions, context)\n          }));\n          return [4, context.endpoint()];\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"routes.\" + resolvedHostname;\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1CreateGeofenceCollectionCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/geofencing/v0/collections\";\n          body = JSON.stringify(__assign(__assign(__assign(__assign(__assign(__assign({}, input.CollectionName != null && {\n            CollectionName: input.CollectionName\n          }), input.Description != null && {\n            Description: input.Description\n          }), input.KmsKeyId != null && {\n            KmsKeyId: input.KmsKeyId\n          }), input.PricingPlan != null && {\n            PricingPlan: input.PricingPlan\n          }), input.PricingPlanDataSource != null && {\n            PricingPlanDataSource: input.PricingPlanDataSource\n          }), input.Tags != null && {\n            Tags: serializeAws_restJson1TagMap(input.Tags, context)\n          }));\n          return [4, context.endpoint()];\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"geofencing.\" + resolvedHostname;\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1CreateMapCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/maps/v0/maps\";\n          body = JSON.stringify(__assign(__assign(__assign(__assign(__assign({}, input.Configuration != null && {\n            Configuration: serializeAws_restJson1MapConfiguration(input.Configuration, context)\n          }), input.Description != null && {\n            Description: input.Description\n          }), input.MapName != null && {\n            MapName: input.MapName\n          }), input.PricingPlan != null && {\n            PricingPlan: input.PricingPlan\n          }), input.Tags != null && {\n            Tags: serializeAws_restJson1TagMap(input.Tags, context)\n          }));\n          return [4, context.endpoint()];\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"maps.\" + resolvedHostname;\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1CreatePlaceIndexCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/places/v0/indexes\";\n          body = JSON.stringify(__assign(__assign(__assign(__assign(__assign(__assign({}, input.DataSource != null && {\n            DataSource: input.DataSource\n          }), input.DataSourceConfiguration != null && {\n            DataSourceConfiguration: serializeAws_restJson1DataSourceConfiguration(input.DataSourceConfiguration, context)\n          }), input.Description != null && {\n            Description: input.Description\n          }), input.IndexName != null && {\n            IndexName: input.IndexName\n          }), input.PricingPlan != null && {\n            PricingPlan: input.PricingPlan\n          }), input.Tags != null && {\n            Tags: serializeAws_restJson1TagMap(input.Tags, context)\n          }));\n          return [4, context.endpoint()];\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"places.\" + resolvedHostname;\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1CreateRouteCalculatorCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/routes/v0/calculators\";\n          body = JSON.stringify(__assign(__assign(__assign(__assign(__assign({}, input.CalculatorName != null && {\n            CalculatorName: input.CalculatorName\n          }), input.DataSource != null && {\n            DataSource: input.DataSource\n          }), input.Description != null && {\n            Description: input.Description\n          }), input.PricingPlan != null && {\n            PricingPlan: input.PricingPlan\n          }), input.Tags != null && {\n            Tags: serializeAws_restJson1TagMap(input.Tags, context)\n          }));\n          return [4, context.endpoint()];\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"routes.\" + resolvedHostname;\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1CreateTrackerCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/tracking/v0/trackers\";\n          body = JSON.stringify(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, input.Description != null && {\n            Description: input.Description\n          }), input.KmsKeyId != null && {\n            KmsKeyId: input.KmsKeyId\n          }), input.PositionFiltering != null && {\n            PositionFiltering: input.PositionFiltering\n          }), input.PricingPlan != null && {\n            PricingPlan: input.PricingPlan\n          }), input.PricingPlanDataSource != null && {\n            PricingPlanDataSource: input.PricingPlanDataSource\n          }), input.Tags != null && {\n            Tags: serializeAws_restJson1TagMap(input.Tags, context)\n          }), input.TrackerName != null && {\n            TrackerName: input.TrackerName\n          }));\n          return [4, context.endpoint()];\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"tracking.\" + resolvedHostname;\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1DeleteGeofenceCollectionCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {};\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/geofencing/v0/collections/{CollectionName}\";\n          resolvedPath = __resolvedPath(resolvedPath, input, \"CollectionName\", function () {\n            return input.CollectionName;\n          }, \"{CollectionName}\", false);\n          return [4, context.endpoint()];\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"geofencing.\" + resolvedHostname;\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"DELETE\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1DeleteMapCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {};\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/maps/v0/maps/{MapName}\";\n          resolvedPath = __resolvedPath(resolvedPath, input, \"MapName\", function () {\n            return input.MapName;\n          }, \"{MapName}\", false);\n          return [4, context.endpoint()];\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"maps.\" + resolvedHostname;\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"DELETE\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1DeletePlaceIndexCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {};\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/places/v0/indexes/{IndexName}\";\n          resolvedPath = __resolvedPath(resolvedPath, input, \"IndexName\", function () {\n            return input.IndexName;\n          }, \"{IndexName}\", false);\n          return [4, context.endpoint()];\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"places.\" + resolvedHostname;\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"DELETE\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1DeleteRouteCalculatorCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {};\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/routes/v0/calculators/{CalculatorName}\";\n          resolvedPath = __resolvedPath(resolvedPath, input, \"CalculatorName\", function () {\n            return input.CalculatorName;\n          }, \"{CalculatorName}\", false);\n          return [4, context.endpoint()];\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"routes.\" + resolvedHostname;\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"DELETE\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1DeleteTrackerCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {};\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/tracking/v0/trackers/{TrackerName}\";\n          resolvedPath = __resolvedPath(resolvedPath, input, \"TrackerName\", function () {\n            return input.TrackerName;\n          }, \"{TrackerName}\", false);\n          return [4, context.endpoint()];\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"tracking.\" + resolvedHostname;\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"DELETE\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1DescribeGeofenceCollectionCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {};\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/geofencing/v0/collections/{CollectionName}\";\n          resolvedPath = __resolvedPath(resolvedPath, input, \"CollectionName\", function () {\n            return input.CollectionName;\n          }, \"{CollectionName}\", false);\n          return [4, context.endpoint()];\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"geofencing.\" + resolvedHostname;\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1DescribeMapCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {};\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/maps/v0/maps/{MapName}\";\n          resolvedPath = __resolvedPath(resolvedPath, input, \"MapName\", function () {\n            return input.MapName;\n          }, \"{MapName}\", false);\n          return [4, context.endpoint()];\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"maps.\" + resolvedHostname;\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1DescribePlaceIndexCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {};\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/places/v0/indexes/{IndexName}\";\n          resolvedPath = __resolvedPath(resolvedPath, input, \"IndexName\", function () {\n            return input.IndexName;\n          }, \"{IndexName}\", false);\n          return [4, context.endpoint()];\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"places.\" + resolvedHostname;\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1DescribeRouteCalculatorCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {};\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/routes/v0/calculators/{CalculatorName}\";\n          resolvedPath = __resolvedPath(resolvedPath, input, \"CalculatorName\", function () {\n            return input.CalculatorName;\n          }, \"{CalculatorName}\", false);\n          return [4, context.endpoint()];\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"routes.\" + resolvedHostname;\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1DescribeTrackerCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {};\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/tracking/v0/trackers/{TrackerName}\";\n          resolvedPath = __resolvedPath(resolvedPath, input, \"TrackerName\", function () {\n            return input.TrackerName;\n          }, \"{TrackerName}\", false);\n          return [4, context.endpoint()];\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"tracking.\" + resolvedHostname;\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1DisassociateTrackerConsumerCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {};\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/tracking/v0/trackers/{TrackerName}/consumers/{ConsumerArn}\";\n          resolvedPath = __resolvedPath(resolvedPath, input, \"TrackerName\", function () {\n            return input.TrackerName;\n          }, \"{TrackerName}\", false);\n          resolvedPath = __resolvedPath(resolvedPath, input, \"ConsumerArn\", function () {\n            return input.ConsumerArn;\n          }, \"{ConsumerArn}\", false);\n          return [4, context.endpoint()];\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"tracking.\" + resolvedHostname;\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"DELETE\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1GetDevicePositionCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {};\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/tracking/v0/trackers/{TrackerName}/devices/{DeviceId}/positions/latest\";\n          resolvedPath = __resolvedPath(resolvedPath, input, \"TrackerName\", function () {\n            return input.TrackerName;\n          }, \"{TrackerName}\", false);\n          resolvedPath = __resolvedPath(resolvedPath, input, \"DeviceId\", function () {\n            return input.DeviceId;\n          }, \"{DeviceId}\", false);\n          return [4, context.endpoint()];\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"tracking.\" + resolvedHostname;\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1GetDevicePositionHistoryCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/tracking/v0/trackers/{TrackerName}/devices/{DeviceId}/list-positions\";\n          resolvedPath = __resolvedPath(resolvedPath, input, \"TrackerName\", function () {\n            return input.TrackerName;\n          }, \"{TrackerName}\", false);\n          resolvedPath = __resolvedPath(resolvedPath, input, \"DeviceId\", function () {\n            return input.DeviceId;\n          }, \"{DeviceId}\", false);\n          body = JSON.stringify(__assign(__assign(__assign(__assign({}, input.EndTimeExclusive != null && {\n            EndTimeExclusive: input.EndTimeExclusive.toISOString().split(\".\")[0] + \"Z\"\n          }), input.MaxResults != null && {\n            MaxResults: input.MaxResults\n          }), input.NextToken != null && {\n            NextToken: input.NextToken\n          }), input.StartTimeInclusive != null && {\n            StartTimeInclusive: input.StartTimeInclusive.toISOString().split(\".\")[0] + \"Z\"\n          }));\n          return [4, context.endpoint()];\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"tracking.\" + resolvedHostname;\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1GetGeofenceCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {};\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/geofencing/v0/collections/{CollectionName}/geofences/{GeofenceId}\";\n          resolvedPath = __resolvedPath(resolvedPath, input, \"CollectionName\", function () {\n            return input.CollectionName;\n          }, \"{CollectionName}\", false);\n          resolvedPath = __resolvedPath(resolvedPath, input, \"GeofenceId\", function () {\n            return input.GeofenceId;\n          }, \"{GeofenceId}\", false);\n          return [4, context.endpoint()];\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"geofencing.\" + resolvedHostname;\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1GetMapGlyphsCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {};\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/maps/v0/maps/{MapName}/glyphs/{FontStack}/{FontUnicodeRange}\";\n          resolvedPath = __resolvedPath(resolvedPath, input, \"MapName\", function () {\n            return input.MapName;\n          }, \"{MapName}\", false);\n          resolvedPath = __resolvedPath(resolvedPath, input, \"FontStack\", function () {\n            return input.FontStack;\n          }, \"{FontStack}\", false);\n          resolvedPath = __resolvedPath(resolvedPath, input, \"FontUnicodeRange\", function () {\n            return input.FontUnicodeRange;\n          }, \"{FontUnicodeRange}\", false);\n          return [4, context.endpoint()];\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"maps.\" + resolvedHostname;\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1GetMapSpritesCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {};\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/maps/v0/maps/{MapName}/sprites/{FileName}\";\n          resolvedPath = __resolvedPath(resolvedPath, input, \"MapName\", function () {\n            return input.MapName;\n          }, \"{MapName}\", false);\n          resolvedPath = __resolvedPath(resolvedPath, input, \"FileName\", function () {\n            return input.FileName;\n          }, \"{FileName}\", false);\n          return [4, context.endpoint()];\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"maps.\" + resolvedHostname;\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1GetMapStyleDescriptorCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {};\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/maps/v0/maps/{MapName}/style-descriptor\";\n          resolvedPath = __resolvedPath(resolvedPath, input, \"MapName\", function () {\n            return input.MapName;\n          }, \"{MapName}\", false);\n          return [4, context.endpoint()];\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"maps.\" + resolvedHostname;\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1GetMapTileCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {};\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/maps/v0/maps/{MapName}/tiles/{Z}/{X}/{Y}\";\n          resolvedPath = __resolvedPath(resolvedPath, input, \"MapName\", function () {\n            return input.MapName;\n          }, \"{MapName}\", false);\n          resolvedPath = __resolvedPath(resolvedPath, input, \"Z\", function () {\n            return input.Z;\n          }, \"{Z}\", false);\n          resolvedPath = __resolvedPath(resolvedPath, input, \"X\", function () {\n            return input.X;\n          }, \"{X}\", false);\n          resolvedPath = __resolvedPath(resolvedPath, input, \"Y\", function () {\n            return input.Y;\n          }, \"{Y}\", false);\n          return [4, context.endpoint()];\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"maps.\" + resolvedHostname;\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1GetPlaceCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body, resolvedHostname;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {};\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/places/v0/indexes/{IndexName}/places/{PlaceId}\";\n          resolvedPath = __resolvedPath(resolvedPath, input, \"IndexName\", function () {\n            return input.IndexName;\n          }, \"{IndexName}\", false);\n          resolvedPath = __resolvedPath(resolvedPath, input, \"PlaceId\", function () {\n            return input.PlaceId;\n          }, \"{PlaceId}\", false);\n          query = map({\n            language: [, input.Language]\n          });\n          return [4, context.endpoint()];\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"places.\" + resolvedHostname;\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1ListDevicePositionsCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/tracking/v0/trackers/{TrackerName}/list-positions\";\n          resolvedPath = __resolvedPath(resolvedPath, input, \"TrackerName\", function () {\n            return input.TrackerName;\n          }, \"{TrackerName}\", false);\n          body = JSON.stringify(__assign(__assign({}, input.MaxResults != null && {\n            MaxResults: input.MaxResults\n          }), input.NextToken != null && {\n            NextToken: input.NextToken\n          }));\n          return [4, context.endpoint()];\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"tracking.\" + resolvedHostname;\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1ListGeofenceCollectionsCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/geofencing/v0/list-collections\";\n          body = JSON.stringify(__assign(__assign({}, input.MaxResults != null && {\n            MaxResults: input.MaxResults\n          }), input.NextToken != null && {\n            NextToken: input.NextToken\n          }));\n          return [4, context.endpoint()];\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"geofencing.\" + resolvedHostname;\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1ListGeofencesCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/geofencing/v0/collections/{CollectionName}/list-geofences\";\n          resolvedPath = __resolvedPath(resolvedPath, input, \"CollectionName\", function () {\n            return input.CollectionName;\n          }, \"{CollectionName}\", false);\n          body = JSON.stringify(__assign(__assign({}, input.MaxResults != null && {\n            MaxResults: input.MaxResults\n          }), input.NextToken != null && {\n            NextToken: input.NextToken\n          }));\n          return [4, context.endpoint()];\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"geofencing.\" + resolvedHostname;\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1ListMapsCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/maps/v0/list-maps\";\n          body = JSON.stringify(__assign(__assign({}, input.MaxResults != null && {\n            MaxResults: input.MaxResults\n          }), input.NextToken != null && {\n            NextToken: input.NextToken\n          }));\n          return [4, context.endpoint()];\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"maps.\" + resolvedHostname;\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1ListPlaceIndexesCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/places/v0/list-indexes\";\n          body = JSON.stringify(__assign(__assign({}, input.MaxResults != null && {\n            MaxResults: input.MaxResults\n          }), input.NextToken != null && {\n            NextToken: input.NextToken\n          }));\n          return [4, context.endpoint()];\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"places.\" + resolvedHostname;\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1ListRouteCalculatorsCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/routes/v0/list-calculators\";\n          body = JSON.stringify(__assign(__assign({}, input.MaxResults != null && {\n            MaxResults: input.MaxResults\n          }), input.NextToken != null && {\n            NextToken: input.NextToken\n          }));\n          return [4, context.endpoint()];\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"routes.\" + resolvedHostname;\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1ListTagsForResourceCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {};\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/tags/{ResourceArn}\";\n          resolvedPath = __resolvedPath(resolvedPath, input, \"ResourceArn\", function () {\n            return input.ResourceArn;\n          }, \"{ResourceArn}\", false);\n          return [4, context.endpoint()];\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"metadata.\" + resolvedHostname;\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1ListTrackerConsumersCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/tracking/v0/trackers/{TrackerName}/list-consumers\";\n          resolvedPath = __resolvedPath(resolvedPath, input, \"TrackerName\", function () {\n            return input.TrackerName;\n          }, \"{TrackerName}\", false);\n          body = JSON.stringify(__assign(__assign({}, input.MaxResults != null && {\n            MaxResults: input.MaxResults\n          }), input.NextToken != null && {\n            NextToken: input.NextToken\n          }));\n          return [4, context.endpoint()];\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"tracking.\" + resolvedHostname;\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1ListTrackersCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/tracking/v0/list-trackers\";\n          body = JSON.stringify(__assign(__assign({}, input.MaxResults != null && {\n            MaxResults: input.MaxResults\n          }), input.NextToken != null && {\n            NextToken: input.NextToken\n          }));\n          return [4, context.endpoint()];\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"tracking.\" + resolvedHostname;\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1PutGeofenceCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/geofencing/v0/collections/{CollectionName}/geofences/{GeofenceId}\";\n          resolvedPath = __resolvedPath(resolvedPath, input, \"CollectionName\", function () {\n            return input.CollectionName;\n          }, \"{CollectionName}\", false);\n          resolvedPath = __resolvedPath(resolvedPath, input, \"GeofenceId\", function () {\n            return input.GeofenceId;\n          }, \"{GeofenceId}\", false);\n          body = JSON.stringify(__assign({}, input.Geometry != null && {\n            Geometry: serializeAws_restJson1GeofenceGeometry(input.Geometry, context)\n          }));\n          return [4, context.endpoint()];\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"geofencing.\" + resolvedHostname;\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1SearchPlaceIndexForPositionCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/places/v0/indexes/{IndexName}/search/position\";\n          resolvedPath = __resolvedPath(resolvedPath, input, \"IndexName\", function () {\n            return input.IndexName;\n          }, \"{IndexName}\", false);\n          body = JSON.stringify(__assign(__assign(__assign({}, input.Language != null && {\n            Language: input.Language\n          }), input.MaxResults != null && {\n            MaxResults: input.MaxResults\n          }), input.Position != null && {\n            Position: serializeAws_restJson1Position(input.Position, context)\n          }));\n          return [4, context.endpoint()];\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"places.\" + resolvedHostname;\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1SearchPlaceIndexForSuggestionsCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/places/v0/indexes/{IndexName}/search/suggestions\";\n          resolvedPath = __resolvedPath(resolvedPath, input, \"IndexName\", function () {\n            return input.IndexName;\n          }, \"{IndexName}\", false);\n          body = JSON.stringify(__assign(__assign(__assign(__assign(__assign(__assign({}, input.BiasPosition != null && {\n            BiasPosition: serializeAws_restJson1Position(input.BiasPosition, context)\n          }), input.FilterBBox != null && {\n            FilterBBox: serializeAws_restJson1BoundingBox(input.FilterBBox, context)\n          }), input.FilterCountries != null && {\n            FilterCountries: serializeAws_restJson1CountryCodeList(input.FilterCountries, context)\n          }), input.Language != null && {\n            Language: input.Language\n          }), input.MaxResults != null && {\n            MaxResults: input.MaxResults\n          }), input.Text != null && {\n            Text: input.Text\n          }));\n          return [4, context.endpoint()];\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"places.\" + resolvedHostname;\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1SearchPlaceIndexForTextCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/places/v0/indexes/{IndexName}/search/text\";\n          resolvedPath = __resolvedPath(resolvedPath, input, \"IndexName\", function () {\n            return input.IndexName;\n          }, \"{IndexName}\", false);\n          body = JSON.stringify(__assign(__assign(__assign(__assign(__assign(__assign({}, input.BiasPosition != null && {\n            BiasPosition: serializeAws_restJson1Position(input.BiasPosition, context)\n          }), input.FilterBBox != null && {\n            FilterBBox: serializeAws_restJson1BoundingBox(input.FilterBBox, context)\n          }), input.FilterCountries != null && {\n            FilterCountries: serializeAws_restJson1CountryCodeList(input.FilterCountries, context)\n          }), input.Language != null && {\n            Language: input.Language\n          }), input.MaxResults != null && {\n            MaxResults: input.MaxResults\n          }), input.Text != null && {\n            Text: input.Text\n          }));\n          return [4, context.endpoint()];\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"places.\" + resolvedHostname;\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1TagResourceCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/tags/{ResourceArn}\";\n          resolvedPath = __resolvedPath(resolvedPath, input, \"ResourceArn\", function () {\n            return input.ResourceArn;\n          }, \"{ResourceArn}\", false);\n          body = JSON.stringify(__assign({}, input.Tags != null && {\n            Tags: serializeAws_restJson1TagMap(input.Tags, context)\n          }));\n          return [4, context.endpoint()];\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"metadata.\" + resolvedHostname;\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1UntagResourceCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body, resolvedHostname;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {};\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/tags/{ResourceArn}\";\n          resolvedPath = __resolvedPath(resolvedPath, input, \"ResourceArn\", function () {\n            return input.ResourceArn;\n          }, \"{ResourceArn}\", false);\n          query = map({\n            tagKeys: [function () {\n              return input.TagKeys !== void 0;\n            }, function () {\n              return (input.TagKeys || []).map(function (_entry) {\n                return _entry;\n              });\n            }]\n          });\n          return [4, context.endpoint()];\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"metadata.\" + resolvedHostname;\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"DELETE\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1UpdateGeofenceCollectionCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/geofencing/v0/collections/{CollectionName}\";\n          resolvedPath = __resolvedPath(resolvedPath, input, \"CollectionName\", function () {\n            return input.CollectionName;\n          }, \"{CollectionName}\", false);\n          body = JSON.stringify(__assign(__assign(__assign({}, input.Description != null && {\n            Description: input.Description\n          }), input.PricingPlan != null && {\n            PricingPlan: input.PricingPlan\n          }), input.PricingPlanDataSource != null && {\n            PricingPlanDataSource: input.PricingPlanDataSource\n          }));\n          return [4, context.endpoint()];\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"geofencing.\" + resolvedHostname;\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"PATCH\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1UpdateMapCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/maps/v0/maps/{MapName}\";\n          resolvedPath = __resolvedPath(resolvedPath, input, \"MapName\", function () {\n            return input.MapName;\n          }, \"{MapName}\", false);\n          body = JSON.stringify(__assign(__assign({}, input.Description != null && {\n            Description: input.Description\n          }), input.PricingPlan != null && {\n            PricingPlan: input.PricingPlan\n          }));\n          return [4, context.endpoint()];\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"maps.\" + resolvedHostname;\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"PATCH\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1UpdatePlaceIndexCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/places/v0/indexes/{IndexName}\";\n          resolvedPath = __resolvedPath(resolvedPath, input, \"IndexName\", function () {\n            return input.IndexName;\n          }, \"{IndexName}\", false);\n          body = JSON.stringify(__assign(__assign(__assign({}, input.DataSourceConfiguration != null && {\n            DataSourceConfiguration: serializeAws_restJson1DataSourceConfiguration(input.DataSourceConfiguration, context)\n          }), input.Description != null && {\n            Description: input.Description\n          }), input.PricingPlan != null && {\n            PricingPlan: input.PricingPlan\n          }));\n          return [4, context.endpoint()];\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"places.\" + resolvedHostname;\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"PATCH\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1UpdateRouteCalculatorCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/routes/v0/calculators/{CalculatorName}\";\n          resolvedPath = __resolvedPath(resolvedPath, input, \"CalculatorName\", function () {\n            return input.CalculatorName;\n          }, \"{CalculatorName}\", false);\n          body = JSON.stringify(__assign(__assign({}, input.Description != null && {\n            Description: input.Description\n          }), input.PricingPlan != null && {\n            PricingPlan: input.PricingPlan\n          }));\n          return [4, context.endpoint()];\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"routes.\" + resolvedHostname;\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"PATCH\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1UpdateTrackerCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/tracking/v0/trackers/{TrackerName}\";\n          resolvedPath = __resolvedPath(resolvedPath, input, \"TrackerName\", function () {\n            return input.TrackerName;\n          }, \"{TrackerName}\", false);\n          body = JSON.stringify(__assign(__assign(__assign(__assign({}, input.Description != null && {\n            Description: input.Description\n          }), input.PositionFiltering != null && {\n            PositionFiltering: input.PositionFiltering\n          }), input.PricingPlan != null && {\n            PricingPlan: input.PricingPlan\n          }), input.PricingPlanDataSource != null && {\n            PricingPlanDataSource: input.PricingPlanDataSource\n          }));\n          return [4, context.endpoint()];\n        case 2:\n          resolvedHostname = _c.sent().hostname;\n          if (context.disableHostPrefix !== true) {\n            resolvedHostname = \"tracking.\" + resolvedHostname;\n            if (!__isValidHostname(resolvedHostname)) {\n              throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n            }\n          }\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: resolvedHostname,\n            port: port,\n            method: \"PATCH\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1AssociateTrackerConsumerCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2, deserializeAws_restJson1AssociateTrackerConsumerCommandError(output, context)];\n          }\n          contents = map({\n            $metadata: deserializeMetadata(output)\n          });\n          return [4, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1AssociateTrackerConsumerCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3, 2];\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3, 2];\n            case \"ConflictException\":\n              return [3, 4];\n            case \"com.amazonaws.location#ConflictException\":\n              return [3, 4];\n            case \"InternalServerException\":\n              return [3, 6];\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3, 6];\n            case \"ResourceNotFoundException\":\n              return [3, 8];\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3, 8];\n            case \"ServiceQuotaExceededException\":\n              return [3, 10];\n            case \"com.amazonaws.location#ServiceQuotaExceededException\":\n              return [3, 10];\n            case \"ThrottlingException\":\n              return [3, 12];\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3, 12];\n            case \"ValidationException\":\n              return [3, 14];\n            case \"com.amazonaws.location#ValidationException\":\n              return [3, 14];\n          }\n          return [3, 16];\n        case 2:\n          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          return [4, deserializeAws_restJson1ServiceQuotaExceededExceptionResponse(parsedOutput, context)];\n        case 11:\n          throw _d.sent();\n        case 12:\n          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n        case 13:\n          throw _d.sent();\n        case 14:\n          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n        case 15:\n          throw _d.sent();\n        case 16:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 17;\n        case 17:\n          return [2];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1BatchDeleteDevicePositionHistoryCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, _a, _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2, deserializeAws_restJson1BatchDeleteDevicePositionHistoryCommandError(output, context)];\n          }\n          contents = map({\n            $metadata: deserializeMetadata(output)\n          });\n          _a = __expectNonNull;\n          _b = __expectObject;\n          return [4, parseBody(output.body, context)];\n        case 1:\n          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), \"body\"]);\n          if (data.Errors != null) {\n            contents.Errors = deserializeAws_restJson1BatchDeleteDevicePositionHistoryErrorList(data.Errors, context);\n          }\n          return [2, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1BatchDeleteDevicePositionHistoryCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3, 2];\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3, 2];\n            case \"InternalServerException\":\n              return [3, 4];\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3, 4];\n            case \"ResourceNotFoundException\":\n              return [3, 6];\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3, 6];\n            case \"ThrottlingException\":\n              return [3, 8];\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3, 8];\n            case \"ValidationException\":\n              return [3, 10];\n            case \"com.amazonaws.location#ValidationException\":\n              return [3, 10];\n          }\n          return [3, 12];\n        case 2:\n          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n        case 11:\n          throw _d.sent();\n        case 12:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 13;\n        case 13:\n          return [2];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1BatchDeleteGeofenceCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, _a, _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2, deserializeAws_restJson1BatchDeleteGeofenceCommandError(output, context)];\n          }\n          contents = map({\n            $metadata: deserializeMetadata(output)\n          });\n          _a = __expectNonNull;\n          _b = __expectObject;\n          return [4, parseBody(output.body, context)];\n        case 1:\n          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), \"body\"]);\n          if (data.Errors != null) {\n            contents.Errors = deserializeAws_restJson1BatchDeleteGeofenceErrorList(data.Errors, context);\n          }\n          return [2, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1BatchDeleteGeofenceCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3, 2];\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3, 2];\n            case \"InternalServerException\":\n              return [3, 4];\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3, 4];\n            case \"ResourceNotFoundException\":\n              return [3, 6];\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3, 6];\n            case \"ThrottlingException\":\n              return [3, 8];\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3, 8];\n            case \"ValidationException\":\n              return [3, 10];\n            case \"com.amazonaws.location#ValidationException\":\n              return [3, 10];\n          }\n          return [3, 12];\n        case 2:\n          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n        case 11:\n          throw _d.sent();\n        case 12:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 13;\n        case 13:\n          return [2];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1BatchEvaluateGeofencesCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, _a, _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2, deserializeAws_restJson1BatchEvaluateGeofencesCommandError(output, context)];\n          }\n          contents = map({\n            $metadata: deserializeMetadata(output)\n          });\n          _a = __expectNonNull;\n          _b = __expectObject;\n          return [4, parseBody(output.body, context)];\n        case 1:\n          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), \"body\"]);\n          if (data.Errors != null) {\n            contents.Errors = deserializeAws_restJson1BatchEvaluateGeofencesErrorList(data.Errors, context);\n          }\n          return [2, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1BatchEvaluateGeofencesCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3, 2];\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3, 2];\n            case \"InternalServerException\":\n              return [3, 4];\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3, 4];\n            case \"ResourceNotFoundException\":\n              return [3, 6];\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3, 6];\n            case \"ThrottlingException\":\n              return [3, 8];\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3, 8];\n            case \"ValidationException\":\n              return [3, 10];\n            case \"com.amazonaws.location#ValidationException\":\n              return [3, 10];\n          }\n          return [3, 12];\n        case 2:\n          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n        case 11:\n          throw _d.sent();\n        case 12:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 13;\n        case 13:\n          return [2];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1BatchGetDevicePositionCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, _a, _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2, deserializeAws_restJson1BatchGetDevicePositionCommandError(output, context)];\n          }\n          contents = map({\n            $metadata: deserializeMetadata(output)\n          });\n          _a = __expectNonNull;\n          _b = __expectObject;\n          return [4, parseBody(output.body, context)];\n        case 1:\n          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), \"body\"]);\n          if (data.DevicePositions != null) {\n            contents.DevicePositions = deserializeAws_restJson1DevicePositionList(data.DevicePositions, context);\n          }\n          if (data.Errors != null) {\n            contents.Errors = deserializeAws_restJson1BatchGetDevicePositionErrorList(data.Errors, context);\n          }\n          return [2, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1BatchGetDevicePositionCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3, 2];\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3, 2];\n            case \"InternalServerException\":\n              return [3, 4];\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3, 4];\n            case \"ResourceNotFoundException\":\n              return [3, 6];\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3, 6];\n            case \"ThrottlingException\":\n              return [3, 8];\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3, 8];\n            case \"ValidationException\":\n              return [3, 10];\n            case \"com.amazonaws.location#ValidationException\":\n              return [3, 10];\n          }\n          return [3, 12];\n        case 2:\n          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n        case 11:\n          throw _d.sent();\n        case 12:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 13;\n        case 13:\n          return [2];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1BatchPutGeofenceCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, _a, _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2, deserializeAws_restJson1BatchPutGeofenceCommandError(output, context)];\n          }\n          contents = map({\n            $metadata: deserializeMetadata(output)\n          });\n          _a = __expectNonNull;\n          _b = __expectObject;\n          return [4, parseBody(output.body, context)];\n        case 1:\n          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), \"body\"]);\n          if (data.Errors != null) {\n            contents.Errors = deserializeAws_restJson1BatchPutGeofenceErrorList(data.Errors, context);\n          }\n          if (data.Successes != null) {\n            contents.Successes = deserializeAws_restJson1BatchPutGeofenceSuccessList(data.Successes, context);\n          }\n          return [2, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1BatchPutGeofenceCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3, 2];\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3, 2];\n            case \"InternalServerException\":\n              return [3, 4];\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3, 4];\n            case \"ResourceNotFoundException\":\n              return [3, 6];\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3, 6];\n            case \"ThrottlingException\":\n              return [3, 8];\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3, 8];\n            case \"ValidationException\":\n              return [3, 10];\n            case \"com.amazonaws.location#ValidationException\":\n              return [3, 10];\n          }\n          return [3, 12];\n        case 2:\n          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n        case 11:\n          throw _d.sent();\n        case 12:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 13;\n        case 13:\n          return [2];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1BatchUpdateDevicePositionCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, _a, _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2, deserializeAws_restJson1BatchUpdateDevicePositionCommandError(output, context)];\n          }\n          contents = map({\n            $metadata: deserializeMetadata(output)\n          });\n          _a = __expectNonNull;\n          _b = __expectObject;\n          return [4, parseBody(output.body, context)];\n        case 1:\n          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), \"body\"]);\n          if (data.Errors != null) {\n            contents.Errors = deserializeAws_restJson1BatchUpdateDevicePositionErrorList(data.Errors, context);\n          }\n          return [2, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1BatchUpdateDevicePositionCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3, 2];\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3, 2];\n            case \"InternalServerException\":\n              return [3, 4];\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3, 4];\n            case \"ResourceNotFoundException\":\n              return [3, 6];\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3, 6];\n            case \"ThrottlingException\":\n              return [3, 8];\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3, 8];\n            case \"ValidationException\":\n              return [3, 10];\n            case \"com.amazonaws.location#ValidationException\":\n              return [3, 10];\n          }\n          return [3, 12];\n        case 2:\n          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n        case 11:\n          throw _d.sent();\n        case 12:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 13;\n        case 13:\n          return [2];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1CalculateRouteCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, _a, _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2, deserializeAws_restJson1CalculateRouteCommandError(output, context)];\n          }\n          contents = map({\n            $metadata: deserializeMetadata(output)\n          });\n          _a = __expectNonNull;\n          _b = __expectObject;\n          return [4, parseBody(output.body, context)];\n        case 1:\n          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), \"body\"]);\n          if (data.Legs != null) {\n            contents.Legs = deserializeAws_restJson1LegList(data.Legs, context);\n          }\n          if (data.Summary != null) {\n            contents.Summary = deserializeAws_restJson1CalculateRouteSummary(data.Summary, context);\n          }\n          return [2, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1CalculateRouteCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3, 2];\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3, 2];\n            case \"InternalServerException\":\n              return [3, 4];\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3, 4];\n            case \"ResourceNotFoundException\":\n              return [3, 6];\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3, 6];\n            case \"ThrottlingException\":\n              return [3, 8];\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3, 8];\n            case \"ValidationException\":\n              return [3, 10];\n            case \"com.amazonaws.location#ValidationException\":\n              return [3, 10];\n          }\n          return [3, 12];\n        case 2:\n          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n        case 11:\n          throw _d.sent();\n        case 12:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 13;\n        case 13:\n          return [2];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1CalculateRouteMatrixCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, _a, _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2, deserializeAws_restJson1CalculateRouteMatrixCommandError(output, context)];\n          }\n          contents = map({\n            $metadata: deserializeMetadata(output)\n          });\n          _a = __expectNonNull;\n          _b = __expectObject;\n          return [4, parseBody(output.body, context)];\n        case 1:\n          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), \"body\"]);\n          if (data.RouteMatrix != null) {\n            contents.RouteMatrix = deserializeAws_restJson1RouteMatrix(data.RouteMatrix, context);\n          }\n          if (data.SnappedDeparturePositions != null) {\n            contents.SnappedDeparturePositions = deserializeAws_restJson1PositionList(data.SnappedDeparturePositions, context);\n          }\n          if (data.SnappedDestinationPositions != null) {\n            contents.SnappedDestinationPositions = deserializeAws_restJson1PositionList(data.SnappedDestinationPositions, context);\n          }\n          if (data.Summary != null) {\n            contents.Summary = deserializeAws_restJson1CalculateRouteMatrixSummary(data.Summary, context);\n          }\n          return [2, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1CalculateRouteMatrixCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3, 2];\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3, 2];\n            case \"InternalServerException\":\n              return [3, 4];\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3, 4];\n            case \"ResourceNotFoundException\":\n              return [3, 6];\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3, 6];\n            case \"ThrottlingException\":\n              return [3, 8];\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3, 8];\n            case \"ValidationException\":\n              return [3, 10];\n            case \"com.amazonaws.location#ValidationException\":\n              return [3, 10];\n          }\n          return [3, 12];\n        case 2:\n          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n        case 11:\n          throw _d.sent();\n        case 12:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 13;\n        case 13:\n          return [2];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1CreateGeofenceCollectionCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, _a, _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2, deserializeAws_restJson1CreateGeofenceCollectionCommandError(output, context)];\n          }\n          contents = map({\n            $metadata: deserializeMetadata(output)\n          });\n          _a = __expectNonNull;\n          _b = __expectObject;\n          return [4, parseBody(output.body, context)];\n        case 1:\n          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), \"body\"]);\n          if (data.CollectionArn != null) {\n            contents.CollectionArn = __expectString(data.CollectionArn);\n          }\n          if (data.CollectionName != null) {\n            contents.CollectionName = __expectString(data.CollectionName);\n          }\n          if (data.CreateTime != null) {\n            contents.CreateTime = __expectNonNull(__parseRfc3339DateTime(data.CreateTime));\n          }\n          return [2, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1CreateGeofenceCollectionCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3, 2];\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3, 2];\n            case \"ConflictException\":\n              return [3, 4];\n            case \"com.amazonaws.location#ConflictException\":\n              return [3, 4];\n            case \"InternalServerException\":\n              return [3, 6];\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3, 6];\n            case \"ThrottlingException\":\n              return [3, 8];\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3, 8];\n            case \"ValidationException\":\n              return [3, 10];\n            case \"com.amazonaws.location#ValidationException\":\n              return [3, 10];\n          }\n          return [3, 12];\n        case 2:\n          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n        case 11:\n          throw _d.sent();\n        case 12:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 13;\n        case 13:\n          return [2];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1CreateMapCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, _a, _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2, deserializeAws_restJson1CreateMapCommandError(output, context)];\n          }\n          contents = map({\n            $metadata: deserializeMetadata(output)\n          });\n          _a = __expectNonNull;\n          _b = __expectObject;\n          return [4, parseBody(output.body, context)];\n        case 1:\n          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), \"body\"]);\n          if (data.CreateTime != null) {\n            contents.CreateTime = __expectNonNull(__parseRfc3339DateTime(data.CreateTime));\n          }\n          if (data.MapArn != null) {\n            contents.MapArn = __expectString(data.MapArn);\n          }\n          if (data.MapName != null) {\n            contents.MapName = __expectString(data.MapName);\n          }\n          return [2, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1CreateMapCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3, 2];\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3, 2];\n            case \"ConflictException\":\n              return [3, 4];\n            case \"com.amazonaws.location#ConflictException\":\n              return [3, 4];\n            case \"InternalServerException\":\n              return [3, 6];\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3, 6];\n            case \"ThrottlingException\":\n              return [3, 8];\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3, 8];\n            case \"ValidationException\":\n              return [3, 10];\n            case \"com.amazonaws.location#ValidationException\":\n              return [3, 10];\n          }\n          return [3, 12];\n        case 2:\n          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n        case 11:\n          throw _d.sent();\n        case 12:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 13;\n        case 13:\n          return [2];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1CreatePlaceIndexCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, _a, _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2, deserializeAws_restJson1CreatePlaceIndexCommandError(output, context)];\n          }\n          contents = map({\n            $metadata: deserializeMetadata(output)\n          });\n          _a = __expectNonNull;\n          _b = __expectObject;\n          return [4, parseBody(output.body, context)];\n        case 1:\n          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), \"body\"]);\n          if (data.CreateTime != null) {\n            contents.CreateTime = __expectNonNull(__parseRfc3339DateTime(data.CreateTime));\n          }\n          if (data.IndexArn != null) {\n            contents.IndexArn = __expectString(data.IndexArn);\n          }\n          if (data.IndexName != null) {\n            contents.IndexName = __expectString(data.IndexName);\n          }\n          return [2, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1CreatePlaceIndexCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3, 2];\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3, 2];\n            case \"ConflictException\":\n              return [3, 4];\n            case \"com.amazonaws.location#ConflictException\":\n              return [3, 4];\n            case \"InternalServerException\":\n              return [3, 6];\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3, 6];\n            case \"ThrottlingException\":\n              return [3, 8];\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3, 8];\n            case \"ValidationException\":\n              return [3, 10];\n            case \"com.amazonaws.location#ValidationException\":\n              return [3, 10];\n          }\n          return [3, 12];\n        case 2:\n          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n        case 11:\n          throw _d.sent();\n        case 12:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 13;\n        case 13:\n          return [2];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1CreateRouteCalculatorCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, _a, _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2, deserializeAws_restJson1CreateRouteCalculatorCommandError(output, context)];\n          }\n          contents = map({\n            $metadata: deserializeMetadata(output)\n          });\n          _a = __expectNonNull;\n          _b = __expectObject;\n          return [4, parseBody(output.body, context)];\n        case 1:\n          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), \"body\"]);\n          if (data.CalculatorArn != null) {\n            contents.CalculatorArn = __expectString(data.CalculatorArn);\n          }\n          if (data.CalculatorName != null) {\n            contents.CalculatorName = __expectString(data.CalculatorName);\n          }\n          if (data.CreateTime != null) {\n            contents.CreateTime = __expectNonNull(__parseRfc3339DateTime(data.CreateTime));\n          }\n          return [2, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1CreateRouteCalculatorCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3, 2];\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3, 2];\n            case \"ConflictException\":\n              return [3, 4];\n            case \"com.amazonaws.location#ConflictException\":\n              return [3, 4];\n            case \"InternalServerException\":\n              return [3, 6];\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3, 6];\n            case \"ThrottlingException\":\n              return [3, 8];\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3, 8];\n            case \"ValidationException\":\n              return [3, 10];\n            case \"com.amazonaws.location#ValidationException\":\n              return [3, 10];\n          }\n          return [3, 12];\n        case 2:\n          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n        case 11:\n          throw _d.sent();\n        case 12:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 13;\n        case 13:\n          return [2];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1CreateTrackerCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, _a, _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2, deserializeAws_restJson1CreateTrackerCommandError(output, context)];\n          }\n          contents = map({\n            $metadata: deserializeMetadata(output)\n          });\n          _a = __expectNonNull;\n          _b = __expectObject;\n          return [4, parseBody(output.body, context)];\n        case 1:\n          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), \"body\"]);\n          if (data.CreateTime != null) {\n            contents.CreateTime = __expectNonNull(__parseRfc3339DateTime(data.CreateTime));\n          }\n          if (data.TrackerArn != null) {\n            contents.TrackerArn = __expectString(data.TrackerArn);\n          }\n          if (data.TrackerName != null) {\n            contents.TrackerName = __expectString(data.TrackerName);\n          }\n          return [2, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1CreateTrackerCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3, 2];\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3, 2];\n            case \"ConflictException\":\n              return [3, 4];\n            case \"com.amazonaws.location#ConflictException\":\n              return [3, 4];\n            case \"InternalServerException\":\n              return [3, 6];\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3, 6];\n            case \"ThrottlingException\":\n              return [3, 8];\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3, 8];\n            case \"ValidationException\":\n              return [3, 10];\n            case \"com.amazonaws.location#ValidationException\":\n              return [3, 10];\n          }\n          return [3, 12];\n        case 2:\n          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n        case 11:\n          throw _d.sent();\n        case 12:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 13;\n        case 13:\n          return [2];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1DeleteGeofenceCollectionCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2, deserializeAws_restJson1DeleteGeofenceCollectionCommandError(output, context)];\n          }\n          contents = map({\n            $metadata: deserializeMetadata(output)\n          });\n          return [4, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1DeleteGeofenceCollectionCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3, 2];\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3, 2];\n            case \"InternalServerException\":\n              return [3, 4];\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3, 4];\n            case \"ResourceNotFoundException\":\n              return [3, 6];\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3, 6];\n            case \"ThrottlingException\":\n              return [3, 8];\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3, 8];\n            case \"ValidationException\":\n              return [3, 10];\n            case \"com.amazonaws.location#ValidationException\":\n              return [3, 10];\n          }\n          return [3, 12];\n        case 2:\n          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n        case 11:\n          throw _d.sent();\n        case 12:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 13;\n        case 13:\n          return [2];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1DeleteMapCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2, deserializeAws_restJson1DeleteMapCommandError(output, context)];\n          }\n          contents = map({\n            $metadata: deserializeMetadata(output)\n          });\n          return [4, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1DeleteMapCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3, 2];\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3, 2];\n            case \"InternalServerException\":\n              return [3, 4];\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3, 4];\n            case \"ResourceNotFoundException\":\n              return [3, 6];\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3, 6];\n            case \"ThrottlingException\":\n              return [3, 8];\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3, 8];\n            case \"ValidationException\":\n              return [3, 10];\n            case \"com.amazonaws.location#ValidationException\":\n              return [3, 10];\n          }\n          return [3, 12];\n        case 2:\n          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n        case 11:\n          throw _d.sent();\n        case 12:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 13;\n        case 13:\n          return [2];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1DeletePlaceIndexCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2, deserializeAws_restJson1DeletePlaceIndexCommandError(output, context)];\n          }\n          contents = map({\n            $metadata: deserializeMetadata(output)\n          });\n          return [4, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1DeletePlaceIndexCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3, 2];\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3, 2];\n            case \"InternalServerException\":\n              return [3, 4];\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3, 4];\n            case \"ResourceNotFoundException\":\n              return [3, 6];\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3, 6];\n            case \"ThrottlingException\":\n              return [3, 8];\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3, 8];\n            case \"ValidationException\":\n              return [3, 10];\n            case \"com.amazonaws.location#ValidationException\":\n              return [3, 10];\n          }\n          return [3, 12];\n        case 2:\n          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n        case 11:\n          throw _d.sent();\n        case 12:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 13;\n        case 13:\n          return [2];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1DeleteRouteCalculatorCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2, deserializeAws_restJson1DeleteRouteCalculatorCommandError(output, context)];\n          }\n          contents = map({\n            $metadata: deserializeMetadata(output)\n          });\n          return [4, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1DeleteRouteCalculatorCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3, 2];\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3, 2];\n            case \"InternalServerException\":\n              return [3, 4];\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3, 4];\n            case \"ResourceNotFoundException\":\n              return [3, 6];\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3, 6];\n            case \"ThrottlingException\":\n              return [3, 8];\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3, 8];\n            case \"ValidationException\":\n              return [3, 10];\n            case \"com.amazonaws.location#ValidationException\":\n              return [3, 10];\n          }\n          return [3, 12];\n        case 2:\n          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n        case 11:\n          throw _d.sent();\n        case 12:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 13;\n        case 13:\n          return [2];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1DeleteTrackerCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2, deserializeAws_restJson1DeleteTrackerCommandError(output, context)];\n          }\n          contents = map({\n            $metadata: deserializeMetadata(output)\n          });\n          return [4, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1DeleteTrackerCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3, 2];\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3, 2];\n            case \"InternalServerException\":\n              return [3, 4];\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3, 4];\n            case \"ResourceNotFoundException\":\n              return [3, 6];\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3, 6];\n            case \"ThrottlingException\":\n              return [3, 8];\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3, 8];\n            case \"ValidationException\":\n              return [3, 10];\n            case \"com.amazonaws.location#ValidationException\":\n              return [3, 10];\n          }\n          return [3, 12];\n        case 2:\n          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n        case 11:\n          throw _d.sent();\n        case 12:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 13;\n        case 13:\n          return [2];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1DescribeGeofenceCollectionCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, _a, _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2, deserializeAws_restJson1DescribeGeofenceCollectionCommandError(output, context)];\n          }\n          contents = map({\n            $metadata: deserializeMetadata(output)\n          });\n          _a = __expectNonNull;\n          _b = __expectObject;\n          return [4, parseBody(output.body, context)];\n        case 1:\n          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), \"body\"]);\n          if (data.CollectionArn != null) {\n            contents.CollectionArn = __expectString(data.CollectionArn);\n          }\n          if (data.CollectionName != null) {\n            contents.CollectionName = __expectString(data.CollectionName);\n          }\n          if (data.CreateTime != null) {\n            contents.CreateTime = __expectNonNull(__parseRfc3339DateTime(data.CreateTime));\n          }\n          if (data.Description != null) {\n            contents.Description = __expectString(data.Description);\n          }\n          if (data.KmsKeyId != null) {\n            contents.KmsKeyId = __expectString(data.KmsKeyId);\n          }\n          if (data.PricingPlan != null) {\n            contents.PricingPlan = __expectString(data.PricingPlan);\n          }\n          if (data.PricingPlanDataSource != null) {\n            contents.PricingPlanDataSource = __expectString(data.PricingPlanDataSource);\n          }\n          if (data.Tags != null) {\n            contents.Tags = deserializeAws_restJson1TagMap(data.Tags, context);\n          }\n          if (data.UpdateTime != null) {\n            contents.UpdateTime = __expectNonNull(__parseRfc3339DateTime(data.UpdateTime));\n          }\n          return [2, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1DescribeGeofenceCollectionCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3, 2];\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3, 2];\n            case \"InternalServerException\":\n              return [3, 4];\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3, 4];\n            case \"ResourceNotFoundException\":\n              return [3, 6];\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3, 6];\n            case \"ThrottlingException\":\n              return [3, 8];\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3, 8];\n            case \"ValidationException\":\n              return [3, 10];\n            case \"com.amazonaws.location#ValidationException\":\n              return [3, 10];\n          }\n          return [3, 12];\n        case 2:\n          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n        case 11:\n          throw _d.sent();\n        case 12:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 13;\n        case 13:\n          return [2];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1DescribeMapCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, _a, _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2, deserializeAws_restJson1DescribeMapCommandError(output, context)];\n          }\n          contents = map({\n            $metadata: deserializeMetadata(output)\n          });\n          _a = __expectNonNull;\n          _b = __expectObject;\n          return [4, parseBody(output.body, context)];\n        case 1:\n          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), \"body\"]);\n          if (data.Configuration != null) {\n            contents.Configuration = deserializeAws_restJson1MapConfiguration(data.Configuration, context);\n          }\n          if (data.CreateTime != null) {\n            contents.CreateTime = __expectNonNull(__parseRfc3339DateTime(data.CreateTime));\n          }\n          if (data.DataSource != null) {\n            contents.DataSource = __expectString(data.DataSource);\n          }\n          if (data.Description != null) {\n            contents.Description = __expectString(data.Description);\n          }\n          if (data.MapArn != null) {\n            contents.MapArn = __expectString(data.MapArn);\n          }\n          if (data.MapName != null) {\n            contents.MapName = __expectString(data.MapName);\n          }\n          if (data.PricingPlan != null) {\n            contents.PricingPlan = __expectString(data.PricingPlan);\n          }\n          if (data.Tags != null) {\n            contents.Tags = deserializeAws_restJson1TagMap(data.Tags, context);\n          }\n          if (data.UpdateTime != null) {\n            contents.UpdateTime = __expectNonNull(__parseRfc3339DateTime(data.UpdateTime));\n          }\n          return [2, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1DescribeMapCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3, 2];\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3, 2];\n            case \"InternalServerException\":\n              return [3, 4];\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3, 4];\n            case \"ResourceNotFoundException\":\n              return [3, 6];\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3, 6];\n            case \"ThrottlingException\":\n              return [3, 8];\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3, 8];\n            case \"ValidationException\":\n              return [3, 10];\n            case \"com.amazonaws.location#ValidationException\":\n              return [3, 10];\n          }\n          return [3, 12];\n        case 2:\n          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n        case 11:\n          throw _d.sent();\n        case 12:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 13;\n        case 13:\n          return [2];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1DescribePlaceIndexCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, _a, _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2, deserializeAws_restJson1DescribePlaceIndexCommandError(output, context)];\n          }\n          contents = map({\n            $metadata: deserializeMetadata(output)\n          });\n          _a = __expectNonNull;\n          _b = __expectObject;\n          return [4, parseBody(output.body, context)];\n        case 1:\n          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), \"body\"]);\n          if (data.CreateTime != null) {\n            contents.CreateTime = __expectNonNull(__parseRfc3339DateTime(data.CreateTime));\n          }\n          if (data.DataSource != null) {\n            contents.DataSource = __expectString(data.DataSource);\n          }\n          if (data.DataSourceConfiguration != null) {\n            contents.DataSourceConfiguration = deserializeAws_restJson1DataSourceConfiguration(data.DataSourceConfiguration, context);\n          }\n          if (data.Description != null) {\n            contents.Description = __expectString(data.Description);\n          }\n          if (data.IndexArn != null) {\n            contents.IndexArn = __expectString(data.IndexArn);\n          }\n          if (data.IndexName != null) {\n            contents.IndexName = __expectString(data.IndexName);\n          }\n          if (data.PricingPlan != null) {\n            contents.PricingPlan = __expectString(data.PricingPlan);\n          }\n          if (data.Tags != null) {\n            contents.Tags = deserializeAws_restJson1TagMap(data.Tags, context);\n          }\n          if (data.UpdateTime != null) {\n            contents.UpdateTime = __expectNonNull(__parseRfc3339DateTime(data.UpdateTime));\n          }\n          return [2, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1DescribePlaceIndexCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3, 2];\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3, 2];\n            case \"InternalServerException\":\n              return [3, 4];\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3, 4];\n            case \"ResourceNotFoundException\":\n              return [3, 6];\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3, 6];\n            case \"ThrottlingException\":\n              return [3, 8];\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3, 8];\n            case \"ValidationException\":\n              return [3, 10];\n            case \"com.amazonaws.location#ValidationException\":\n              return [3, 10];\n          }\n          return [3, 12];\n        case 2:\n          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n        case 11:\n          throw _d.sent();\n        case 12:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 13;\n        case 13:\n          return [2];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1DescribeRouteCalculatorCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, _a, _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2, deserializeAws_restJson1DescribeRouteCalculatorCommandError(output, context)];\n          }\n          contents = map({\n            $metadata: deserializeMetadata(output)\n          });\n          _a = __expectNonNull;\n          _b = __expectObject;\n          return [4, parseBody(output.body, context)];\n        case 1:\n          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), \"body\"]);\n          if (data.CalculatorArn != null) {\n            contents.CalculatorArn = __expectString(data.CalculatorArn);\n          }\n          if (data.CalculatorName != null) {\n            contents.CalculatorName = __expectString(data.CalculatorName);\n          }\n          if (data.CreateTime != null) {\n            contents.CreateTime = __expectNonNull(__parseRfc3339DateTime(data.CreateTime));\n          }\n          if (data.DataSource != null) {\n            contents.DataSource = __expectString(data.DataSource);\n          }\n          if (data.Description != null) {\n            contents.Description = __expectString(data.Description);\n          }\n          if (data.PricingPlan != null) {\n            contents.PricingPlan = __expectString(data.PricingPlan);\n          }\n          if (data.Tags != null) {\n            contents.Tags = deserializeAws_restJson1TagMap(data.Tags, context);\n          }\n          if (data.UpdateTime != null) {\n            contents.UpdateTime = __expectNonNull(__parseRfc3339DateTime(data.UpdateTime));\n          }\n          return [2, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1DescribeRouteCalculatorCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3, 2];\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3, 2];\n            case \"InternalServerException\":\n              return [3, 4];\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3, 4];\n            case \"ResourceNotFoundException\":\n              return [3, 6];\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3, 6];\n            case \"ThrottlingException\":\n              return [3, 8];\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3, 8];\n            case \"ValidationException\":\n              return [3, 10];\n            case \"com.amazonaws.location#ValidationException\":\n              return [3, 10];\n          }\n          return [3, 12];\n        case 2:\n          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n        case 11:\n          throw _d.sent();\n        case 12:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 13;\n        case 13:\n          return [2];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1DescribeTrackerCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, _a, _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2, deserializeAws_restJson1DescribeTrackerCommandError(output, context)];\n          }\n          contents = map({\n            $metadata: deserializeMetadata(output)\n          });\n          _a = __expectNonNull;\n          _b = __expectObject;\n          return [4, parseBody(output.body, context)];\n        case 1:\n          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), \"body\"]);\n          if (data.CreateTime != null) {\n            contents.CreateTime = __expectNonNull(__parseRfc3339DateTime(data.CreateTime));\n          }\n          if (data.Description != null) {\n            contents.Description = __expectString(data.Description);\n          }\n          if (data.KmsKeyId != null) {\n            contents.KmsKeyId = __expectString(data.KmsKeyId);\n          }\n          if (data.PositionFiltering != null) {\n            contents.PositionFiltering = __expectString(data.PositionFiltering);\n          }\n          if (data.PricingPlan != null) {\n            contents.PricingPlan = __expectString(data.PricingPlan);\n          }\n          if (data.PricingPlanDataSource != null) {\n            contents.PricingPlanDataSource = __expectString(data.PricingPlanDataSource);\n          }\n          if (data.Tags != null) {\n            contents.Tags = deserializeAws_restJson1TagMap(data.Tags, context);\n          }\n          if (data.TrackerArn != null) {\n            contents.TrackerArn = __expectString(data.TrackerArn);\n          }\n          if (data.TrackerName != null) {\n            contents.TrackerName = __expectString(data.TrackerName);\n          }\n          if (data.UpdateTime != null) {\n            contents.UpdateTime = __expectNonNull(__parseRfc3339DateTime(data.UpdateTime));\n          }\n          return [2, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1DescribeTrackerCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3, 2];\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3, 2];\n            case \"InternalServerException\":\n              return [3, 4];\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3, 4];\n            case \"ResourceNotFoundException\":\n              return [3, 6];\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3, 6];\n            case \"ThrottlingException\":\n              return [3, 8];\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3, 8];\n            case \"ValidationException\":\n              return [3, 10];\n            case \"com.amazonaws.location#ValidationException\":\n              return [3, 10];\n          }\n          return [3, 12];\n        case 2:\n          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n        case 11:\n          throw _d.sent();\n        case 12:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 13;\n        case 13:\n          return [2];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1DisassociateTrackerConsumerCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2, deserializeAws_restJson1DisassociateTrackerConsumerCommandError(output, context)];\n          }\n          contents = map({\n            $metadata: deserializeMetadata(output)\n          });\n          return [4, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1DisassociateTrackerConsumerCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3, 2];\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3, 2];\n            case \"InternalServerException\":\n              return [3, 4];\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3, 4];\n            case \"ResourceNotFoundException\":\n              return [3, 6];\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3, 6];\n            case \"ThrottlingException\":\n              return [3, 8];\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3, 8];\n            case \"ValidationException\":\n              return [3, 10];\n            case \"com.amazonaws.location#ValidationException\":\n              return [3, 10];\n          }\n          return [3, 12];\n        case 2:\n          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n        case 11:\n          throw _d.sent();\n        case 12:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 13;\n        case 13:\n          return [2];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1GetDevicePositionCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, _a, _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2, deserializeAws_restJson1GetDevicePositionCommandError(output, context)];\n          }\n          contents = map({\n            $metadata: deserializeMetadata(output)\n          });\n          _a = __expectNonNull;\n          _b = __expectObject;\n          return [4, parseBody(output.body, context)];\n        case 1:\n          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), \"body\"]);\n          if (data.Accuracy != null) {\n            contents.Accuracy = deserializeAws_restJson1PositionalAccuracy(data.Accuracy, context);\n          }\n          if (data.DeviceId != null) {\n            contents.DeviceId = __expectString(data.DeviceId);\n          }\n          if (data.Position != null) {\n            contents.Position = deserializeAws_restJson1Position(data.Position, context);\n          }\n          if (data.PositionProperties != null) {\n            contents.PositionProperties = deserializeAws_restJson1PropertyMap(data.PositionProperties, context);\n          }\n          if (data.ReceivedTime != null) {\n            contents.ReceivedTime = __expectNonNull(__parseRfc3339DateTime(data.ReceivedTime));\n          }\n          if (data.SampleTime != null) {\n            contents.SampleTime = __expectNonNull(__parseRfc3339DateTime(data.SampleTime));\n          }\n          return [2, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1GetDevicePositionCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3, 2];\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3, 2];\n            case \"InternalServerException\":\n              return [3, 4];\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3, 4];\n            case \"ResourceNotFoundException\":\n              return [3, 6];\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3, 6];\n            case \"ThrottlingException\":\n              return [3, 8];\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3, 8];\n            case \"ValidationException\":\n              return [3, 10];\n            case \"com.amazonaws.location#ValidationException\":\n              return [3, 10];\n          }\n          return [3, 12];\n        case 2:\n          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n        case 11:\n          throw _d.sent();\n        case 12:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 13;\n        case 13:\n          return [2];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1GetDevicePositionHistoryCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, _a, _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2, deserializeAws_restJson1GetDevicePositionHistoryCommandError(output, context)];\n          }\n          contents = map({\n            $metadata: deserializeMetadata(output)\n          });\n          _a = __expectNonNull;\n          _b = __expectObject;\n          return [4, parseBody(output.body, context)];\n        case 1:\n          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), \"body\"]);\n          if (data.DevicePositions != null) {\n            contents.DevicePositions = deserializeAws_restJson1DevicePositionList(data.DevicePositions, context);\n          }\n          if (data.NextToken != null) {\n            contents.NextToken = __expectString(data.NextToken);\n          }\n          return [2, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1GetDevicePositionHistoryCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3, 2];\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3, 2];\n            case \"InternalServerException\":\n              return [3, 4];\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3, 4];\n            case \"ResourceNotFoundException\":\n              return [3, 6];\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3, 6];\n            case \"ThrottlingException\":\n              return [3, 8];\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3, 8];\n            case \"ValidationException\":\n              return [3, 10];\n            case \"com.amazonaws.location#ValidationException\":\n              return [3, 10];\n          }\n          return [3, 12];\n        case 2:\n          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n        case 11:\n          throw _d.sent();\n        case 12:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 13;\n        case 13:\n          return [2];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1GetGeofenceCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, _a, _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2, deserializeAws_restJson1GetGeofenceCommandError(output, context)];\n          }\n          contents = map({\n            $metadata: deserializeMetadata(output)\n          });\n          _a = __expectNonNull;\n          _b = __expectObject;\n          return [4, parseBody(output.body, context)];\n        case 1:\n          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), \"body\"]);\n          if (data.CreateTime != null) {\n            contents.CreateTime = __expectNonNull(__parseRfc3339DateTime(data.CreateTime));\n          }\n          if (data.GeofenceId != null) {\n            contents.GeofenceId = __expectString(data.GeofenceId);\n          }\n          if (data.Geometry != null) {\n            contents.Geometry = deserializeAws_restJson1GeofenceGeometry(data.Geometry, context);\n          }\n          if (data.Status != null) {\n            contents.Status = __expectString(data.Status);\n          }\n          if (data.UpdateTime != null) {\n            contents.UpdateTime = __expectNonNull(__parseRfc3339DateTime(data.UpdateTime));\n          }\n          return [2, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1GetGeofenceCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3, 2];\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3, 2];\n            case \"InternalServerException\":\n              return [3, 4];\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3, 4];\n            case \"ResourceNotFoundException\":\n              return [3, 6];\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3, 6];\n            case \"ThrottlingException\":\n              return [3, 8];\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3, 8];\n            case \"ValidationException\":\n              return [3, 10];\n            case \"com.amazonaws.location#ValidationException\":\n              return [3, 10];\n          }\n          return [3, 12];\n        case 2:\n          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n        case 11:\n          throw _d.sent();\n        case 12:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 13;\n        case 13:\n          return [2];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1GetMapGlyphsCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2, deserializeAws_restJson1GetMapGlyphsCommandError(output, context)];\n          }\n          contents = map({\n            $metadata: deserializeMetadata(output),\n            ContentType: [, output.headers[\"content-type\"]]\n          });\n          return [4, collectBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          contents.Blob = data;\n          return [2, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1GetMapGlyphsCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3, 2];\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3, 2];\n            case \"InternalServerException\":\n              return [3, 4];\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3, 4];\n            case \"ResourceNotFoundException\":\n              return [3, 6];\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3, 6];\n            case \"ThrottlingException\":\n              return [3, 8];\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3, 8];\n            case \"ValidationException\":\n              return [3, 10];\n            case \"com.amazonaws.location#ValidationException\":\n              return [3, 10];\n          }\n          return [3, 12];\n        case 2:\n          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n        case 11:\n          throw _d.sent();\n        case 12:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 13;\n        case 13:\n          return [2];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1GetMapSpritesCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2, deserializeAws_restJson1GetMapSpritesCommandError(output, context)];\n          }\n          contents = map({\n            $metadata: deserializeMetadata(output),\n            ContentType: [, output.headers[\"content-type\"]]\n          });\n          return [4, collectBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          contents.Blob = data;\n          return [2, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1GetMapSpritesCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3, 2];\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3, 2];\n            case \"InternalServerException\":\n              return [3, 4];\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3, 4];\n            case \"ResourceNotFoundException\":\n              return [3, 6];\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3, 6];\n            case \"ThrottlingException\":\n              return [3, 8];\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3, 8];\n            case \"ValidationException\":\n              return [3, 10];\n            case \"com.amazonaws.location#ValidationException\":\n              return [3, 10];\n          }\n          return [3, 12];\n        case 2:\n          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n        case 11:\n          throw _d.sent();\n        case 12:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 13;\n        case 13:\n          return [2];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1GetMapStyleDescriptorCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2, deserializeAws_restJson1GetMapStyleDescriptorCommandError(output, context)];\n          }\n          contents = map({\n            $metadata: deserializeMetadata(output),\n            ContentType: [, output.headers[\"content-type\"]]\n          });\n          return [4, collectBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          contents.Blob = data;\n          return [2, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1GetMapStyleDescriptorCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3, 2];\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3, 2];\n            case \"InternalServerException\":\n              return [3, 4];\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3, 4];\n            case \"ResourceNotFoundException\":\n              return [3, 6];\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3, 6];\n            case \"ThrottlingException\":\n              return [3, 8];\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3, 8];\n            case \"ValidationException\":\n              return [3, 10];\n            case \"com.amazonaws.location#ValidationException\":\n              return [3, 10];\n          }\n          return [3, 12];\n        case 2:\n          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n        case 11:\n          throw _d.sent();\n        case 12:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 13;\n        case 13:\n          return [2];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1GetMapTileCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2, deserializeAws_restJson1GetMapTileCommandError(output, context)];\n          }\n          contents = map({\n            $metadata: deserializeMetadata(output),\n            ContentType: [, output.headers[\"content-type\"]]\n          });\n          return [4, collectBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          contents.Blob = data;\n          return [2, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1GetMapTileCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3, 2];\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3, 2];\n            case \"InternalServerException\":\n              return [3, 4];\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3, 4];\n            case \"ResourceNotFoundException\":\n              return [3, 6];\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3, 6];\n            case \"ThrottlingException\":\n              return [3, 8];\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3, 8];\n            case \"ValidationException\":\n              return [3, 10];\n            case \"com.amazonaws.location#ValidationException\":\n              return [3, 10];\n          }\n          return [3, 12];\n        case 2:\n          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n        case 11:\n          throw _d.sent();\n        case 12:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 13;\n        case 13:\n          return [2];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1GetPlaceCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, _a, _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2, deserializeAws_restJson1GetPlaceCommandError(output, context)];\n          }\n          contents = map({\n            $metadata: deserializeMetadata(output)\n          });\n          _a = __expectNonNull;\n          _b = __expectObject;\n          return [4, parseBody(output.body, context)];\n        case 1:\n          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), \"body\"]);\n          if (data.Place != null) {\n            contents.Place = deserializeAws_restJson1Place(data.Place, context);\n          }\n          return [2, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1GetPlaceCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3, 2];\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3, 2];\n            case \"InternalServerException\":\n              return [3, 4];\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3, 4];\n            case \"ResourceNotFoundException\":\n              return [3, 6];\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3, 6];\n            case \"ThrottlingException\":\n              return [3, 8];\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3, 8];\n            case \"ValidationException\":\n              return [3, 10];\n            case \"com.amazonaws.location#ValidationException\":\n              return [3, 10];\n          }\n          return [3, 12];\n        case 2:\n          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n        case 11:\n          throw _d.sent();\n        case 12:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 13;\n        case 13:\n          return [2];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1ListDevicePositionsCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, _a, _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2, deserializeAws_restJson1ListDevicePositionsCommandError(output, context)];\n          }\n          contents = map({\n            $metadata: deserializeMetadata(output)\n          });\n          _a = __expectNonNull;\n          _b = __expectObject;\n          return [4, parseBody(output.body, context)];\n        case 1:\n          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), \"body\"]);\n          if (data.Entries != null) {\n            contents.Entries = deserializeAws_restJson1ListDevicePositionsResponseEntryList(data.Entries, context);\n          }\n          if (data.NextToken != null) {\n            contents.NextToken = __expectString(data.NextToken);\n          }\n          return [2, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1ListDevicePositionsCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3, 2];\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3, 2];\n            case \"InternalServerException\":\n              return [3, 4];\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3, 4];\n            case \"ThrottlingException\":\n              return [3, 6];\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3, 6];\n            case \"ValidationException\":\n              return [3, 8];\n            case \"com.amazonaws.location#ValidationException\":\n              return [3, 8];\n          }\n          return [3, 10];\n        case 2:\n          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 11;\n        case 11:\n          return [2];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1ListGeofenceCollectionsCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, _a, _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2, deserializeAws_restJson1ListGeofenceCollectionsCommandError(output, context)];\n          }\n          contents = map({\n            $metadata: deserializeMetadata(output)\n          });\n          _a = __expectNonNull;\n          _b = __expectObject;\n          return [4, parseBody(output.body, context)];\n        case 1:\n          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), \"body\"]);\n          if (data.Entries != null) {\n            contents.Entries = deserializeAws_restJson1ListGeofenceCollectionsResponseEntryList(data.Entries, context);\n          }\n          if (data.NextToken != null) {\n            contents.NextToken = __expectString(data.NextToken);\n          }\n          return [2, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1ListGeofenceCollectionsCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3, 2];\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3, 2];\n            case \"InternalServerException\":\n              return [3, 4];\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3, 4];\n            case \"ThrottlingException\":\n              return [3, 6];\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3, 6];\n            case \"ValidationException\":\n              return [3, 8];\n            case \"com.amazonaws.location#ValidationException\":\n              return [3, 8];\n          }\n          return [3, 10];\n        case 2:\n          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 11;\n        case 11:\n          return [2];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1ListGeofencesCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, _a, _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2, deserializeAws_restJson1ListGeofencesCommandError(output, context)];\n          }\n          contents = map({\n            $metadata: deserializeMetadata(output)\n          });\n          _a = __expectNonNull;\n          _b = __expectObject;\n          return [4, parseBody(output.body, context)];\n        case 1:\n          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), \"body\"]);\n          if (data.Entries != null) {\n            contents.Entries = deserializeAws_restJson1ListGeofenceResponseEntryList(data.Entries, context);\n          }\n          if (data.NextToken != null) {\n            contents.NextToken = __expectString(data.NextToken);\n          }\n          return [2, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1ListGeofencesCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3, 2];\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3, 2];\n            case \"InternalServerException\":\n              return [3, 4];\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3, 4];\n            case \"ResourceNotFoundException\":\n              return [3, 6];\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3, 6];\n            case \"ThrottlingException\":\n              return [3, 8];\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3, 8];\n            case \"ValidationException\":\n              return [3, 10];\n            case \"com.amazonaws.location#ValidationException\":\n              return [3, 10];\n          }\n          return [3, 12];\n        case 2:\n          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n        case 11:\n          throw _d.sent();\n        case 12:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 13;\n        case 13:\n          return [2];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1ListMapsCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, _a, _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2, deserializeAws_restJson1ListMapsCommandError(output, context)];\n          }\n          contents = map({\n            $metadata: deserializeMetadata(output)\n          });\n          _a = __expectNonNull;\n          _b = __expectObject;\n          return [4, parseBody(output.body, context)];\n        case 1:\n          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), \"body\"]);\n          if (data.Entries != null) {\n            contents.Entries = deserializeAws_restJson1ListMapsResponseEntryList(data.Entries, context);\n          }\n          if (data.NextToken != null) {\n            contents.NextToken = __expectString(data.NextToken);\n          }\n          return [2, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1ListMapsCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3, 2];\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3, 2];\n            case \"InternalServerException\":\n              return [3, 4];\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3, 4];\n            case \"ThrottlingException\":\n              return [3, 6];\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3, 6];\n            case \"ValidationException\":\n              return [3, 8];\n            case \"com.amazonaws.location#ValidationException\":\n              return [3, 8];\n          }\n          return [3, 10];\n        case 2:\n          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 11;\n        case 11:\n          return [2];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1ListPlaceIndexesCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, _a, _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2, deserializeAws_restJson1ListPlaceIndexesCommandError(output, context)];\n          }\n          contents = map({\n            $metadata: deserializeMetadata(output)\n          });\n          _a = __expectNonNull;\n          _b = __expectObject;\n          return [4, parseBody(output.body, context)];\n        case 1:\n          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), \"body\"]);\n          if (data.Entries != null) {\n            contents.Entries = deserializeAws_restJson1ListPlaceIndexesResponseEntryList(data.Entries, context);\n          }\n          if (data.NextToken != null) {\n            contents.NextToken = __expectString(data.NextToken);\n          }\n          return [2, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1ListPlaceIndexesCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3, 2];\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3, 2];\n            case \"InternalServerException\":\n              return [3, 4];\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3, 4];\n            case \"ThrottlingException\":\n              return [3, 6];\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3, 6];\n            case \"ValidationException\":\n              return [3, 8];\n            case \"com.amazonaws.location#ValidationException\":\n              return [3, 8];\n          }\n          return [3, 10];\n        case 2:\n          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 11;\n        case 11:\n          return [2];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1ListRouteCalculatorsCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, _a, _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2, deserializeAws_restJson1ListRouteCalculatorsCommandError(output, context)];\n          }\n          contents = map({\n            $metadata: deserializeMetadata(output)\n          });\n          _a = __expectNonNull;\n          _b = __expectObject;\n          return [4, parseBody(output.body, context)];\n        case 1:\n          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), \"body\"]);\n          if (data.Entries != null) {\n            contents.Entries = deserializeAws_restJson1ListRouteCalculatorsResponseEntryList(data.Entries, context);\n          }\n          if (data.NextToken != null) {\n            contents.NextToken = __expectString(data.NextToken);\n          }\n          return [2, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1ListRouteCalculatorsCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3, 2];\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3, 2];\n            case \"InternalServerException\":\n              return [3, 4];\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3, 4];\n            case \"ThrottlingException\":\n              return [3, 6];\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3, 6];\n            case \"ValidationException\":\n              return [3, 8];\n            case \"com.amazonaws.location#ValidationException\":\n              return [3, 8];\n          }\n          return [3, 10];\n        case 2:\n          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 11;\n        case 11:\n          return [2];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1ListTagsForResourceCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, _a, _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2, deserializeAws_restJson1ListTagsForResourceCommandError(output, context)];\n          }\n          contents = map({\n            $metadata: deserializeMetadata(output)\n          });\n          _a = __expectNonNull;\n          _b = __expectObject;\n          return [4, parseBody(output.body, context)];\n        case 1:\n          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), \"body\"]);\n          if (data.Tags != null) {\n            contents.Tags = deserializeAws_restJson1TagMap(data.Tags, context);\n          }\n          return [2, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1ListTagsForResourceCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3, 2];\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3, 2];\n            case \"InternalServerException\":\n              return [3, 4];\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3, 4];\n            case \"ResourceNotFoundException\":\n              return [3, 6];\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3, 6];\n            case \"ThrottlingException\":\n              return [3, 8];\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3, 8];\n            case \"ValidationException\":\n              return [3, 10];\n            case \"com.amazonaws.location#ValidationException\":\n              return [3, 10];\n          }\n          return [3, 12];\n        case 2:\n          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n        case 11:\n          throw _d.sent();\n        case 12:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 13;\n        case 13:\n          return [2];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1ListTrackerConsumersCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, _a, _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2, deserializeAws_restJson1ListTrackerConsumersCommandError(output, context)];\n          }\n          contents = map({\n            $metadata: deserializeMetadata(output)\n          });\n          _a = __expectNonNull;\n          _b = __expectObject;\n          return [4, parseBody(output.body, context)];\n        case 1:\n          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), \"body\"]);\n          if (data.ConsumerArns != null) {\n            contents.ConsumerArns = deserializeAws_restJson1ArnList(data.ConsumerArns, context);\n          }\n          if (data.NextToken != null) {\n            contents.NextToken = __expectString(data.NextToken);\n          }\n          return [2, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1ListTrackerConsumersCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3, 2];\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3, 2];\n            case \"InternalServerException\":\n              return [3, 4];\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3, 4];\n            case \"ResourceNotFoundException\":\n              return [3, 6];\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3, 6];\n            case \"ThrottlingException\":\n              return [3, 8];\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3, 8];\n            case \"ValidationException\":\n              return [3, 10];\n            case \"com.amazonaws.location#ValidationException\":\n              return [3, 10];\n          }\n          return [3, 12];\n        case 2:\n          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n        case 11:\n          throw _d.sent();\n        case 12:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 13;\n        case 13:\n          return [2];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1ListTrackersCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, _a, _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2, deserializeAws_restJson1ListTrackersCommandError(output, context)];\n          }\n          contents = map({\n            $metadata: deserializeMetadata(output)\n          });\n          _a = __expectNonNull;\n          _b = __expectObject;\n          return [4, parseBody(output.body, context)];\n        case 1:\n          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), \"body\"]);\n          if (data.Entries != null) {\n            contents.Entries = deserializeAws_restJson1ListTrackersResponseEntryList(data.Entries, context);\n          }\n          if (data.NextToken != null) {\n            contents.NextToken = __expectString(data.NextToken);\n          }\n          return [2, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1ListTrackersCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3, 2];\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3, 2];\n            case \"InternalServerException\":\n              return [3, 4];\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3, 4];\n            case \"ThrottlingException\":\n              return [3, 6];\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3, 6];\n            case \"ValidationException\":\n              return [3, 8];\n            case \"com.amazonaws.location#ValidationException\":\n              return [3, 8];\n          }\n          return [3, 10];\n        case 2:\n          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 11;\n        case 11:\n          return [2];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1PutGeofenceCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, _a, _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2, deserializeAws_restJson1PutGeofenceCommandError(output, context)];\n          }\n          contents = map({\n            $metadata: deserializeMetadata(output)\n          });\n          _a = __expectNonNull;\n          _b = __expectObject;\n          return [4, parseBody(output.body, context)];\n        case 1:\n          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), \"body\"]);\n          if (data.CreateTime != null) {\n            contents.CreateTime = __expectNonNull(__parseRfc3339DateTime(data.CreateTime));\n          }\n          if (data.GeofenceId != null) {\n            contents.GeofenceId = __expectString(data.GeofenceId);\n          }\n          if (data.UpdateTime != null) {\n            contents.UpdateTime = __expectNonNull(__parseRfc3339DateTime(data.UpdateTime));\n          }\n          return [2, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1PutGeofenceCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3, 2];\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3, 2];\n            case \"ConflictException\":\n              return [3, 4];\n            case \"com.amazonaws.location#ConflictException\":\n              return [3, 4];\n            case \"InternalServerException\":\n              return [3, 6];\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3, 6];\n            case \"ResourceNotFoundException\":\n              return [3, 8];\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3, 8];\n            case \"ThrottlingException\":\n              return [3, 10];\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3, 10];\n            case \"ValidationException\":\n              return [3, 12];\n            case \"com.amazonaws.location#ValidationException\":\n              return [3, 12];\n          }\n          return [3, 14];\n        case 2:\n          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n        case 11:\n          throw _d.sent();\n        case 12:\n          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n        case 13:\n          throw _d.sent();\n        case 14:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 15;\n        case 15:\n          return [2];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1SearchPlaceIndexForPositionCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, _a, _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2, deserializeAws_restJson1SearchPlaceIndexForPositionCommandError(output, context)];\n          }\n          contents = map({\n            $metadata: deserializeMetadata(output)\n          });\n          _a = __expectNonNull;\n          _b = __expectObject;\n          return [4, parseBody(output.body, context)];\n        case 1:\n          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), \"body\"]);\n          if (data.Results != null) {\n            contents.Results = deserializeAws_restJson1SearchForPositionResultList(data.Results, context);\n          }\n          if (data.Summary != null) {\n            contents.Summary = deserializeAws_restJson1SearchPlaceIndexForPositionSummary(data.Summary, context);\n          }\n          return [2, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1SearchPlaceIndexForPositionCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3, 2];\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3, 2];\n            case \"InternalServerException\":\n              return [3, 4];\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3, 4];\n            case \"ResourceNotFoundException\":\n              return [3, 6];\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3, 6];\n            case \"ThrottlingException\":\n              return [3, 8];\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3, 8];\n            case \"ValidationException\":\n              return [3, 10];\n            case \"com.amazonaws.location#ValidationException\":\n              return [3, 10];\n          }\n          return [3, 12];\n        case 2:\n          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n        case 11:\n          throw _d.sent();\n        case 12:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 13;\n        case 13:\n          return [2];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1SearchPlaceIndexForSuggestionsCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, _a, _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2, deserializeAws_restJson1SearchPlaceIndexForSuggestionsCommandError(output, context)];\n          }\n          contents = map({\n            $metadata: deserializeMetadata(output)\n          });\n          _a = __expectNonNull;\n          _b = __expectObject;\n          return [4, parseBody(output.body, context)];\n        case 1:\n          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), \"body\"]);\n          if (data.Results != null) {\n            contents.Results = deserializeAws_restJson1SearchForSuggestionsResultList(data.Results, context);\n          }\n          if (data.Summary != null) {\n            contents.Summary = deserializeAws_restJson1SearchPlaceIndexForSuggestionsSummary(data.Summary, context);\n          }\n          return [2, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1SearchPlaceIndexForSuggestionsCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3, 2];\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3, 2];\n            case \"InternalServerException\":\n              return [3, 4];\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3, 4];\n            case \"ResourceNotFoundException\":\n              return [3, 6];\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3, 6];\n            case \"ThrottlingException\":\n              return [3, 8];\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3, 8];\n            case \"ValidationException\":\n              return [3, 10];\n            case \"com.amazonaws.location#ValidationException\":\n              return [3, 10];\n          }\n          return [3, 12];\n        case 2:\n          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n        case 11:\n          throw _d.sent();\n        case 12:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 13;\n        case 13:\n          return [2];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1SearchPlaceIndexForTextCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, _a, _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2, deserializeAws_restJson1SearchPlaceIndexForTextCommandError(output, context)];\n          }\n          contents = map({\n            $metadata: deserializeMetadata(output)\n          });\n          _a = __expectNonNull;\n          _b = __expectObject;\n          return [4, parseBody(output.body, context)];\n        case 1:\n          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), \"body\"]);\n          if (data.Results != null) {\n            contents.Results = deserializeAws_restJson1SearchForTextResultList(data.Results, context);\n          }\n          if (data.Summary != null) {\n            contents.Summary = deserializeAws_restJson1SearchPlaceIndexForTextSummary(data.Summary, context);\n          }\n          return [2, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1SearchPlaceIndexForTextCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3, 2];\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3, 2];\n            case \"InternalServerException\":\n              return [3, 4];\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3, 4];\n            case \"ResourceNotFoundException\":\n              return [3, 6];\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3, 6];\n            case \"ThrottlingException\":\n              return [3, 8];\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3, 8];\n            case \"ValidationException\":\n              return [3, 10];\n            case \"com.amazonaws.location#ValidationException\":\n              return [3, 10];\n          }\n          return [3, 12];\n        case 2:\n          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n        case 11:\n          throw _d.sent();\n        case 12:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 13;\n        case 13:\n          return [2];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1TagResourceCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2, deserializeAws_restJson1TagResourceCommandError(output, context)];\n          }\n          contents = map({\n            $metadata: deserializeMetadata(output)\n          });\n          return [4, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1TagResourceCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3, 2];\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3, 2];\n            case \"InternalServerException\":\n              return [3, 4];\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3, 4];\n            case \"ResourceNotFoundException\":\n              return [3, 6];\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3, 6];\n            case \"ThrottlingException\":\n              return [3, 8];\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3, 8];\n            case \"ValidationException\":\n              return [3, 10];\n            case \"com.amazonaws.location#ValidationException\":\n              return [3, 10];\n          }\n          return [3, 12];\n        case 2:\n          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n        case 11:\n          throw _d.sent();\n        case 12:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 13;\n        case 13:\n          return [2];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1UntagResourceCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2, deserializeAws_restJson1UntagResourceCommandError(output, context)];\n          }\n          contents = map({\n            $metadata: deserializeMetadata(output)\n          });\n          return [4, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1UntagResourceCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3, 2];\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3, 2];\n            case \"InternalServerException\":\n              return [3, 4];\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3, 4];\n            case \"ResourceNotFoundException\":\n              return [3, 6];\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3, 6];\n            case \"ThrottlingException\":\n              return [3, 8];\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3, 8];\n            case \"ValidationException\":\n              return [3, 10];\n            case \"com.amazonaws.location#ValidationException\":\n              return [3, 10];\n          }\n          return [3, 12];\n        case 2:\n          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n        case 11:\n          throw _d.sent();\n        case 12:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 13;\n        case 13:\n          return [2];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1UpdateGeofenceCollectionCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, _a, _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2, deserializeAws_restJson1UpdateGeofenceCollectionCommandError(output, context)];\n          }\n          contents = map({\n            $metadata: deserializeMetadata(output)\n          });\n          _a = __expectNonNull;\n          _b = __expectObject;\n          return [4, parseBody(output.body, context)];\n        case 1:\n          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), \"body\"]);\n          if (data.CollectionArn != null) {\n            contents.CollectionArn = __expectString(data.CollectionArn);\n          }\n          if (data.CollectionName != null) {\n            contents.CollectionName = __expectString(data.CollectionName);\n          }\n          if (data.UpdateTime != null) {\n            contents.UpdateTime = __expectNonNull(__parseRfc3339DateTime(data.UpdateTime));\n          }\n          return [2, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1UpdateGeofenceCollectionCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3, 2];\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3, 2];\n            case \"InternalServerException\":\n              return [3, 4];\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3, 4];\n            case \"ResourceNotFoundException\":\n              return [3, 6];\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3, 6];\n            case \"ThrottlingException\":\n              return [3, 8];\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3, 8];\n            case \"ValidationException\":\n              return [3, 10];\n            case \"com.amazonaws.location#ValidationException\":\n              return [3, 10];\n          }\n          return [3, 12];\n        case 2:\n          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n        case 11:\n          throw _d.sent();\n        case 12:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 13;\n        case 13:\n          return [2];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1UpdateMapCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, _a, _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2, deserializeAws_restJson1UpdateMapCommandError(output, context)];\n          }\n          contents = map({\n            $metadata: deserializeMetadata(output)\n          });\n          _a = __expectNonNull;\n          _b = __expectObject;\n          return [4, parseBody(output.body, context)];\n        case 1:\n          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), \"body\"]);\n          if (data.MapArn != null) {\n            contents.MapArn = __expectString(data.MapArn);\n          }\n          if (data.MapName != null) {\n            contents.MapName = __expectString(data.MapName);\n          }\n          if (data.UpdateTime != null) {\n            contents.UpdateTime = __expectNonNull(__parseRfc3339DateTime(data.UpdateTime));\n          }\n          return [2, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1UpdateMapCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3, 2];\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3, 2];\n            case \"InternalServerException\":\n              return [3, 4];\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3, 4];\n            case \"ResourceNotFoundException\":\n              return [3, 6];\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3, 6];\n            case \"ThrottlingException\":\n              return [3, 8];\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3, 8];\n            case \"ValidationException\":\n              return [3, 10];\n            case \"com.amazonaws.location#ValidationException\":\n              return [3, 10];\n          }\n          return [3, 12];\n        case 2:\n          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n        case 11:\n          throw _d.sent();\n        case 12:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 13;\n        case 13:\n          return [2];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1UpdatePlaceIndexCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, _a, _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2, deserializeAws_restJson1UpdatePlaceIndexCommandError(output, context)];\n          }\n          contents = map({\n            $metadata: deserializeMetadata(output)\n          });\n          _a = __expectNonNull;\n          _b = __expectObject;\n          return [4, parseBody(output.body, context)];\n        case 1:\n          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), \"body\"]);\n          if (data.IndexArn != null) {\n            contents.IndexArn = __expectString(data.IndexArn);\n          }\n          if (data.IndexName != null) {\n            contents.IndexName = __expectString(data.IndexName);\n          }\n          if (data.UpdateTime != null) {\n            contents.UpdateTime = __expectNonNull(__parseRfc3339DateTime(data.UpdateTime));\n          }\n          return [2, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1UpdatePlaceIndexCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3, 2];\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3, 2];\n            case \"InternalServerException\":\n              return [3, 4];\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3, 4];\n            case \"ResourceNotFoundException\":\n              return [3, 6];\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3, 6];\n            case \"ThrottlingException\":\n              return [3, 8];\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3, 8];\n            case \"ValidationException\":\n              return [3, 10];\n            case \"com.amazonaws.location#ValidationException\":\n              return [3, 10];\n          }\n          return [3, 12];\n        case 2:\n          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n        case 11:\n          throw _d.sent();\n        case 12:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 13;\n        case 13:\n          return [2];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1UpdateRouteCalculatorCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, _a, _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2, deserializeAws_restJson1UpdateRouteCalculatorCommandError(output, context)];\n          }\n          contents = map({\n            $metadata: deserializeMetadata(output)\n          });\n          _a = __expectNonNull;\n          _b = __expectObject;\n          return [4, parseBody(output.body, context)];\n        case 1:\n          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), \"body\"]);\n          if (data.CalculatorArn != null) {\n            contents.CalculatorArn = __expectString(data.CalculatorArn);\n          }\n          if (data.CalculatorName != null) {\n            contents.CalculatorName = __expectString(data.CalculatorName);\n          }\n          if (data.UpdateTime != null) {\n            contents.UpdateTime = __expectNonNull(__parseRfc3339DateTime(data.UpdateTime));\n          }\n          return [2, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1UpdateRouteCalculatorCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3, 2];\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3, 2];\n            case \"InternalServerException\":\n              return [3, 4];\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3, 4];\n            case \"ResourceNotFoundException\":\n              return [3, 6];\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3, 6];\n            case \"ThrottlingException\":\n              return [3, 8];\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3, 8];\n            case \"ValidationException\":\n              return [3, 10];\n            case \"com.amazonaws.location#ValidationException\":\n              return [3, 10];\n          }\n          return [3, 12];\n        case 2:\n          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n        case 11:\n          throw _d.sent();\n        case 12:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 13;\n        case 13:\n          return [2];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1UpdateTrackerCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, _a, _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2, deserializeAws_restJson1UpdateTrackerCommandError(output, context)];\n          }\n          contents = map({\n            $metadata: deserializeMetadata(output)\n          });\n          _a = __expectNonNull;\n          _b = __expectObject;\n          return [4, parseBody(output.body, context)];\n        case 1:\n          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), \"body\"]);\n          if (data.TrackerArn != null) {\n            contents.TrackerArn = __expectString(data.TrackerArn);\n          }\n          if (data.TrackerName != null) {\n            contents.TrackerName = __expectString(data.TrackerName);\n          }\n          if (data.UpdateTime != null) {\n            contents.UpdateTime = __expectNonNull(__parseRfc3339DateTime(data.UpdateTime));\n          }\n          return [2, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1UpdateTrackerCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"AccessDeniedException\":\n              return [3, 2];\n            case \"com.amazonaws.location#AccessDeniedException\":\n              return [3, 2];\n            case \"InternalServerException\":\n              return [3, 4];\n            case \"com.amazonaws.location#InternalServerException\":\n              return [3, 4];\n            case \"ResourceNotFoundException\":\n              return [3, 6];\n            case \"com.amazonaws.location#ResourceNotFoundException\":\n              return [3, 6];\n            case \"ThrottlingException\":\n              return [3, 8];\n            case \"com.amazonaws.location#ThrottlingException\":\n              return [3, 8];\n            case \"ValidationException\":\n              return [3, 10];\n            case \"com.amazonaws.location#ValidationException\":\n              return [3, 10];\n          }\n          return [3, 12];\n        case 2:\n          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];\n        case 11:\n          throw _d.sent();\n        case 12:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 13;\n        case 13:\n          return [2];\n      }\n    });\n  });\n};\nvar map = __map;\nvar deserializeAws_restJson1AccessDeniedExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, exception;\n    return __generator(this, function (_a) {\n      contents = map({});\n      data = parsedOutput.body;\n      if (data.message != null) {\n        contents.Message = __expectString(data.message);\n      }\n      exception = new AccessDeniedException(__assign({\n        $metadata: deserializeMetadata(parsedOutput)\n      }, contents));\n      return [2, __decorateServiceException(exception, parsedOutput.body)];\n    });\n  });\n};\nvar deserializeAws_restJson1ConflictExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, exception;\n    return __generator(this, function (_a) {\n      contents = map({});\n      data = parsedOutput.body;\n      if (data.message != null) {\n        contents.Message = __expectString(data.message);\n      }\n      exception = new ConflictException(__assign({\n        $metadata: deserializeMetadata(parsedOutput)\n      }, contents));\n      return [2, __decorateServiceException(exception, parsedOutput.body)];\n    });\n  });\n};\nvar deserializeAws_restJson1InternalServerExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, exception;\n    return __generator(this, function (_a) {\n      contents = map({});\n      data = parsedOutput.body;\n      if (data.message != null) {\n        contents.Message = __expectString(data.message);\n      }\n      exception = new InternalServerException(__assign({\n        $metadata: deserializeMetadata(parsedOutput)\n      }, contents));\n      return [2, __decorateServiceException(exception, parsedOutput.body)];\n    });\n  });\n};\nvar deserializeAws_restJson1ResourceNotFoundExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, exception;\n    return __generator(this, function (_a) {\n      contents = map({});\n      data = parsedOutput.body;\n      if (data.message != null) {\n        contents.Message = __expectString(data.message);\n      }\n      exception = new ResourceNotFoundException(__assign({\n        $metadata: deserializeMetadata(parsedOutput)\n      }, contents));\n      return [2, __decorateServiceException(exception, parsedOutput.body)];\n    });\n  });\n};\nvar deserializeAws_restJson1ServiceQuotaExceededExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, exception;\n    return __generator(this, function (_a) {\n      contents = map({});\n      data = parsedOutput.body;\n      if (data.message != null) {\n        contents.Message = __expectString(data.message);\n      }\n      exception = new ServiceQuotaExceededException(__assign({\n        $metadata: deserializeMetadata(parsedOutput)\n      }, contents));\n      return [2, __decorateServiceException(exception, parsedOutput.body)];\n    });\n  });\n};\nvar deserializeAws_restJson1ThrottlingExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, exception;\n    return __generator(this, function (_a) {\n      contents = map({});\n      data = parsedOutput.body;\n      if (data.message != null) {\n        contents.Message = __expectString(data.message);\n      }\n      exception = new ThrottlingException(__assign({\n        $metadata: deserializeMetadata(parsedOutput)\n      }, contents));\n      return [2, __decorateServiceException(exception, parsedOutput.body)];\n    });\n  });\n};\nvar deserializeAws_restJson1ValidationExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, exception;\n    return __generator(this, function (_a) {\n      contents = map({});\n      data = parsedOutput.body;\n      if (data.fieldList != null) {\n        contents.FieldList = deserializeAws_restJson1ValidationExceptionFieldList(data.fieldList, context);\n      }\n      if (data.message != null) {\n        contents.Message = __expectString(data.message);\n      }\n      if (data.reason != null) {\n        contents.Reason = __expectString(data.reason);\n      }\n      exception = new ValidationException(__assign({\n        $metadata: deserializeMetadata(parsedOutput)\n      }, contents));\n      return [2, __decorateServiceException(exception, parsedOutput.body)];\n    });\n  });\n};\nvar serializeAws_restJson1BatchPutGeofenceRequestEntry = function (input, context) {\n  return __assign(__assign({}, input.GeofenceId != null && {\n    GeofenceId: input.GeofenceId\n  }), input.Geometry != null && {\n    Geometry: serializeAws_restJson1GeofenceGeometry(input.Geometry, context)\n  });\n};\nvar serializeAws_restJson1BatchPutGeofenceRequestEntryList = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    return serializeAws_restJson1BatchPutGeofenceRequestEntry(entry, context);\n  });\n};\nvar serializeAws_restJson1BoundingBox = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    return __serializeFloat(entry);\n  });\n};\nvar serializeAws_restJson1CalculateRouteCarModeOptions = function (input, context) {\n  return __assign(__assign({}, input.AvoidFerries != null && {\n    AvoidFerries: input.AvoidFerries\n  }), input.AvoidTolls != null && {\n    AvoidTolls: input.AvoidTolls\n  });\n};\nvar serializeAws_restJson1CalculateRouteTruckModeOptions = function (input, context) {\n  return __assign(__assign(__assign(__assign({}, input.AvoidFerries != null && {\n    AvoidFerries: input.AvoidFerries\n  }), input.AvoidTolls != null && {\n    AvoidTolls: input.AvoidTolls\n  }), input.Dimensions != null && {\n    Dimensions: serializeAws_restJson1TruckDimensions(input.Dimensions, context)\n  }), input.Weight != null && {\n    Weight: serializeAws_restJson1TruckWeight(input.Weight, context)\n  });\n};\nvar serializeAws_restJson1Circle = function (input, context) {\n  return __assign(__assign({}, input.Center != null && {\n    Center: serializeAws_restJson1Position(input.Center, context)\n  }), input.Radius != null && {\n    Radius: __serializeFloat(input.Radius)\n  });\n};\nvar serializeAws_restJson1CountryCodeList = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    return entry;\n  });\n};\nvar serializeAws_restJson1DataSourceConfiguration = function (input, context) {\n  return __assign({}, input.IntendedUse != null && {\n    IntendedUse: input.IntendedUse\n  });\n};\nvar serializeAws_restJson1DeviceIdsList = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    return entry;\n  });\n};\nvar serializeAws_restJson1DevicePositionUpdate = function (input, context) {\n  return __assign(__assign(__assign(__assign(__assign({}, input.Accuracy != null && {\n    Accuracy: serializeAws_restJson1PositionalAccuracy(input.Accuracy, context)\n  }), input.DeviceId != null && {\n    DeviceId: input.DeviceId\n  }), input.Position != null && {\n    Position: serializeAws_restJson1Position(input.Position, context)\n  }), input.PositionProperties != null && {\n    PositionProperties: serializeAws_restJson1PropertyMap(input.PositionProperties, context)\n  }), input.SampleTime != null && {\n    SampleTime: input.SampleTime.toISOString().split(\".\")[0] + \"Z\"\n  });\n};\nvar serializeAws_restJson1DevicePositionUpdateList = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    return serializeAws_restJson1DevicePositionUpdate(entry, context);\n  });\n};\nvar serializeAws_restJson1GeofenceGeometry = function (input, context) {\n  return __assign(__assign({}, input.Circle != null && {\n    Circle: serializeAws_restJson1Circle(input.Circle, context)\n  }), input.Polygon != null && {\n    Polygon: serializeAws_restJson1LinearRings(input.Polygon, context)\n  });\n};\nvar serializeAws_restJson1IdList = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    return entry;\n  });\n};\nvar serializeAws_restJson1LinearRing = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    return serializeAws_restJson1Position(entry, context);\n  });\n};\nvar serializeAws_restJson1LinearRings = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    return serializeAws_restJson1LinearRing(entry, context);\n  });\n};\nvar serializeAws_restJson1MapConfiguration = function (input, context) {\n  return __assign({}, input.Style != null && {\n    Style: input.Style\n  });\n};\nvar serializeAws_restJson1Position = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    return __serializeFloat(entry);\n  });\n};\nvar serializeAws_restJson1PositionalAccuracy = function (input, context) {\n  return __assign({}, input.Horizontal != null && {\n    Horizontal: __serializeFloat(input.Horizontal)\n  });\n};\nvar serializeAws_restJson1PositionList = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    return serializeAws_restJson1Position(entry, context);\n  });\n};\nvar serializeAws_restJson1PropertyMap = function (input, context) {\n  return Object.entries(input).reduce(function (acc, _a) {\n    var _b;\n    var _c = __read(_a, 2),\n      key = _c[0],\n      value = _c[1];\n    if (value === null) {\n      return acc;\n    }\n    return __assign(__assign({}, acc), (_b = {}, _b[key] = value, _b));\n  }, {});\n};\nvar serializeAws_restJson1TagMap = function (input, context) {\n  return Object.entries(input).reduce(function (acc, _a) {\n    var _b;\n    var _c = __read(_a, 2),\n      key = _c[0],\n      value = _c[1];\n    if (value === null) {\n      return acc;\n    }\n    return __assign(__assign({}, acc), (_b = {}, _b[key] = value, _b));\n  }, {});\n};\nvar serializeAws_restJson1TruckDimensions = function (input, context) {\n  return __assign(__assign(__assign(__assign({}, input.Height != null && {\n    Height: __serializeFloat(input.Height)\n  }), input.Length != null && {\n    Length: __serializeFloat(input.Length)\n  }), input.Unit != null && {\n    Unit: input.Unit\n  }), input.Width != null && {\n    Width: __serializeFloat(input.Width)\n  });\n};\nvar serializeAws_restJson1TruckWeight = function (input, context) {\n  return __assign(__assign({}, input.Total != null && {\n    Total: __serializeFloat(input.Total)\n  }), input.Unit != null && {\n    Unit: input.Unit\n  });\n};\nvar serializeAws_restJson1WaypointPositionList = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    return serializeAws_restJson1Position(entry, context);\n  });\n};\nvar deserializeAws_restJson1ArnList = function (output, context) {\n  var retVal = (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return __expectString(entry);\n  });\n  return retVal;\n};\nvar deserializeAws_restJson1BatchDeleteDevicePositionHistoryError = function (output, context) {\n  return {\n    DeviceId: __expectString(output.DeviceId),\n    Error: output.Error != null ? deserializeAws_restJson1BatchItemError(output.Error, context) : undefined\n  };\n};\nvar deserializeAws_restJson1BatchDeleteDevicePositionHistoryErrorList = function (output, context) {\n  var retVal = (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restJson1BatchDeleteDevicePositionHistoryError(entry, context);\n  });\n  return retVal;\n};\nvar deserializeAws_restJson1BatchDeleteGeofenceError = function (output, context) {\n  return {\n    Error: output.Error != null ? deserializeAws_restJson1BatchItemError(output.Error, context) : undefined,\n    GeofenceId: __expectString(output.GeofenceId)\n  };\n};\nvar deserializeAws_restJson1BatchDeleteGeofenceErrorList = function (output, context) {\n  var retVal = (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restJson1BatchDeleteGeofenceError(entry, context);\n  });\n  return retVal;\n};\nvar deserializeAws_restJson1BatchEvaluateGeofencesError = function (output, context) {\n  return {\n    DeviceId: __expectString(output.DeviceId),\n    Error: output.Error != null ? deserializeAws_restJson1BatchItemError(output.Error, context) : undefined,\n    SampleTime: output.SampleTime != null ? __expectNonNull(__parseRfc3339DateTime(output.SampleTime)) : undefined\n  };\n};\nvar deserializeAws_restJson1BatchEvaluateGeofencesErrorList = function (output, context) {\n  var retVal = (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restJson1BatchEvaluateGeofencesError(entry, context);\n  });\n  return retVal;\n};\nvar deserializeAws_restJson1BatchGetDevicePositionError = function (output, context) {\n  return {\n    DeviceId: __expectString(output.DeviceId),\n    Error: output.Error != null ? deserializeAws_restJson1BatchItemError(output.Error, context) : undefined\n  };\n};\nvar deserializeAws_restJson1BatchGetDevicePositionErrorList = function (output, context) {\n  var retVal = (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restJson1BatchGetDevicePositionError(entry, context);\n  });\n  return retVal;\n};\nvar deserializeAws_restJson1BatchItemError = function (output, context) {\n  return {\n    Code: __expectString(output.Code),\n    Message: __expectString(output.Message)\n  };\n};\nvar deserializeAws_restJson1BatchPutGeofenceError = function (output, context) {\n  return {\n    Error: output.Error != null ? deserializeAws_restJson1BatchItemError(output.Error, context) : undefined,\n    GeofenceId: __expectString(output.GeofenceId)\n  };\n};\nvar deserializeAws_restJson1BatchPutGeofenceErrorList = function (output, context) {\n  var retVal = (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restJson1BatchPutGeofenceError(entry, context);\n  });\n  return retVal;\n};\nvar deserializeAws_restJson1BatchPutGeofenceSuccess = function (output, context) {\n  return {\n    CreateTime: output.CreateTime != null ? __expectNonNull(__parseRfc3339DateTime(output.CreateTime)) : undefined,\n    GeofenceId: __expectString(output.GeofenceId),\n    UpdateTime: output.UpdateTime != null ? __expectNonNull(__parseRfc3339DateTime(output.UpdateTime)) : undefined\n  };\n};\nvar deserializeAws_restJson1BatchPutGeofenceSuccessList = function (output, context) {\n  var retVal = (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restJson1BatchPutGeofenceSuccess(entry, context);\n  });\n  return retVal;\n};\nvar deserializeAws_restJson1BatchUpdateDevicePositionError = function (output, context) {\n  return {\n    DeviceId: __expectString(output.DeviceId),\n    Error: output.Error != null ? deserializeAws_restJson1BatchItemError(output.Error, context) : undefined,\n    SampleTime: output.SampleTime != null ? __expectNonNull(__parseRfc3339DateTime(output.SampleTime)) : undefined\n  };\n};\nvar deserializeAws_restJson1BatchUpdateDevicePositionErrorList = function (output, context) {\n  var retVal = (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restJson1BatchUpdateDevicePositionError(entry, context);\n  });\n  return retVal;\n};\nvar deserializeAws_restJson1BoundingBox = function (output, context) {\n  var retVal = (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return __limitedParseDouble(entry);\n  });\n  return retVal;\n};\nvar deserializeAws_restJson1CalculateRouteMatrixSummary = function (output, context) {\n  return {\n    DataSource: __expectString(output.DataSource),\n    DistanceUnit: __expectString(output.DistanceUnit),\n    ErrorCount: __expectInt32(output.ErrorCount),\n    RouteCount: __expectInt32(output.RouteCount)\n  };\n};\nvar deserializeAws_restJson1CalculateRouteSummary = function (output, context) {\n  return {\n    DataSource: __expectString(output.DataSource),\n    Distance: __limitedParseDouble(output.Distance),\n    DistanceUnit: __expectString(output.DistanceUnit),\n    DurationSeconds: __limitedParseDouble(output.DurationSeconds),\n    RouteBBox: output.RouteBBox != null ? deserializeAws_restJson1BoundingBox(output.RouteBBox, context) : undefined\n  };\n};\nvar deserializeAws_restJson1Circle = function (output, context) {\n  return {\n    Center: output.Center != null ? deserializeAws_restJson1Position(output.Center, context) : undefined,\n    Radius: __limitedParseDouble(output.Radius)\n  };\n};\nvar deserializeAws_restJson1CountryCodeList = function (output, context) {\n  var retVal = (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return __expectString(entry);\n  });\n  return retVal;\n};\nvar deserializeAws_restJson1DataSourceConfiguration = function (output, context) {\n  return {\n    IntendedUse: __expectString(output.IntendedUse)\n  };\n};\nvar deserializeAws_restJson1DevicePosition = function (output, context) {\n  return {\n    Accuracy: output.Accuracy != null ? deserializeAws_restJson1PositionalAccuracy(output.Accuracy, context) : undefined,\n    DeviceId: __expectString(output.DeviceId),\n    Position: output.Position != null ? deserializeAws_restJson1Position(output.Position, context) : undefined,\n    PositionProperties: output.PositionProperties != null ? deserializeAws_restJson1PropertyMap(output.PositionProperties, context) : undefined,\n    ReceivedTime: output.ReceivedTime != null ? __expectNonNull(__parseRfc3339DateTime(output.ReceivedTime)) : undefined,\n    SampleTime: output.SampleTime != null ? __expectNonNull(__parseRfc3339DateTime(output.SampleTime)) : undefined\n  };\n};\nvar deserializeAws_restJson1DevicePositionList = function (output, context) {\n  var retVal = (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restJson1DevicePosition(entry, context);\n  });\n  return retVal;\n};\nvar deserializeAws_restJson1GeofenceGeometry = function (output, context) {\n  return {\n    Circle: output.Circle != null ? deserializeAws_restJson1Circle(output.Circle, context) : undefined,\n    Polygon: output.Polygon != null ? deserializeAws_restJson1LinearRings(output.Polygon, context) : undefined\n  };\n};\nvar deserializeAws_restJson1Leg = function (output, context) {\n  return {\n    Distance: __limitedParseDouble(output.Distance),\n    DurationSeconds: __limitedParseDouble(output.DurationSeconds),\n    EndPosition: output.EndPosition != null ? deserializeAws_restJson1Position(output.EndPosition, context) : undefined,\n    Geometry: output.Geometry != null ? deserializeAws_restJson1LegGeometry(output.Geometry, context) : undefined,\n    StartPosition: output.StartPosition != null ? deserializeAws_restJson1Position(output.StartPosition, context) : undefined,\n    Steps: output.Steps != null ? deserializeAws_restJson1StepList(output.Steps, context) : undefined\n  };\n};\nvar deserializeAws_restJson1LegGeometry = function (output, context) {\n  return {\n    LineString: output.LineString != null ? deserializeAws_restJson1LineString(output.LineString, context) : undefined\n  };\n};\nvar deserializeAws_restJson1LegList = function (output, context) {\n  var retVal = (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restJson1Leg(entry, context);\n  });\n  return retVal;\n};\nvar deserializeAws_restJson1LinearRing = function (output, context) {\n  var retVal = (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restJson1Position(entry, context);\n  });\n  return retVal;\n};\nvar deserializeAws_restJson1LinearRings = function (output, context) {\n  var retVal = (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restJson1LinearRing(entry, context);\n  });\n  return retVal;\n};\nvar deserializeAws_restJson1LineString = function (output, context) {\n  var retVal = (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restJson1Position(entry, context);\n  });\n  return retVal;\n};\nvar deserializeAws_restJson1ListDevicePositionsResponseEntry = function (output, context) {\n  return {\n    Accuracy: output.Accuracy != null ? deserializeAws_restJson1PositionalAccuracy(output.Accuracy, context) : undefined,\n    DeviceId: __expectString(output.DeviceId),\n    Position: output.Position != null ? deserializeAws_restJson1Position(output.Position, context) : undefined,\n    PositionProperties: output.PositionProperties != null ? deserializeAws_restJson1PropertyMap(output.PositionProperties, context) : undefined,\n    SampleTime: output.SampleTime != null ? __expectNonNull(__parseRfc3339DateTime(output.SampleTime)) : undefined\n  };\n};\nvar deserializeAws_restJson1ListDevicePositionsResponseEntryList = function (output, context) {\n  var retVal = (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restJson1ListDevicePositionsResponseEntry(entry, context);\n  });\n  return retVal;\n};\nvar deserializeAws_restJson1ListGeofenceCollectionsResponseEntry = function (output, context) {\n  return {\n    CollectionName: __expectString(output.CollectionName),\n    CreateTime: output.CreateTime != null ? __expectNonNull(__parseRfc3339DateTime(output.CreateTime)) : undefined,\n    Description: __expectString(output.Description),\n    PricingPlan: __expectString(output.PricingPlan),\n    PricingPlanDataSource: __expectString(output.PricingPlanDataSource),\n    UpdateTime: output.UpdateTime != null ? __expectNonNull(__parseRfc3339DateTime(output.UpdateTime)) : undefined\n  };\n};\nvar deserializeAws_restJson1ListGeofenceCollectionsResponseEntryList = function (output, context) {\n  var retVal = (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restJson1ListGeofenceCollectionsResponseEntry(entry, context);\n  });\n  return retVal;\n};\nvar deserializeAws_restJson1ListGeofenceResponseEntry = function (output, context) {\n  return {\n    CreateTime: output.CreateTime != null ? __expectNonNull(__parseRfc3339DateTime(output.CreateTime)) : undefined,\n    GeofenceId: __expectString(output.GeofenceId),\n    Geometry: output.Geometry != null ? deserializeAws_restJson1GeofenceGeometry(output.Geometry, context) : undefined,\n    Status: __expectString(output.Status),\n    UpdateTime: output.UpdateTime != null ? __expectNonNull(__parseRfc3339DateTime(output.UpdateTime)) : undefined\n  };\n};\nvar deserializeAws_restJson1ListGeofenceResponseEntryList = function (output, context) {\n  var retVal = (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restJson1ListGeofenceResponseEntry(entry, context);\n  });\n  return retVal;\n};\nvar deserializeAws_restJson1ListMapsResponseEntry = function (output, context) {\n  return {\n    CreateTime: output.CreateTime != null ? __expectNonNull(__parseRfc3339DateTime(output.CreateTime)) : undefined,\n    DataSource: __expectString(output.DataSource),\n    Description: __expectString(output.Description),\n    MapName: __expectString(output.MapName),\n    PricingPlan: __expectString(output.PricingPlan),\n    UpdateTime: output.UpdateTime != null ? __expectNonNull(__parseRfc3339DateTime(output.UpdateTime)) : undefined\n  };\n};\nvar deserializeAws_restJson1ListMapsResponseEntryList = function (output, context) {\n  var retVal = (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restJson1ListMapsResponseEntry(entry, context);\n  });\n  return retVal;\n};\nvar deserializeAws_restJson1ListPlaceIndexesResponseEntry = function (output, context) {\n  return {\n    CreateTime: output.CreateTime != null ? __expectNonNull(__parseRfc3339DateTime(output.CreateTime)) : undefined,\n    DataSource: __expectString(output.DataSource),\n    Description: __expectString(output.Description),\n    IndexName: __expectString(output.IndexName),\n    PricingPlan: __expectString(output.PricingPlan),\n    UpdateTime: output.UpdateTime != null ? __expectNonNull(__parseRfc3339DateTime(output.UpdateTime)) : undefined\n  };\n};\nvar deserializeAws_restJson1ListPlaceIndexesResponseEntryList = function (output, context) {\n  var retVal = (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restJson1ListPlaceIndexesResponseEntry(entry, context);\n  });\n  return retVal;\n};\nvar deserializeAws_restJson1ListRouteCalculatorsResponseEntry = function (output, context) {\n  return {\n    CalculatorName: __expectString(output.CalculatorName),\n    CreateTime: output.CreateTime != null ? __expectNonNull(__parseRfc3339DateTime(output.CreateTime)) : undefined,\n    DataSource: __expectString(output.DataSource),\n    Description: __expectString(output.Description),\n    PricingPlan: __expectString(output.PricingPlan),\n    UpdateTime: output.UpdateTime != null ? __expectNonNull(__parseRfc3339DateTime(output.UpdateTime)) : undefined\n  };\n};\nvar deserializeAws_restJson1ListRouteCalculatorsResponseEntryList = function (output, context) {\n  var retVal = (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restJson1ListRouteCalculatorsResponseEntry(entry, context);\n  });\n  return retVal;\n};\nvar deserializeAws_restJson1ListTrackersResponseEntry = function (output, context) {\n  return {\n    CreateTime: output.CreateTime != null ? __expectNonNull(__parseRfc3339DateTime(output.CreateTime)) : undefined,\n    Description: __expectString(output.Description),\n    PricingPlan: __expectString(output.PricingPlan),\n    PricingPlanDataSource: __expectString(output.PricingPlanDataSource),\n    TrackerName: __expectString(output.TrackerName),\n    UpdateTime: output.UpdateTime != null ? __expectNonNull(__parseRfc3339DateTime(output.UpdateTime)) : undefined\n  };\n};\nvar deserializeAws_restJson1ListTrackersResponseEntryList = function (output, context) {\n  var retVal = (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restJson1ListTrackersResponseEntry(entry, context);\n  });\n  return retVal;\n};\nvar deserializeAws_restJson1MapConfiguration = function (output, context) {\n  return {\n    Style: __expectString(output.Style)\n  };\n};\nvar deserializeAws_restJson1Place = function (output, context) {\n  return {\n    AddressNumber: __expectString(output.AddressNumber),\n    Country: __expectString(output.Country),\n    Geometry: output.Geometry != null ? deserializeAws_restJson1PlaceGeometry(output.Geometry, context) : undefined,\n    Interpolated: __expectBoolean(output.Interpolated),\n    Label: __expectString(output.Label),\n    Municipality: __expectString(output.Municipality),\n    Neighborhood: __expectString(output.Neighborhood),\n    PostalCode: __expectString(output.PostalCode),\n    Region: __expectString(output.Region),\n    Street: __expectString(output.Street),\n    SubRegion: __expectString(output.SubRegion),\n    TimeZone: output.TimeZone != null ? deserializeAws_restJson1TimeZone(output.TimeZone, context) : undefined,\n    UnitNumber: __expectString(output.UnitNumber),\n    UnitType: __expectString(output.UnitType)\n  };\n};\nvar deserializeAws_restJson1PlaceGeometry = function (output, context) {\n  return {\n    Point: output.Point != null ? deserializeAws_restJson1Position(output.Point, context) : undefined\n  };\n};\nvar deserializeAws_restJson1Position = function (output, context) {\n  var retVal = (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return __limitedParseDouble(entry);\n  });\n  return retVal;\n};\nvar deserializeAws_restJson1PositionalAccuracy = function (output, context) {\n  return {\n    Horizontal: __limitedParseDouble(output.Horizontal)\n  };\n};\nvar deserializeAws_restJson1PositionList = function (output, context) {\n  var retVal = (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restJson1Position(entry, context);\n  });\n  return retVal;\n};\nvar deserializeAws_restJson1PropertyMap = function (output, context) {\n  return Object.entries(output).reduce(function (acc, _a) {\n    var _b;\n    var _c = __read(_a, 2),\n      key = _c[0],\n      value = _c[1];\n    if (value === null) {\n      return acc;\n    }\n    return __assign(__assign({}, acc), (_b = {}, _b[key] = __expectString(value), _b));\n  }, {});\n};\nvar deserializeAws_restJson1RouteMatrix = function (output, context) {\n  var retVal = (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restJson1RouteMatrixRow(entry, context);\n  });\n  return retVal;\n};\nvar deserializeAws_restJson1RouteMatrixEntry = function (output, context) {\n  return {\n    Distance: __limitedParseDouble(output.Distance),\n    DurationSeconds: __limitedParseDouble(output.DurationSeconds),\n    Error: output.Error != null ? deserializeAws_restJson1RouteMatrixEntryError(output.Error, context) : undefined\n  };\n};\nvar deserializeAws_restJson1RouteMatrixEntryError = function (output, context) {\n  return {\n    Code: __expectString(output.Code),\n    Message: __expectString(output.Message)\n  };\n};\nvar deserializeAws_restJson1RouteMatrixRow = function (output, context) {\n  var retVal = (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restJson1RouteMatrixEntry(entry, context);\n  });\n  return retVal;\n};\nvar deserializeAws_restJson1SearchForPositionResult = function (output, context) {\n  return {\n    Distance: __limitedParseDouble(output.Distance),\n    Place: output.Place != null ? deserializeAws_restJson1Place(output.Place, context) : undefined,\n    PlaceId: __expectString(output.PlaceId)\n  };\n};\nvar deserializeAws_restJson1SearchForPositionResultList = function (output, context) {\n  var retVal = (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restJson1SearchForPositionResult(entry, context);\n  });\n  return retVal;\n};\nvar deserializeAws_restJson1SearchForSuggestionsResult = function (output, context) {\n  return {\n    PlaceId: __expectString(output.PlaceId),\n    Text: __expectString(output.Text)\n  };\n};\nvar deserializeAws_restJson1SearchForSuggestionsResultList = function (output, context) {\n  var retVal = (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restJson1SearchForSuggestionsResult(entry, context);\n  });\n  return retVal;\n};\nvar deserializeAws_restJson1SearchForTextResult = function (output, context) {\n  return {\n    Distance: __limitedParseDouble(output.Distance),\n    Place: output.Place != null ? deserializeAws_restJson1Place(output.Place, context) : undefined,\n    PlaceId: __expectString(output.PlaceId),\n    Relevance: __limitedParseDouble(output.Relevance)\n  };\n};\nvar deserializeAws_restJson1SearchForTextResultList = function (output, context) {\n  var retVal = (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restJson1SearchForTextResult(entry, context);\n  });\n  return retVal;\n};\nvar deserializeAws_restJson1SearchPlaceIndexForPositionSummary = function (output, context) {\n  return {\n    DataSource: __expectString(output.DataSource),\n    Language: __expectString(output.Language),\n    MaxResults: __expectInt32(output.MaxResults),\n    Position: output.Position != null ? deserializeAws_restJson1Position(output.Position, context) : undefined\n  };\n};\nvar deserializeAws_restJson1SearchPlaceIndexForSuggestionsSummary = function (output, context) {\n  return {\n    BiasPosition: output.BiasPosition != null ? deserializeAws_restJson1Position(output.BiasPosition, context) : undefined,\n    DataSource: __expectString(output.DataSource),\n    FilterBBox: output.FilterBBox != null ? deserializeAws_restJson1BoundingBox(output.FilterBBox, context) : undefined,\n    FilterCountries: output.FilterCountries != null ? deserializeAws_restJson1CountryCodeList(output.FilterCountries, context) : undefined,\n    Language: __expectString(output.Language),\n    MaxResults: __expectInt32(output.MaxResults),\n    Text: __expectString(output.Text)\n  };\n};\nvar deserializeAws_restJson1SearchPlaceIndexForTextSummary = function (output, context) {\n  return {\n    BiasPosition: output.BiasPosition != null ? deserializeAws_restJson1Position(output.BiasPosition, context) : undefined,\n    DataSource: __expectString(output.DataSource),\n    FilterBBox: output.FilterBBox != null ? deserializeAws_restJson1BoundingBox(output.FilterBBox, context) : undefined,\n    FilterCountries: output.FilterCountries != null ? deserializeAws_restJson1CountryCodeList(output.FilterCountries, context) : undefined,\n    Language: __expectString(output.Language),\n    MaxResults: __expectInt32(output.MaxResults),\n    ResultBBox: output.ResultBBox != null ? deserializeAws_restJson1BoundingBox(output.ResultBBox, context) : undefined,\n    Text: __expectString(output.Text)\n  };\n};\nvar deserializeAws_restJson1Step = function (output, context) {\n  return {\n    Distance: __limitedParseDouble(output.Distance),\n    DurationSeconds: __limitedParseDouble(output.DurationSeconds),\n    EndPosition: output.EndPosition != null ? deserializeAws_restJson1Position(output.EndPosition, context) : undefined,\n    GeometryOffset: __expectInt32(output.GeometryOffset),\n    StartPosition: output.StartPosition != null ? deserializeAws_restJson1Position(output.StartPosition, context) : undefined\n  };\n};\nvar deserializeAws_restJson1StepList = function (output, context) {\n  var retVal = (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restJson1Step(entry, context);\n  });\n  return retVal;\n};\nvar deserializeAws_restJson1TagMap = function (output, context) {\n  return Object.entries(output).reduce(function (acc, _a) {\n    var _b;\n    var _c = __read(_a, 2),\n      key = _c[0],\n      value = _c[1];\n    if (value === null) {\n      return acc;\n    }\n    return __assign(__assign({}, acc), (_b = {}, _b[key] = __expectString(value), _b));\n  }, {});\n};\nvar deserializeAws_restJson1TimeZone = function (output, context) {\n  return {\n    Name: __expectString(output.Name),\n    Offset: __expectInt32(output.Offset)\n  };\n};\nvar deserializeAws_restJson1ValidationExceptionField = function (output, context) {\n  return {\n    Message: __expectString(output.message),\n    Name: __expectString(output.name)\n  };\n};\nvar deserializeAws_restJson1ValidationExceptionFieldList = function (output, context) {\n  var retVal = (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restJson1ValidationExceptionField(entry, context);\n  });\n  return retVal;\n};\nvar deserializeMetadata = function (output) {\n  var _a, _b;\n  return {\n    httpStatusCode: output.statusCode,\n    requestId: (_b = (_a = output.headers[\"x-amzn-requestid\"]) !== null && _a !== void 0 ? _a : output.headers[\"x-amzn-request-id\"]) !== null && _b !== void 0 ? _b : output.headers[\"x-amz-request-id\"],\n    extendedRequestId: output.headers[\"x-amz-id-2\"],\n    cfId: output.headers[\"x-amz-cf-id\"]\n  };\n};\nvar collectBody = function (streamBody, context) {\n  if (streamBody === void 0) {\n    streamBody = new Uint8Array();\n  }\n  if (streamBody instanceof Uint8Array) {\n    return Promise.resolve(streamBody);\n  }\n  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\nvar collectBodyString = function (streamBody, context) {\n  return collectBody(streamBody, context).then(function (body) {\n    return context.utf8Encoder(body);\n  });\n};\nvar isSerializableHeaderValue = function (value) {\n  return value !== undefined && value !== null && value !== \"\" && (!Object.getOwnPropertyNames(value).includes(\"length\") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes(\"size\") || value.size != 0);\n};\nvar parseBody = function (streamBody, context) {\n  return collectBodyString(streamBody, context).then(function (encoded) {\n    if (encoded.length) {\n      return JSON.parse(encoded);\n    }\n    return {};\n  });\n};\nvar parseErrorBody = function (errorBody, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var value;\n    var _a;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          return [4, parseBody(errorBody, context)];\n        case 1:\n          value = _b.sent();\n          value.message = (_a = value.message) !== null && _a !== void 0 ? _a : value.Message;\n          return [2, value];\n      }\n    });\n  });\n};\nvar loadRestJsonErrorCode = function (output, data) {\n  var findKey = function (object, key) {\n    return Object.keys(object).find(function (k) {\n      return k.toLowerCase() === key.toLowerCase();\n    });\n  };\n  var sanitizeErrorCode = function (rawValue) {\n    var cleanValue = rawValue;\n    if (typeof cleanValue === \"number\") {\n      cleanValue = cleanValue.toString();\n    }\n    if (cleanValue.indexOf(\",\") >= 0) {\n      cleanValue = cleanValue.split(\",\")[0];\n    }\n    if (cleanValue.indexOf(\":\") >= 0) {\n      cleanValue = cleanValue.split(\":\")[0];\n    }\n    if (cleanValue.indexOf(\"#\") >= 0) {\n      cleanValue = cleanValue.split(\"#\")[1];\n    }\n    return cleanValue;\n  };\n  var headerKey = findKey(output.headers, \"x-amzn-errortype\");\n  if (headerKey !== undefined) {\n    return sanitizeErrorCode(output.headers[headerKey]);\n  }\n  if (data.code !== undefined) {\n    return sanitizeErrorCode(data.code);\n  }\n  if (data[\"__type\"] !== undefined) {\n    return sanitizeErrorCode(data[\"__type\"]);\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}