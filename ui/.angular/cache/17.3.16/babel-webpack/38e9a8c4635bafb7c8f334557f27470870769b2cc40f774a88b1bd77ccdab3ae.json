{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { ConsoleLogger as Logger } from '../Logger';\nvar logger = new Logger('ClientDevice_Browser');\nexport function clientInfo() {\n  if (typeof window === 'undefined') {\n    return {};\n  }\n  return browserClientInfo();\n}\nfunction browserClientInfo() {\n  if (typeof window === 'undefined') {\n    logger.warn('No window object available to get browser client info');\n    return {};\n  }\n  var nav = window.navigator;\n  if (!nav) {\n    logger.warn('No navigator object available to get browser client info');\n    return {};\n  }\n  var platform = nav.platform,\n    product = nav.product,\n    vendor = nav.vendor,\n    userAgent = nav.userAgent,\n    language = nav.language;\n  var type = browserType(userAgent);\n  var timezone = browserTimezone();\n  return {\n    platform: platform,\n    make: product || vendor,\n    model: type.type,\n    version: type.version,\n    appVersion: [type.type, type.version].join('/'),\n    language: language,\n    timezone: timezone\n  };\n}\nexport function dimension() {\n  if (typeof window === 'undefined') {\n    logger.warn('No window object available to get browser client info');\n    return {\n      width: 320,\n      height: 320\n    };\n  }\n  return {\n    width: window.innerWidth,\n    height: window.innerHeight\n  };\n}\nfunction browserTimezone() {\n  var tzMatch = /\\(([A-Za-z\\s].*)\\)/.exec(new Date().toString());\n  return tzMatch ? tzMatch[1] || '' : '';\n}\nexport function browserType(userAgent) {\n  var operaMatch = /.+(Opera[\\s[A-Z]*|OPR[\\sA-Z]*)\\/([0-9\\.]+).*/i.exec(userAgent);\n  if (operaMatch) {\n    return {\n      type: operaMatch[1],\n      version: operaMatch[2]\n    };\n  }\n  var ieMatch = /.+(Trident|Edge)\\/([0-9\\.]+).*/i.exec(userAgent);\n  if (ieMatch) {\n    return {\n      type: ieMatch[1],\n      version: ieMatch[2]\n    };\n  }\n  var cfMatch = /.+(Chrome|Firefox|FxiOS)\\/([0-9\\.]+).*/i.exec(userAgent);\n  if (cfMatch) {\n    return {\n      type: cfMatch[1],\n      version: cfMatch[2]\n    };\n  }\n  var sMatch = /.+(Safari)\\/([0-9\\.]+).*/i.exec(userAgent);\n  if (sMatch) {\n    return {\n      type: sMatch[1],\n      version: sMatch[2]\n    };\n  }\n  var awkMatch = /.+(AppleWebKit)\\/([0-9\\.]+).*/i.exec(userAgent);\n  if (awkMatch) {\n    return {\n      type: awkMatch[1],\n      version: awkMatch[2]\n    };\n  }\n  var anyMatch = /.*([A-Z]+)\\/([0-9\\.]+).*/i.exec(userAgent);\n  if (anyMatch) {\n    return {\n      type: anyMatch[1],\n      version: anyMatch[2]\n    };\n  }\n  return {\n    type: '',\n    version: ''\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}