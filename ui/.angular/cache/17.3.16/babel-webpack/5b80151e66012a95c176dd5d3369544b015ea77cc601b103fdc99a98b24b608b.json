{"ast":null,"code":"import { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let TranslationService = /*#__PURE__*/(() => {\n  class TranslationService {\n    http;\n    apiUrl = environment.apiUrl;\n    constructor(http) {\n      this.http = http;\n    }\n    translate(text, sourceLanguage) {\n      return this.http.post(`${this.apiUrl}/translate`, {\n        sourceText: text,\n        sourceLanguage,\n        targetLanguage: sourceLanguage === 'en' ? 'fj' : 'en'\n      });\n    }\n    verify(id, sourceText, translatedText, sourceLanguage, verified = true) {\n      return this.http.post(`${this.apiUrl}/verify`, {\n        id,\n        sourceText,\n        translatedText,\n        sourceLanguage,\n        verified\n      });\n    }\n    getModule(title) {\n      const encodedTitle = encodeURIComponent(title);\n      const path = `/assets/module-mock.json`; // üîÅ Replace this later with real S3 or API path if needed\n      return this.http.get(path);\n    }\n    getModuleFromApi(title) {\n      const encoded = encodeURIComponent(title);\n      return this.http.get(`${this.apiUrl}/module?title=${encoded}`);\n    }\n    verifyModule(module) {\n      return this.http.post(`${this.apiUrl}/verify-module`, module);\n    }\n    getParagraphsByTitle(title) {\n      return this.http.get(`${this.apiUrl}/get-paragraphs?title=${encodeURIComponent(title)}`);\n    }\n    getParagraphsById(articleId) {\n      return this.http.get(`${this.apiUrl}/get-paragraphs?id=${encodeURIComponent(articleId)}`);\n    }\n    verifyParagraph(payload) {\n      return this.http.post(`${this.apiUrl}/verify-paragraph`, payload);\n    }\n    getAllArticles() {\n      return this.http.get(`${this.apiUrl}/list-articles`);\n    }\n    getModuleById(moduleId) {\n      return this.http.get(`${this.apiUrl}/get-module?id=${moduleId}`);\n    }\n    getPhrasesByModuleId(moduleId) {\n      return this.http.get(`${this.apiUrl}/module-phrases?moduleId=${moduleId}`);\n    }\n    verifyPhraseFromModule(moduleId, phrase) {\n      return this.http.post(`${this.apiUrl}/verify-phrase`, {\n        moduleId,\n        phraseId: phrase.id,\n        originalText: phrase.originalText,\n        translatedText: phrase.translatedText\n      });\n    }\n    getAllModules() {\n      return this.http.get(`${this.apiUrl}/list-modules`);\n    }\n    static …µfac = function TranslationService_Factory(t) {\n      return new (t || TranslationService)(i0.…µ…µinject(i1.HttpClient));\n    };\n    static …µprov = /*@__PURE__*/i0.…µ…µdefineInjectable({\n      token: TranslationService,\n      factory: TranslationService.…µfac,\n      providedIn: 'root'\n    });\n  }\n  return TranslationService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}