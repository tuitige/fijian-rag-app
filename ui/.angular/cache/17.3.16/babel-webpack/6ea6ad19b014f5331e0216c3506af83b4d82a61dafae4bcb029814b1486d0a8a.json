{"ast":null,"code":"import { __rest as t } from \"tslib\";\nimport { createMachine as o, forwardTo as i, assign as n, spawn as e, actions as r } from \"xstate\";\nimport { stopActor as s } from \"./actions.mjs\";\nimport { signInActor as a } from \"./actors/signIn.mjs\";\nimport { signOutActor as c } from \"./actors/signOut.mjs\";\nimport { resetPasswordActor as d } from \"./actors/resetPassword.mjs\";\nimport { defaultServices as u } from \"./defaultServices.mjs\";\nimport { createSignUpMachine as l } from \"./signUp.mjs\";\nconst {\n  choose: g\n} = r;\nfunction v() {\n  return o({\n    id: \"authenticator\",\n    initial: \"idle\",\n    context: {\n      user: void 0,\n      config: {},\n      services: u,\n      actorRef: void 0,\n      hasSetup: !1\n    },\n    predictableActionArguments: !0,\n    states: {\n      idle: {\n        invoke: {\n          src: \"getCurrentUser\",\n          onDone: {\n            actions: \"setUser\",\n            target: \"authenticated\"\n          },\n          onError: {\n            target: \"setup\"\n          }\n        }\n      },\n      setup: {\n        initial: \"waitConfig\",\n        states: {\n          waitConfig: {\n            on: {\n              INIT: {\n                actions: [\"configure\", \"setHasSetup\"],\n                target: \"applyConfig\"\n              }\n            }\n          },\n          applyConfig: {\n            invoke: {\n              src: \"getAmplifyConfig\",\n              onDone: {\n                actions: \"applyAmplifyConfig\",\n                target: \"goToInitialState\"\n              }\n            }\n          },\n          goToInitialState: {\n            always: [{\n              target: \"#authenticator.signUp\",\n              cond: \"isInitialStateSignUp\"\n            }, {\n              target: \"#authenticator.resetPassword\",\n              cond: \"isInitialStateResetPassword\"\n            }, {\n              target: \"#authenticator.signIn\"\n            }]\n          }\n        }\n      },\n      signIn: {\n        initial: \"spawnActor\",\n        states: {\n          spawnActor: {\n            always: {\n              actions: \"spawnSignInActor\",\n              target: \"runActor\"\n            }\n          },\n          runActor: {\n            entry: \"clearActorDoneData\",\n            exit: \"stopSignInActor\"\n          }\n        },\n        on: {\n          SIGN_UP: \"signUp\",\n          RESET_PASSWORD: \"resetPassword\",\n          \"done.invoke.signInActor\": [{\n            target: \"signUp\",\n            actions: \"setActorDoneData\",\n            cond: \"shouldRedirectToSignUp\"\n          }, {\n            target: \"resetPassword\",\n            actions: \"setActorDoneData\",\n            cond: \"shouldRedirectToResetPassword\"\n          }, {\n            target: \"authenticated\",\n            actions: \"setActorDoneData\"\n          }]\n        }\n      },\n      signUp: {\n        initial: \"spawnActor\",\n        states: {\n          spawnActor: {\n            always: {\n              actions: \"spawnSignUpActor\",\n              target: \"runActor\"\n            }\n          },\n          runActor: {\n            entry: \"clearActorDoneData\",\n            exit: \"stopSignUpActor\"\n          },\n          autoSignIn: {\n            invoke: {\n              src: \"getCurrentUser\",\n              onDone: \"#authenticator.authenticated\",\n              onError: \"#authenticator.setup.goToInitialState\"\n            }\n          }\n        },\n        on: {\n          SIGN_IN: \"signIn\",\n          \"done.invoke.signUpActor\": {\n            target: \"#authenticator.signIn\",\n            actions: \"setActorDoneData\",\n            cond: \"shouldAutoSignIn\"\n          }\n        }\n      },\n      resetPassword: {\n        initial: \"spawnActor\",\n        states: {\n          spawnActor: {\n            always: {\n              actions: \"spawnResetPasswordActor\",\n              target: \"runActor\"\n            }\n          },\n          runActor: {\n            entry: \"clearActorDoneData\",\n            exit: \"stopResetPasswordActor\"\n          }\n        },\n        on: {\n          SIGN_IN: \"signIn\",\n          \"done.invoke.resetPasswordActor\": {\n            target: \"signIn\",\n            actions: \"setActorDoneData\"\n          }\n        }\n      },\n      signOut: {\n        initial: \"spawnActor\",\n        states: {\n          spawnActor: {\n            always: {\n              actions: \"spawnSignOutActor\",\n              target: \"runActor\"\n            }\n          },\n          runActor: {\n            entry: \"clearActorDoneData\",\n            exit: [\"stopSignOutActor\", \"clearUser\"]\n          }\n        },\n        on: {\n          \"done.invoke.signOutActor\": [{\n            target: \"setup\",\n            cond: \"shouldSetup\"\n          }, {\n            target: \"setup.goToInitialState\"\n          }]\n        }\n      },\n      authenticated: {\n        initial: \"idle\",\n        states: {\n          idle: {\n            on: {\n              TOKEN_REFRESH: \"refreshUser\"\n            }\n          },\n          refreshUser: {\n            invoke: {\n              src: \"getCurrentUser\",\n              onDone: {\n                actions: \"setUser\",\n                target: \"idle\"\n              },\n              onError: {\n                target: \"#authenticator.signOut\"\n              }\n            }\n          }\n        },\n        on: {\n          SIGN_OUT: \"signOut\"\n        }\n      }\n    },\n    on: {\n      CHANGE: {\n        actions: \"forwardToActor\"\n      },\n      BLUR: {\n        actions: \"forwardToActor\"\n      },\n      SUBMIT: {\n        actions: \"forwardToActor\"\n      },\n      FEDERATED_SIGN_IN: {\n        actions: \"forwardToActor\"\n      },\n      AUTO_SIGN_IN: {\n        actions: \"forwardToActor\"\n      },\n      RESEND: {\n        actions: \"forwardToActor\"\n      },\n      SIGN_IN: {\n        actions: \"forwardToActor\"\n      },\n      SKIP: {\n        actions: \"forwardToActor\"\n      }\n    }\n  }, {\n    actions: {\n      forwardToActor: g([{\n        cond: \"hasActor\",\n        actions: i(t => t.actorRef)\n      }]),\n      setUser: n({\n        user: (t, o) => o.data\n      }),\n      setActorDoneData: n({\n        actorDoneData: (t, o) => {\n          var i, n;\n          return {\n            authAttributes: Object.assign({}, null === (i = o.data) || void 0 === i ? void 0 : i.authAttributes),\n            intent: null === (n = o.data) || void 0 === n ? void 0 : n.intent\n          };\n        },\n        user: (t, o) => {\n          var i;\n          return null === (i = o.data) || void 0 === i ? void 0 : i.user;\n        }\n      }),\n      clearUser: n({\n        user: void 0\n      }),\n      clearActorDoneData: n({\n        actorDoneData: void 0\n      }),\n      applyAmplifyConfig: n({\n        config(t, o) {\n          var i, n, e, r, s, a, c, d, u;\n          const l = null !== (n = null === (i = o.data.aws_cognito_username_attributes) || void 0 === i ? void 0 : i.map(t => t.toLowerCase())) && void 0 !== n ? n : [],\n            g = null !== (r = null === (e = o.data.aws_cognito_verification_mechanisms) || void 0 === e ? void 0 : e.map(t => t.toLowerCase())) && void 0 !== r ? r : [],\n            v = null !== (a = null === (s = o.data.aws_cognito_signup_attributes) || void 0 === s ? void 0 : s.map(t => t.toLowerCase())) && void 0 !== a ? a : [],\n            A = null !== (d = null === (c = o.data.aws_cognito_social_providers) || void 0 === c ? void 0 : c.map(t => t.toLowerCase())) && void 0 !== d ? d : [],\n            f = o.data.aws_cognito_password_protection_settings || {};\n          0 === l.length && l.push(\"username\");\n          const {\n            loginMechanisms: w,\n            signUpAttributes: S,\n            socialProviders: m,\n            initialState: h,\n            formFields: D\n          } = t.config;\n          return {\n            loginMechanisms: null != w ? w : l,\n            formFields: null !== (u = p(D)) && void 0 !== u ? u : {},\n            passwordSettings: f,\n            signUpAttributes: null != S ? S : Array.from(new Set([...g, ...v])),\n            socialProviders: null != m ? m : A.sort(),\n            initialState: h\n          };\n        }\n      }),\n      spawnSignInActor: n({\n        actorRef: (t, o) => {\n          var i, n, r, s, c, d, u;\n          const {\n              services: l\n            } = t,\n            g = a({\n              services: l\n            }).withContext({\n              authAttributes: null !== (n = null === (i = t.actorDoneData) || void 0 === i ? void 0 : i.authAttributes) && void 0 !== n ? n : {},\n              user: t.user,\n              intent: null === (r = t.actorDoneData) || void 0 === r ? void 0 : r.intent,\n              country_code: \"+1\",\n              formValues: {},\n              touched: {},\n              validationError: {},\n              passwordSettings: null === (s = t.config) || void 0 === s ? void 0 : s.passwordSettings,\n              loginMechanisms: null === (c = t.config) || void 0 === c ? void 0 : c.loginMechanisms,\n              socialProviders: null === (d = t.config) || void 0 === d ? void 0 : d.socialProviders,\n              formFields: null === (u = t.config) || void 0 === u ? void 0 : u.formFields\n            });\n          return e(g, {\n            name: \"signInActor\"\n          });\n        }\n      }),\n      spawnSignUpActor: n({\n        actorRef: (t, o) => {\n          var i, n, r, s, a, c, d;\n          const {\n              services: u\n            } = t,\n            g = l({\n              services: u\n            }).withContext({\n              authAttributes: null !== (n = null === (i = t.actorDoneData) || void 0 === i ? void 0 : i.authAttributes) && void 0 !== n ? n : {},\n              country_code: \"+1\",\n              intent: null === (r = t.actorDoneData) || void 0 === r ? void 0 : r.intent,\n              formValues: {},\n              touched: {},\n              validationError: {},\n              loginMechanisms: null === (s = t.config) || void 0 === s ? void 0 : s.loginMechanisms,\n              socialProviders: null === (a = t.config) || void 0 === a ? void 0 : a.socialProviders,\n              formFields: null === (c = t.config) || void 0 === c ? void 0 : c.formFields,\n              passwordSettings: null === (d = t.config) || void 0 === d ? void 0 : d.passwordSettings\n            });\n          return e(g, {\n            name: \"signUpActor\"\n          });\n        }\n      }),\n      spawnResetPasswordActor: n({\n        actorRef: (t, o) => {\n          var i, n, r, s, a;\n          const {\n              services: c\n            } = t,\n            u = d({\n              services: c\n            }).withContext({\n              formValues: {},\n              touched: {},\n              intent: null === (i = t.actorDoneData) || void 0 === i ? void 0 : i.intent,\n              username: null === (r = null === (n = t.actorDoneData) || void 0 === n ? void 0 : n.authAttributes) || void 0 === r ? void 0 : r.username,\n              formFields: null === (s = t.config) || void 0 === s ? void 0 : s.formFields,\n              validationError: {},\n              passwordSettings: null === (a = t.config) || void 0 === a ? void 0 : a.passwordSettings\n            });\n          return e(u, {\n            name: \"resetPasswordActor\"\n          });\n        }\n      }),\n      spawnSignOutActor: n({\n        actorRef: t => {\n          const o = c.withContext({\n            user: t.user\n          });\n          return e(o, {\n            name: \"signOutActor\"\n          });\n        }\n      }),\n      stopSignInActor: s(\"signInActor\"),\n      stopSignUpActor: s(\"signUpActor\"),\n      stopResetPasswordActor: s(\"resetPasswordActor\"),\n      stopSignOutActor: s(\"signOutActor\"),\n      configure: n((o, i) => {\n        const n = i.data,\n          {\n            services: e\n          } = n,\n          r = t(n, [\"services\"]);\n        return {\n          services: Object.assign(Object.assign({}, u), e),\n          config: r\n        };\n      }),\n      setHasSetup: n({\n        hasSetup: !0\n      })\n    },\n    guards: {\n      isInitialStateSignUp: t => \"signUp\" === t.config.initialState,\n      isInitialStateResetPassword: t => \"resetPassword\" === t.config.initialState,\n      shouldRedirectToSignUp: (t, o) => {\n        var i;\n        return \"confirmSignUp\" === (null === (i = o.data) || void 0 === i ? void 0 : i.intent);\n      },\n      shouldRedirectToResetPassword: (t, o) => {\n        var i;\n        return \"confirmPasswordReset\" === (null === (i = o.data) || void 0 === i ? void 0 : i.intent);\n      },\n      shouldAutoSignIn: (t, o) => {\n        var i, n;\n        return \"autoSignIn\" === (null === (i = o.data) || void 0 === i ? void 0 : i.intent) || \"autoSignInSubmit\" === (null === (n = o.data) || void 0 === n ? void 0 : n.intent);\n      },\n      shouldSetup: t => !1 === t.hasSetup,\n      hasActor: t => !!t.actorRef\n    },\n    services: {\n      getCurrentUser: (t, o) => t.services.getCurrentUser(),\n      getAmplifyConfig: (t, o) => t.services.getAmplifyConfig()\n    }\n  });\n}\nfunction p(t) {\n  return t && Object.keys(t).forEach(o => {\n    Object.keys(t[o]).forEach(i => {\n      let n = t[o][i];\n      n.required = n.isRequired;\n    });\n  }), t;\n}\nexport { v as createAuthenticatorMachine };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}