{"ast":null,"code":"import { __assign, __awaiter, __generator, __read } from \"tslib\";\nimport { HttpRequest as __HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { decorateServiceException as __decorateServiceException, expectInt32 as __expectInt32, expectNonNull as __expectNonNull, expectObject as __expectObject, expectString as __expectString, LazyJsonString as __LazyJsonString, limitedParseDouble as __limitedParseDouble, map as __map, resolvedPath as __resolvedPath, throwDefaultError } from \"@aws-sdk/smithy-client\";\nimport { LexRuntimeServiceServiceException as __BaseException } from \"../models/LexRuntimeServiceServiceException\";\nimport { BadGatewayException, BadRequestException, ConflictException, DependencyFailedException, InternalFailureException, LimitExceededException, LoopDetectedException, NotAcceptableException, NotFoundException, RequestTimeoutException, UnsupportedMediaTypeException } from \"../models/models_0\";\nexport var serializeAws_restJson1DeleteSessionCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {};\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/bot/{botName}/alias/{botAlias}/user/{userId}/session\";\n          resolvedPath = __resolvedPath(resolvedPath, input, \"botName\", function () {\n            return input.botName;\n          }, \"{botName}\", false);\n          resolvedPath = __resolvedPath(resolvedPath, input, \"botAlias\", function () {\n            return input.botAlias;\n          }, \"{botAlias}\", false);\n          resolvedPath = __resolvedPath(resolvedPath, input, \"userId\", function () {\n            return input.userId;\n          }, \"{userId}\", false);\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"DELETE\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1GetSessionCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {};\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/bot/{botName}/alias/{botAlias}/user/{userId}/session\";\n          resolvedPath = __resolvedPath(resolvedPath, input, \"botName\", function () {\n            return input.botName;\n          }, \"{botName}\", false);\n          resolvedPath = __resolvedPath(resolvedPath, input, \"botAlias\", function () {\n            return input.botAlias;\n          }, \"{botAlias}\", false);\n          resolvedPath = __resolvedPath(resolvedPath, input, \"userId\", function () {\n            return input.userId;\n          }, \"{userId}\", false);\n          query = map({\n            checkpointLabelFilter: [, input.checkpointLabelFilter]\n          });\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1PostContentCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = map({}, isSerializableHeaderValue, {\n            \"x-amz-content-sha256\": \"UNSIGNED-PAYLOAD\",\n            \"content-type\": input.contentType || \"application/octet-stream\",\n            \"x-amz-lex-session-attributes\": [function () {\n              return isSerializableHeaderValue(input.sessionAttributes);\n            }, function () {\n              return context.base64Encoder(Buffer.from(__LazyJsonString.fromObject(input.sessionAttributes)));\n            }],\n            \"x-amz-lex-request-attributes\": [function () {\n              return isSerializableHeaderValue(input.requestAttributes);\n            }, function () {\n              return context.base64Encoder(Buffer.from(__LazyJsonString.fromObject(input.requestAttributes)));\n            }],\n            accept: input.accept,\n            \"x-amz-lex-active-contexts\": [function () {\n              return isSerializableHeaderValue(input.activeContexts);\n            }, function () {\n              return context.base64Encoder(Buffer.from(__LazyJsonString.fromObject(input.activeContexts)));\n            }]\n          });\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/bot/{botName}/alias/{botAlias}/user/{userId}/content\";\n          resolvedPath = __resolvedPath(resolvedPath, input, \"botName\", function () {\n            return input.botName;\n          }, \"{botName}\", false);\n          resolvedPath = __resolvedPath(resolvedPath, input, \"botAlias\", function () {\n            return input.botAlias;\n          }, \"{botAlias}\", false);\n          resolvedPath = __resolvedPath(resolvedPath, input, \"userId\", function () {\n            return input.userId;\n          }, \"{userId}\", false);\n          if (input.inputStream !== undefined) {\n            body = input.inputStream;\n          }\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1PostTextCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/bot/{botName}/alias/{botAlias}/user/{userId}/text\";\n          resolvedPath = __resolvedPath(resolvedPath, input, \"botName\", function () {\n            return input.botName;\n          }, \"{botName}\", false);\n          resolvedPath = __resolvedPath(resolvedPath, input, \"botAlias\", function () {\n            return input.botAlias;\n          }, \"{botAlias}\", false);\n          resolvedPath = __resolvedPath(resolvedPath, input, \"userId\", function () {\n            return input.userId;\n          }, \"{userId}\", false);\n          body = JSON.stringify(__assign(__assign(__assign(__assign({}, input.activeContexts != null && {\n            activeContexts: serializeAws_restJson1ActiveContextsList(input.activeContexts, context)\n          }), input.inputText != null && {\n            inputText: input.inputText\n          }), input.requestAttributes != null && {\n            requestAttributes: serializeAws_restJson1StringMap(input.requestAttributes, context)\n          }), input.sessionAttributes != null && {\n            sessionAttributes: serializeAws_restJson1StringMap(input.sessionAttributes, context)\n          }));\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1PutSessionCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port, basePath = _a.path;\n          headers = map({}, isSerializableHeaderValue, {\n            \"content-type\": \"application/json\",\n            accept: input.accept\n          });\n          resolvedPath = \"\".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\") + \"/bot/{botName}/alias/{botAlias}/user/{userId}/session\";\n          resolvedPath = __resolvedPath(resolvedPath, input, \"botName\", function () {\n            return input.botName;\n          }, \"{botName}\", false);\n          resolvedPath = __resolvedPath(resolvedPath, input, \"botAlias\", function () {\n            return input.botAlias;\n          }, \"{botAlias}\", false);\n          resolvedPath = __resolvedPath(resolvedPath, input, \"userId\", function () {\n            return input.userId;\n          }, \"{userId}\", false);\n          body = JSON.stringify(__assign(__assign(__assign(__assign({}, input.activeContexts != null && {\n            activeContexts: serializeAws_restJson1ActiveContextsList(input.activeContexts, context)\n          }), input.dialogAction != null && {\n            dialogAction: serializeAws_restJson1DialogAction(input.dialogAction, context)\n          }), input.recentIntentSummaryView != null && {\n            recentIntentSummaryView: serializeAws_restJson1IntentSummaryList(input.recentIntentSummaryView, context)\n          }), input.sessionAttributes != null && {\n            sessionAttributes: serializeAws_restJson1StringMap(input.sessionAttributes, context)\n          }));\n          return [2, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1DeleteSessionCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, _a, _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2, deserializeAws_restJson1DeleteSessionCommandError(output, context)];\n          }\n          contents = map({\n            $metadata: deserializeMetadata(output)\n          });\n          _a = __expectNonNull;\n          _b = __expectObject;\n          return [4, parseBody(output.body, context)];\n        case 1:\n          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), \"body\"]);\n          if (data.botAlias != null) {\n            contents.botAlias = __expectString(data.botAlias);\n          }\n          if (data.botName != null) {\n            contents.botName = __expectString(data.botName);\n          }\n          if (data.sessionId != null) {\n            contents.sessionId = __expectString(data.sessionId);\n          }\n          if (data.userId != null) {\n            contents.userId = __expectString(data.userId);\n          }\n          return [2, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1DeleteSessionCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"BadRequestException\":\n              return [3, 2];\n            case \"com.amazonaws.lexruntimeservice#BadRequestException\":\n              return [3, 2];\n            case \"ConflictException\":\n              return [3, 4];\n            case \"com.amazonaws.lexruntimeservice#ConflictException\":\n              return [3, 4];\n            case \"InternalFailureException\":\n              return [3, 6];\n            case \"com.amazonaws.lexruntimeservice#InternalFailureException\":\n              return [3, 6];\n            case \"LimitExceededException\":\n              return [3, 8];\n            case \"com.amazonaws.lexruntimeservice#LimitExceededException\":\n              return [3, 8];\n            case \"NotFoundException\":\n              return [3, 10];\n            case \"com.amazonaws.lexruntimeservice#NotFoundException\":\n              return [3, 10];\n          }\n          return [3, 12];\n        case 2:\n          return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1InternalFailureExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];\n        case 11:\n          throw _d.sent();\n        case 12:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 13;\n        case 13:\n          return [2];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1GetSessionCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, _a, _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2, deserializeAws_restJson1GetSessionCommandError(output, context)];\n          }\n          contents = map({\n            $metadata: deserializeMetadata(output)\n          });\n          _a = __expectNonNull;\n          _b = __expectObject;\n          return [4, parseBody(output.body, context)];\n        case 1:\n          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), \"body\"]);\n          if (data.activeContexts != null) {\n            contents.activeContexts = deserializeAws_restJson1ActiveContextsList(data.activeContexts, context);\n          }\n          if (data.dialogAction != null) {\n            contents.dialogAction = deserializeAws_restJson1DialogAction(data.dialogAction, context);\n          }\n          if (data.recentIntentSummaryView != null) {\n            contents.recentIntentSummaryView = deserializeAws_restJson1IntentSummaryList(data.recentIntentSummaryView, context);\n          }\n          if (data.sessionAttributes != null) {\n            contents.sessionAttributes = deserializeAws_restJson1StringMap(data.sessionAttributes, context);\n          }\n          if (data.sessionId != null) {\n            contents.sessionId = __expectString(data.sessionId);\n          }\n          return [2, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1GetSessionCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"BadRequestException\":\n              return [3, 2];\n            case \"com.amazonaws.lexruntimeservice#BadRequestException\":\n              return [3, 2];\n            case \"InternalFailureException\":\n              return [3, 4];\n            case \"com.amazonaws.lexruntimeservice#InternalFailureException\":\n              return [3, 4];\n            case \"LimitExceededException\":\n              return [3, 6];\n            case \"com.amazonaws.lexruntimeservice#LimitExceededException\":\n              return [3, 6];\n            case \"NotFoundException\":\n              return [3, 8];\n            case \"com.amazonaws.lexruntimeservice#NotFoundException\":\n              return [3, 8];\n          }\n          return [3, 10];\n        case 2:\n          return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1InternalFailureExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 11;\n        case 11:\n          return [2];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1PostContentCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return [2, deserializeAws_restJson1PostContentCommandError(output, context)];\n      }\n      contents = map({\n        $metadata: deserializeMetadata(output),\n        contentType: [, output.headers[\"content-type\"]],\n        intentName: [, output.headers[\"x-amz-lex-intent-name\"]],\n        nluIntentConfidence: [function () {\n          return void 0 !== output.headers[\"x-amz-lex-nlu-intent-confidence\"];\n        }, function () {\n          return new __LazyJsonString(Buffer.from(context.base64Decoder(output.headers[\"x-amz-lex-nlu-intent-confidence\"])).toString(\"utf8\"));\n        }],\n        alternativeIntents: [function () {\n          return void 0 !== output.headers[\"x-amz-lex-alternative-intents\"];\n        }, function () {\n          return new __LazyJsonString(Buffer.from(context.base64Decoder(output.headers[\"x-amz-lex-alternative-intents\"])).toString(\"utf8\"));\n        }],\n        slots: [function () {\n          return void 0 !== output.headers[\"x-amz-lex-slots\"];\n        }, function () {\n          return new __LazyJsonString(Buffer.from(context.base64Decoder(output.headers[\"x-amz-lex-slots\"])).toString(\"utf8\"));\n        }],\n        sessionAttributes: [function () {\n          return void 0 !== output.headers[\"x-amz-lex-session-attributes\"];\n        }, function () {\n          return new __LazyJsonString(Buffer.from(context.base64Decoder(output.headers[\"x-amz-lex-session-attributes\"])).toString(\"utf8\"));\n        }],\n        sentimentResponse: [, output.headers[\"x-amz-lex-sentiment\"]],\n        message: [, output.headers[\"x-amz-lex-message\"]],\n        encodedMessage: [, output.headers[\"x-amz-lex-encoded-message\"]],\n        messageFormat: [, output.headers[\"x-amz-lex-message-format\"]],\n        dialogState: [, output.headers[\"x-amz-lex-dialog-state\"]],\n        slotToElicit: [, output.headers[\"x-amz-lex-slot-to-elicit\"]],\n        inputTranscript: [, output.headers[\"x-amz-lex-input-transcript\"]],\n        encodedInputTranscript: [, output.headers[\"x-amz-lex-encoded-input-transcript\"]],\n        botVersion: [, output.headers[\"x-amz-lex-bot-version\"]],\n        sessionId: [, output.headers[\"x-amz-lex-session-id\"]],\n        activeContexts: [function () {\n          return void 0 !== output.headers[\"x-amz-lex-active-contexts\"];\n        }, function () {\n          return new __LazyJsonString(Buffer.from(context.base64Decoder(output.headers[\"x-amz-lex-active-contexts\"])).toString(\"utf8\"));\n        }]\n      });\n      data = output.body;\n      contents.audioStream = data;\n      return [2, contents];\n    });\n  });\n};\nvar deserializeAws_restJson1PostContentCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"BadGatewayException\":\n              return [3, 2];\n            case \"com.amazonaws.lexruntimeservice#BadGatewayException\":\n              return [3, 2];\n            case \"BadRequestException\":\n              return [3, 4];\n            case \"com.amazonaws.lexruntimeservice#BadRequestException\":\n              return [3, 4];\n            case \"ConflictException\":\n              return [3, 6];\n            case \"com.amazonaws.lexruntimeservice#ConflictException\":\n              return [3, 6];\n            case \"DependencyFailedException\":\n              return [3, 8];\n            case \"com.amazonaws.lexruntimeservice#DependencyFailedException\":\n              return [3, 8];\n            case \"InternalFailureException\":\n              return [3, 10];\n            case \"com.amazonaws.lexruntimeservice#InternalFailureException\":\n              return [3, 10];\n            case \"LimitExceededException\":\n              return [3, 12];\n            case \"com.amazonaws.lexruntimeservice#LimitExceededException\":\n              return [3, 12];\n            case \"LoopDetectedException\":\n              return [3, 14];\n            case \"com.amazonaws.lexruntimeservice#LoopDetectedException\":\n              return [3, 14];\n            case \"NotAcceptableException\":\n              return [3, 16];\n            case \"com.amazonaws.lexruntimeservice#NotAcceptableException\":\n              return [3, 16];\n            case \"NotFoundException\":\n              return [3, 18];\n            case \"com.amazonaws.lexruntimeservice#NotFoundException\":\n              return [3, 18];\n            case \"RequestTimeoutException\":\n              return [3, 20];\n            case \"com.amazonaws.lexruntimeservice#RequestTimeoutException\":\n              return [3, 20];\n            case \"UnsupportedMediaTypeException\":\n              return [3, 22];\n            case \"com.amazonaws.lexruntimeservice#UnsupportedMediaTypeException\":\n              return [3, 22];\n          }\n          return [3, 24];\n        case 2:\n          return [4, deserializeAws_restJson1BadGatewayExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1DependencyFailedExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          return [4, deserializeAws_restJson1InternalFailureExceptionResponse(parsedOutput, context)];\n        case 11:\n          throw _d.sent();\n        case 12:\n          return [4, deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context)];\n        case 13:\n          throw _d.sent();\n        case 14:\n          return [4, deserializeAws_restJson1LoopDetectedExceptionResponse(parsedOutput, context)];\n        case 15:\n          throw _d.sent();\n        case 16:\n          return [4, deserializeAws_restJson1NotAcceptableExceptionResponse(parsedOutput, context)];\n        case 17:\n          throw _d.sent();\n        case 18:\n          return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];\n        case 19:\n          throw _d.sent();\n        case 20:\n          return [4, deserializeAws_restJson1RequestTimeoutExceptionResponse(parsedOutput, context)];\n        case 21:\n          throw _d.sent();\n        case 22:\n          return [4, deserializeAws_restJson1UnsupportedMediaTypeExceptionResponse(parsedOutput, context)];\n        case 23:\n          throw _d.sent();\n        case 24:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 25;\n        case 25:\n          return [2];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1PostTextCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, _a, _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2, deserializeAws_restJson1PostTextCommandError(output, context)];\n          }\n          contents = map({\n            $metadata: deserializeMetadata(output)\n          });\n          _a = __expectNonNull;\n          _b = __expectObject;\n          return [4, parseBody(output.body, context)];\n        case 1:\n          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), \"body\"]);\n          if (data.activeContexts != null) {\n            contents.activeContexts = deserializeAws_restJson1ActiveContextsList(data.activeContexts, context);\n          }\n          if (data.alternativeIntents != null) {\n            contents.alternativeIntents = deserializeAws_restJson1IntentList(data.alternativeIntents, context);\n          }\n          if (data.botVersion != null) {\n            contents.botVersion = __expectString(data.botVersion);\n          }\n          if (data.dialogState != null) {\n            contents.dialogState = __expectString(data.dialogState);\n          }\n          if (data.intentName != null) {\n            contents.intentName = __expectString(data.intentName);\n          }\n          if (data.message != null) {\n            contents.message = __expectString(data.message);\n          }\n          if (data.messageFormat != null) {\n            contents.messageFormat = __expectString(data.messageFormat);\n          }\n          if (data.nluIntentConfidence != null) {\n            contents.nluIntentConfidence = deserializeAws_restJson1IntentConfidence(data.nluIntentConfidence, context);\n          }\n          if (data.responseCard != null) {\n            contents.responseCard = deserializeAws_restJson1ResponseCard(data.responseCard, context);\n          }\n          if (data.sentimentResponse != null) {\n            contents.sentimentResponse = deserializeAws_restJson1SentimentResponse(data.sentimentResponse, context);\n          }\n          if (data.sessionAttributes != null) {\n            contents.sessionAttributes = deserializeAws_restJson1StringMap(data.sessionAttributes, context);\n          }\n          if (data.sessionId != null) {\n            contents.sessionId = __expectString(data.sessionId);\n          }\n          if (data.slotToElicit != null) {\n            contents.slotToElicit = __expectString(data.slotToElicit);\n          }\n          if (data.slots != null) {\n            contents.slots = deserializeAws_restJson1StringMap(data.slots, context);\n          }\n          return [2, contents];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1PostTextCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"BadGatewayException\":\n              return [3, 2];\n            case \"com.amazonaws.lexruntimeservice#BadGatewayException\":\n              return [3, 2];\n            case \"BadRequestException\":\n              return [3, 4];\n            case \"com.amazonaws.lexruntimeservice#BadRequestException\":\n              return [3, 4];\n            case \"ConflictException\":\n              return [3, 6];\n            case \"com.amazonaws.lexruntimeservice#ConflictException\":\n              return [3, 6];\n            case \"DependencyFailedException\":\n              return [3, 8];\n            case \"com.amazonaws.lexruntimeservice#DependencyFailedException\":\n              return [3, 8];\n            case \"InternalFailureException\":\n              return [3, 10];\n            case \"com.amazonaws.lexruntimeservice#InternalFailureException\":\n              return [3, 10];\n            case \"LimitExceededException\":\n              return [3, 12];\n            case \"com.amazonaws.lexruntimeservice#LimitExceededException\":\n              return [3, 12];\n            case \"LoopDetectedException\":\n              return [3, 14];\n            case \"com.amazonaws.lexruntimeservice#LoopDetectedException\":\n              return [3, 14];\n            case \"NotFoundException\":\n              return [3, 16];\n            case \"com.amazonaws.lexruntimeservice#NotFoundException\":\n              return [3, 16];\n          }\n          return [3, 18];\n        case 2:\n          return [4, deserializeAws_restJson1BadGatewayExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1DependencyFailedExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          return [4, deserializeAws_restJson1InternalFailureExceptionResponse(parsedOutput, context)];\n        case 11:\n          throw _d.sent();\n        case 12:\n          return [4, deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context)];\n        case 13:\n          throw _d.sent();\n        case 14:\n          return [4, deserializeAws_restJson1LoopDetectedExceptionResponse(parsedOutput, context)];\n        case 15:\n          throw _d.sent();\n        case 16:\n          return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];\n        case 17:\n          throw _d.sent();\n        case 18:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 19;\n        case 19:\n          return [2];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1PutSessionCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return [2, deserializeAws_restJson1PutSessionCommandError(output, context)];\n      }\n      contents = map({\n        $metadata: deserializeMetadata(output),\n        contentType: [, output.headers[\"content-type\"]],\n        intentName: [, output.headers[\"x-amz-lex-intent-name\"]],\n        slots: [function () {\n          return void 0 !== output.headers[\"x-amz-lex-slots\"];\n        }, function () {\n          return new __LazyJsonString(Buffer.from(context.base64Decoder(output.headers[\"x-amz-lex-slots\"])).toString(\"utf8\"));\n        }],\n        sessionAttributes: [function () {\n          return void 0 !== output.headers[\"x-amz-lex-session-attributes\"];\n        }, function () {\n          return new __LazyJsonString(Buffer.from(context.base64Decoder(output.headers[\"x-amz-lex-session-attributes\"])).toString(\"utf8\"));\n        }],\n        message: [, output.headers[\"x-amz-lex-message\"]],\n        encodedMessage: [, output.headers[\"x-amz-lex-encoded-message\"]],\n        messageFormat: [, output.headers[\"x-amz-lex-message-format\"]],\n        dialogState: [, output.headers[\"x-amz-lex-dialog-state\"]],\n        slotToElicit: [, output.headers[\"x-amz-lex-slot-to-elicit\"]],\n        sessionId: [, output.headers[\"x-amz-lex-session-id\"]],\n        activeContexts: [function () {\n          return void 0 !== output.headers[\"x-amz-lex-active-contexts\"];\n        }, function () {\n          return new __LazyJsonString(Buffer.from(context.base64Decoder(output.headers[\"x-amz-lex-active-contexts\"])).toString(\"utf8\"));\n        }]\n      });\n      data = output.body;\n      contents.audioStream = data;\n      return [2, contents];\n    });\n  });\n};\nvar deserializeAws_restJson1PutSessionCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, errorCode, _b, parsedBody;\n    var _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _c = {};\n          return [4, parseErrorBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"BadGatewayException\":\n              return [3, 2];\n            case \"com.amazonaws.lexruntimeservice#BadGatewayException\":\n              return [3, 2];\n            case \"BadRequestException\":\n              return [3, 4];\n            case \"com.amazonaws.lexruntimeservice#BadRequestException\":\n              return [3, 4];\n            case \"ConflictException\":\n              return [3, 6];\n            case \"com.amazonaws.lexruntimeservice#ConflictException\":\n              return [3, 6];\n            case \"DependencyFailedException\":\n              return [3, 8];\n            case \"com.amazonaws.lexruntimeservice#DependencyFailedException\":\n              return [3, 8];\n            case \"InternalFailureException\":\n              return [3, 10];\n            case \"com.amazonaws.lexruntimeservice#InternalFailureException\":\n              return [3, 10];\n            case \"LimitExceededException\":\n              return [3, 12];\n            case \"com.amazonaws.lexruntimeservice#LimitExceededException\":\n              return [3, 12];\n            case \"NotAcceptableException\":\n              return [3, 14];\n            case \"com.amazonaws.lexruntimeservice#NotAcceptableException\":\n              return [3, 14];\n            case \"NotFoundException\":\n              return [3, 16];\n            case \"com.amazonaws.lexruntimeservice#NotFoundException\":\n              return [3, 16];\n          }\n          return [3, 18];\n        case 2:\n          return [4, deserializeAws_restJson1BadGatewayExceptionResponse(parsedOutput, context)];\n        case 3:\n          throw _d.sent();\n        case 4:\n          return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];\n        case 5:\n          throw _d.sent();\n        case 6:\n          return [4, deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];\n        case 7:\n          throw _d.sent();\n        case 8:\n          return [4, deserializeAws_restJson1DependencyFailedExceptionResponse(parsedOutput, context)];\n        case 9:\n          throw _d.sent();\n        case 10:\n          return [4, deserializeAws_restJson1InternalFailureExceptionResponse(parsedOutput, context)];\n        case 11:\n          throw _d.sent();\n        case 12:\n          return [4, deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context)];\n        case 13:\n          throw _d.sent();\n        case 14:\n          return [4, deserializeAws_restJson1NotAcceptableExceptionResponse(parsedOutput, context)];\n        case 15:\n          throw _d.sent();\n        case 16:\n          return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];\n        case 17:\n          throw _d.sent();\n        case 18:\n          parsedBody = parsedOutput.body;\n          throwDefaultError({\n            output: output,\n            parsedBody: parsedBody,\n            exceptionCtor: __BaseException,\n            errorCode: errorCode\n          });\n          _d.label = 19;\n        case 19:\n          return [2];\n      }\n    });\n  });\n};\nvar map = __map;\nvar deserializeAws_restJson1BadGatewayExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, exception;\n    return __generator(this, function (_a) {\n      contents = map({});\n      data = parsedOutput.body;\n      if (data.Message != null) {\n        contents.Message = __expectString(data.Message);\n      }\n      exception = new BadGatewayException(__assign({\n        $metadata: deserializeMetadata(parsedOutput)\n      }, contents));\n      return [2, __decorateServiceException(exception, parsedOutput.body)];\n    });\n  });\n};\nvar deserializeAws_restJson1BadRequestExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, exception;\n    return __generator(this, function (_a) {\n      contents = map({});\n      data = parsedOutput.body;\n      if (data.message != null) {\n        contents.message = __expectString(data.message);\n      }\n      exception = new BadRequestException(__assign({\n        $metadata: deserializeMetadata(parsedOutput)\n      }, contents));\n      return [2, __decorateServiceException(exception, parsedOutput.body)];\n    });\n  });\n};\nvar deserializeAws_restJson1ConflictExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, exception;\n    return __generator(this, function (_a) {\n      contents = map({});\n      data = parsedOutput.body;\n      if (data.message != null) {\n        contents.message = __expectString(data.message);\n      }\n      exception = new ConflictException(__assign({\n        $metadata: deserializeMetadata(parsedOutput)\n      }, contents));\n      return [2, __decorateServiceException(exception, parsedOutput.body)];\n    });\n  });\n};\nvar deserializeAws_restJson1DependencyFailedExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, exception;\n    return __generator(this, function (_a) {\n      contents = map({});\n      data = parsedOutput.body;\n      if (data.Message != null) {\n        contents.Message = __expectString(data.Message);\n      }\n      exception = new DependencyFailedException(__assign({\n        $metadata: deserializeMetadata(parsedOutput)\n      }, contents));\n      return [2, __decorateServiceException(exception, parsedOutput.body)];\n    });\n  });\n};\nvar deserializeAws_restJson1InternalFailureExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, exception;\n    return __generator(this, function (_a) {\n      contents = map({});\n      data = parsedOutput.body;\n      if (data.message != null) {\n        contents.message = __expectString(data.message);\n      }\n      exception = new InternalFailureException(__assign({\n        $metadata: deserializeMetadata(parsedOutput)\n      }, contents));\n      return [2, __decorateServiceException(exception, parsedOutput.body)];\n    });\n  });\n};\nvar deserializeAws_restJson1LimitExceededExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, exception;\n    return __generator(this, function (_a) {\n      contents = map({\n        retryAfterSeconds: [, parsedOutput.headers[\"retry-after\"]]\n      });\n      data = parsedOutput.body;\n      if (data.message != null) {\n        contents.message = __expectString(data.message);\n      }\n      exception = new LimitExceededException(__assign({\n        $metadata: deserializeMetadata(parsedOutput)\n      }, contents));\n      return [2, __decorateServiceException(exception, parsedOutput.body)];\n    });\n  });\n};\nvar deserializeAws_restJson1LoopDetectedExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, exception;\n    return __generator(this, function (_a) {\n      contents = map({});\n      data = parsedOutput.body;\n      if (data.Message != null) {\n        contents.Message = __expectString(data.Message);\n      }\n      exception = new LoopDetectedException(__assign({\n        $metadata: deserializeMetadata(parsedOutput)\n      }, contents));\n      return [2, __decorateServiceException(exception, parsedOutput.body)];\n    });\n  });\n};\nvar deserializeAws_restJson1NotAcceptableExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, exception;\n    return __generator(this, function (_a) {\n      contents = map({});\n      data = parsedOutput.body;\n      if (data.message != null) {\n        contents.message = __expectString(data.message);\n      }\n      exception = new NotAcceptableException(__assign({\n        $metadata: deserializeMetadata(parsedOutput)\n      }, contents));\n      return [2, __decorateServiceException(exception, parsedOutput.body)];\n    });\n  });\n};\nvar deserializeAws_restJson1NotFoundExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, exception;\n    return __generator(this, function (_a) {\n      contents = map({});\n      data = parsedOutput.body;\n      if (data.message != null) {\n        contents.message = __expectString(data.message);\n      }\n      exception = new NotFoundException(__assign({\n        $metadata: deserializeMetadata(parsedOutput)\n      }, contents));\n      return [2, __decorateServiceException(exception, parsedOutput.body)];\n    });\n  });\n};\nvar deserializeAws_restJson1RequestTimeoutExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, exception;\n    return __generator(this, function (_a) {\n      contents = map({});\n      data = parsedOutput.body;\n      if (data.message != null) {\n        contents.message = __expectString(data.message);\n      }\n      exception = new RequestTimeoutException(__assign({\n        $metadata: deserializeMetadata(parsedOutput)\n      }, contents));\n      return [2, __decorateServiceException(exception, parsedOutput.body)];\n    });\n  });\n};\nvar deserializeAws_restJson1UnsupportedMediaTypeExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data, exception;\n    return __generator(this, function (_a) {\n      contents = map({});\n      data = parsedOutput.body;\n      if (data.message != null) {\n        contents.message = __expectString(data.message);\n      }\n      exception = new UnsupportedMediaTypeException(__assign({\n        $metadata: deserializeMetadata(parsedOutput)\n      }, contents));\n      return [2, __decorateServiceException(exception, parsedOutput.body)];\n    });\n  });\n};\nvar serializeAws_restJson1ActiveContext = function (input, context) {\n  return __assign(__assign(__assign({}, input.name != null && {\n    name: input.name\n  }), input.parameters != null && {\n    parameters: serializeAws_restJson1ActiveContextParametersMap(input.parameters, context)\n  }), input.timeToLive != null && {\n    timeToLive: serializeAws_restJson1ActiveContextTimeToLive(input.timeToLive, context)\n  });\n};\nvar serializeAws_restJson1ActiveContextParametersMap = function (input, context) {\n  return Object.entries(input).reduce(function (acc, _a) {\n    var _b;\n    var _c = __read(_a, 2),\n      key = _c[0],\n      value = _c[1];\n    if (value === null) {\n      return acc;\n    }\n    return __assign(__assign({}, acc), (_b = {}, _b[key] = value, _b));\n  }, {});\n};\nvar serializeAws_restJson1ActiveContextsList = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    return serializeAws_restJson1ActiveContext(entry, context);\n  });\n};\nvar serializeAws_restJson1ActiveContextTimeToLive = function (input, context) {\n  return __assign(__assign({}, input.timeToLiveInSeconds != null && {\n    timeToLiveInSeconds: input.timeToLiveInSeconds\n  }), input.turnsToLive != null && {\n    turnsToLive: input.turnsToLive\n  });\n};\nvar serializeAws_restJson1DialogAction = function (input, context) {\n  return __assign(__assign(__assign(__assign(__assign(__assign(__assign({}, input.fulfillmentState != null && {\n    fulfillmentState: input.fulfillmentState\n  }), input.intentName != null && {\n    intentName: input.intentName\n  }), input.message != null && {\n    message: input.message\n  }), input.messageFormat != null && {\n    messageFormat: input.messageFormat\n  }), input.slotToElicit != null && {\n    slotToElicit: input.slotToElicit\n  }), input.slots != null && {\n    slots: serializeAws_restJson1StringMap(input.slots, context)\n  }), input.type != null && {\n    type: input.type\n  });\n};\nvar serializeAws_restJson1IntentSummary = function (input, context) {\n  return __assign(__assign(__assign(__assign(__assign(__assign(__assign({}, input.checkpointLabel != null && {\n    checkpointLabel: input.checkpointLabel\n  }), input.confirmationStatus != null && {\n    confirmationStatus: input.confirmationStatus\n  }), input.dialogActionType != null && {\n    dialogActionType: input.dialogActionType\n  }), input.fulfillmentState != null && {\n    fulfillmentState: input.fulfillmentState\n  }), input.intentName != null && {\n    intentName: input.intentName\n  }), input.slotToElicit != null && {\n    slotToElicit: input.slotToElicit\n  }), input.slots != null && {\n    slots: serializeAws_restJson1StringMap(input.slots, context)\n  });\n};\nvar serializeAws_restJson1IntentSummaryList = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    return serializeAws_restJson1IntentSummary(entry, context);\n  });\n};\nvar serializeAws_restJson1StringMap = function (input, context) {\n  return Object.entries(input).reduce(function (acc, _a) {\n    var _b;\n    var _c = __read(_a, 2),\n      key = _c[0],\n      value = _c[1];\n    if (value === null) {\n      return acc;\n    }\n    return __assign(__assign({}, acc), (_b = {}, _b[key] = value, _b));\n  }, {});\n};\nvar deserializeAws_restJson1ActiveContext = function (output, context) {\n  return {\n    name: __expectString(output.name),\n    parameters: output.parameters != null ? deserializeAws_restJson1ActiveContextParametersMap(output.parameters, context) : undefined,\n    timeToLive: output.timeToLive != null ? deserializeAws_restJson1ActiveContextTimeToLive(output.timeToLive, context) : undefined\n  };\n};\nvar deserializeAws_restJson1ActiveContextParametersMap = function (output, context) {\n  return Object.entries(output).reduce(function (acc, _a) {\n    var _b;\n    var _c = __read(_a, 2),\n      key = _c[0],\n      value = _c[1];\n    if (value === null) {\n      return acc;\n    }\n    return __assign(__assign({}, acc), (_b = {}, _b[key] = __expectString(value), _b));\n  }, {});\n};\nvar deserializeAws_restJson1ActiveContextsList = function (output, context) {\n  var retVal = (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restJson1ActiveContext(entry, context);\n  });\n  return retVal;\n};\nvar deserializeAws_restJson1ActiveContextTimeToLive = function (output, context) {\n  return {\n    timeToLiveInSeconds: __expectInt32(output.timeToLiveInSeconds),\n    turnsToLive: __expectInt32(output.turnsToLive)\n  };\n};\nvar deserializeAws_restJson1Button = function (output, context) {\n  return {\n    text: __expectString(output.text),\n    value: __expectString(output.value)\n  };\n};\nvar deserializeAws_restJson1DialogAction = function (output, context) {\n  return {\n    fulfillmentState: __expectString(output.fulfillmentState),\n    intentName: __expectString(output.intentName),\n    message: __expectString(output.message),\n    messageFormat: __expectString(output.messageFormat),\n    slotToElicit: __expectString(output.slotToElicit),\n    slots: output.slots != null ? deserializeAws_restJson1StringMap(output.slots, context) : undefined,\n    type: __expectString(output.type)\n  };\n};\nvar deserializeAws_restJson1GenericAttachment = function (output, context) {\n  return {\n    attachmentLinkUrl: __expectString(output.attachmentLinkUrl),\n    buttons: output.buttons != null ? deserializeAws_restJson1listOfButtons(output.buttons, context) : undefined,\n    imageUrl: __expectString(output.imageUrl),\n    subTitle: __expectString(output.subTitle),\n    title: __expectString(output.title)\n  };\n};\nvar deserializeAws_restJson1genericAttachmentList = function (output, context) {\n  var retVal = (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restJson1GenericAttachment(entry, context);\n  });\n  return retVal;\n};\nvar deserializeAws_restJson1IntentConfidence = function (output, context) {\n  return {\n    score: __limitedParseDouble(output.score)\n  };\n};\nvar deserializeAws_restJson1IntentList = function (output, context) {\n  var retVal = (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restJson1PredictedIntent(entry, context);\n  });\n  return retVal;\n};\nvar deserializeAws_restJson1IntentSummary = function (output, context) {\n  return {\n    checkpointLabel: __expectString(output.checkpointLabel),\n    confirmationStatus: __expectString(output.confirmationStatus),\n    dialogActionType: __expectString(output.dialogActionType),\n    fulfillmentState: __expectString(output.fulfillmentState),\n    intentName: __expectString(output.intentName),\n    slotToElicit: __expectString(output.slotToElicit),\n    slots: output.slots != null ? deserializeAws_restJson1StringMap(output.slots, context) : undefined\n  };\n};\nvar deserializeAws_restJson1IntentSummaryList = function (output, context) {\n  var retVal = (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restJson1IntentSummary(entry, context);\n  });\n  return retVal;\n};\nvar deserializeAws_restJson1listOfButtons = function (output, context) {\n  var retVal = (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restJson1Button(entry, context);\n  });\n  return retVal;\n};\nvar deserializeAws_restJson1PredictedIntent = function (output, context) {\n  return {\n    intentName: __expectString(output.intentName),\n    nluIntentConfidence: output.nluIntentConfidence != null ? deserializeAws_restJson1IntentConfidence(output.nluIntentConfidence, context) : undefined,\n    slots: output.slots != null ? deserializeAws_restJson1StringMap(output.slots, context) : undefined\n  };\n};\nvar deserializeAws_restJson1ResponseCard = function (output, context) {\n  return {\n    contentType: __expectString(output.contentType),\n    genericAttachments: output.genericAttachments != null ? deserializeAws_restJson1genericAttachmentList(output.genericAttachments, context) : undefined,\n    version: __expectString(output.version)\n  };\n};\nvar deserializeAws_restJson1SentimentResponse = function (output, context) {\n  return {\n    sentimentLabel: __expectString(output.sentimentLabel),\n    sentimentScore: __expectString(output.sentimentScore)\n  };\n};\nvar deserializeAws_restJson1StringMap = function (output, context) {\n  return Object.entries(output).reduce(function (acc, _a) {\n    var _b;\n    var _c = __read(_a, 2),\n      key = _c[0],\n      value = _c[1];\n    if (value === null) {\n      return acc;\n    }\n    return __assign(__assign({}, acc), (_b = {}, _b[key] = __expectString(value), _b));\n  }, {});\n};\nvar deserializeMetadata = function (output) {\n  var _a, _b;\n  return {\n    httpStatusCode: output.statusCode,\n    requestId: (_b = (_a = output.headers[\"x-amzn-requestid\"]) !== null && _a !== void 0 ? _a : output.headers[\"x-amzn-request-id\"]) !== null && _b !== void 0 ? _b : output.headers[\"x-amz-request-id\"],\n    extendedRequestId: output.headers[\"x-amz-id-2\"],\n    cfId: output.headers[\"x-amz-cf-id\"]\n  };\n};\nvar collectBody = function (streamBody, context) {\n  if (streamBody === void 0) {\n    streamBody = new Uint8Array();\n  }\n  if (streamBody instanceof Uint8Array) {\n    return Promise.resolve(streamBody);\n  }\n  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\nvar collectBodyString = function (streamBody, context) {\n  return collectBody(streamBody, context).then(function (body) {\n    return context.utf8Encoder(body);\n  });\n};\nvar isSerializableHeaderValue = function (value) {\n  return value !== undefined && value !== null && value !== \"\" && (!Object.getOwnPropertyNames(value).includes(\"length\") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes(\"size\") || value.size != 0);\n};\nvar parseBody = function (streamBody, context) {\n  return collectBodyString(streamBody, context).then(function (encoded) {\n    if (encoded.length) {\n      return JSON.parse(encoded);\n    }\n    return {};\n  });\n};\nvar parseErrorBody = function (errorBody, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var value;\n    var _a;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          return [4, parseBody(errorBody, context)];\n        case 1:\n          value = _b.sent();\n          value.message = (_a = value.message) !== null && _a !== void 0 ? _a : value.Message;\n          return [2, value];\n      }\n    });\n  });\n};\nvar loadRestJsonErrorCode = function (output, data) {\n  var findKey = function (object, key) {\n    return Object.keys(object).find(function (k) {\n      return k.toLowerCase() === key.toLowerCase();\n    });\n  };\n  var sanitizeErrorCode = function (rawValue) {\n    var cleanValue = rawValue;\n    if (typeof cleanValue === \"number\") {\n      cleanValue = cleanValue.toString();\n    }\n    if (cleanValue.indexOf(\",\") >= 0) {\n      cleanValue = cleanValue.split(\",\")[0];\n    }\n    if (cleanValue.indexOf(\":\") >= 0) {\n      cleanValue = cleanValue.split(\":\")[0];\n    }\n    if (cleanValue.indexOf(\"#\") >= 0) {\n      cleanValue = cleanValue.split(\"#\")[1];\n    }\n    return cleanValue;\n  };\n  var headerKey = findKey(output.headers, \"x-amzn-errortype\");\n  if (headerKey !== undefined) {\n    return sanitizeErrorCode(output.headers[headerKey]);\n  }\n  if (data.code !== undefined) {\n    return sanitizeErrorCode(data.code);\n  }\n  if (data[\"__type\"] !== undefined) {\n    return sanitizeErrorCode(data[\"__type\"]);\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}