{"ast":null,"code":"import { RECONNECT_DELAY, RECONNECT_INTERVAL } from '../Providers/constants';\nexport var ReconnectEvent = /*#__PURE__*/function (ReconnectEvent) {\n  ReconnectEvent[\"START_RECONNECT\"] = \"START_RECONNECT\";\n  ReconnectEvent[\"HALT_RECONNECT\"] = \"HALT_RECONNECT\";\n  return ReconnectEvent;\n}(ReconnectEvent || {});\n/**\n * Captures the reconnect event logic used to determine when to reconnect to PubSub providers.\n *   Reconnnect attempts are delayed by 5 seconds to let the interface settle.\n *   Attempting to reconnect only once creates unrecoverable states when the network state isn't\n *   supported by the browser, so this keeps retrying every minute until halted.\n */\nvar ReconnectionMonitor = /** @class */function () {\n  function ReconnectionMonitor() {\n    this.reconnectObservers = [];\n  }\n  /**\n   * Add reconnect observer to the list of observers to alert on reconnect\n   */\n  ReconnectionMonitor.prototype.addObserver = function (reconnectObserver) {\n    this.reconnectObservers.push(reconnectObserver);\n  };\n  /**\n   * Given a reconnect event, start the appropriate behavior\n   */\n  ReconnectionMonitor.prototype.record = function (event) {\n    var _this = this;\n    if (event === ReconnectEvent.START_RECONNECT) {\n      // If the reconnection hasn't been started\n      if (this.reconnectSetTimeoutId === undefined && this.reconnectIntervalId === undefined) {\n        this.reconnectSetTimeoutId = setTimeout(function () {\n          // Reconnect now\n          _this._triggerReconnect();\n          // Retry reconnect every periodically until it works\n          _this.reconnectIntervalId = setInterval(function () {\n            _this._triggerReconnect();\n          }, RECONNECT_INTERVAL);\n        }, RECONNECT_DELAY);\n      }\n    }\n    if (event === ReconnectEvent.HALT_RECONNECT) {\n      if (this.reconnectIntervalId) {\n        clearInterval(this.reconnectIntervalId);\n        this.reconnectIntervalId = undefined;\n      }\n      if (this.reconnectSetTimeoutId) {\n        clearTimeout(this.reconnectSetTimeoutId);\n        this.reconnectSetTimeoutId = undefined;\n      }\n    }\n  };\n  /**\n   * Complete all reconnect observers\n   */\n  ReconnectionMonitor.prototype.close = function () {\n    this.reconnectObservers.forEach(function (reconnectObserver) {\n      var _a;\n      (_a = reconnectObserver.complete) === null || _a === void 0 ? void 0 : _a.call(reconnectObserver);\n    });\n  };\n  ReconnectionMonitor.prototype._triggerReconnect = function () {\n    this.reconnectObservers.forEach(function (reconnectObserver) {\n      var _a;\n      (_a = reconnectObserver.next) === null || _a === void 0 ? void 0 : _a.call(reconnectObserver);\n    });\n  };\n  return ReconnectionMonitor;\n}();\nexport { ReconnectionMonitor };\n//# sourceMappingURL=ReconnectionMonitor.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}