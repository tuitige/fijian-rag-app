{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { getHashedDataAsHex } from './dataHashHelpers';\nimport { getCanonicalRequest } from './getCanonicalRequest';\nimport { getSigningKey } from './getSigningKey';\nimport { getStringToSign } from './getStringToSign';\n/**\n * Calculates and returns an AWS API Signature.\n * https://docs.aws.amazon.com/IAM/latest/UserGuide/create-signed-request.html\n *\n * @param request `HttpRequest` to be signed.\n * @param signRequestOptions `SignRequestOptions` object containing values used to construct the signature.\n * @returns AWS API Signature to sign a request or url with.\n *\n * @internal\n */\nexport var getSignature = function (request, _a) {\n  var credentialScope = _a.credentialScope,\n    longDate = _a.longDate,\n    secretAccessKey = _a.secretAccessKey,\n    shortDate = _a.shortDate,\n    signingRegion = _a.signingRegion,\n    signingService = _a.signingService,\n    uriEscapePath = _a.uriEscapePath;\n  // step 1: create a canonical request\n  var canonicalRequest = getCanonicalRequest(request, uriEscapePath);\n  // step 2: create a hash of the canonical request\n  var hashedRequest = getHashedDataAsHex(null, canonicalRequest);\n  // step 3: create a string to sign\n  var stringToSign = getStringToSign(longDate, credentialScope, hashedRequest);\n  // step 4: calculate the signature\n  var signature = getHashedDataAsHex(getSigningKey(secretAccessKey, shortDate, signingRegion, signingService), stringToSign);\n  return signature;\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}