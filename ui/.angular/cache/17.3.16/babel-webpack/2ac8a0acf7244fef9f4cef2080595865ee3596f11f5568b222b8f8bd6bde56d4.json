{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { StartQueryRequest, StartQueryResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1StartQueryCommand, serializeAws_json1_1StartQueryCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Schedules a query of a log group using CloudWatch Logs Insights. You specify the log group\n *       and time range to query and the query string to use.</p>\n *          <p>For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_QuerySyntax.html\">CloudWatch Logs Insights Query Syntax</a>.</p>\n *\n *          <p>Queries time out after 15 minutes of execution. If your queries are timing out, reduce the\n *       time range being searched or partition your query into a number of queries.</p>\n */\nvar StartQueryCommand = /** @class */function (_super) {\n  __extends(StartQueryCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function StartQueryCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  StartQueryCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"CloudWatchLogsClient\";\n    var commandName = \"StartQueryCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: StartQueryRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: StartQueryResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  StartQueryCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1StartQueryCommand(input, context);\n  };\n  StartQueryCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1StartQueryCommand(output, context);\n  };\n  return StartQueryCommand;\n}($Command);\nexport { StartQueryCommand };\n//# sourceMappingURL=StartQueryCommand.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}