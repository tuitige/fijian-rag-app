{"ast":null,"code":"import { __asyncGenerator, __asyncValues, __await, __generator } from \"tslib\";\nimport { EventStreamCodec } from \"@aws-sdk/eventstream-codec\";\nimport { getChunkedStream } from \"./getChunkedStream\";\nimport { getUnmarshalledStream } from \"./getUnmarshalledStream\";\nvar EventStreamMarshaller = function () {\n  function EventStreamMarshaller(_a) {\n    var utf8Encoder = _a.utf8Encoder,\n      utf8Decoder = _a.utf8Decoder;\n    this.eventStreamCodec = new EventStreamCodec(utf8Encoder, utf8Decoder);\n    this.utfEncoder = utf8Encoder;\n  }\n  EventStreamMarshaller.prototype.deserialize = function (body, deserializer) {\n    var chunkedStream = getChunkedStream(body);\n    var unmarshalledStream = getUnmarshalledStream(chunkedStream, {\n      eventStreamCodec: this.eventStreamCodec,\n      deserializer: deserializer,\n      toUtf8: this.utfEncoder\n    });\n    return unmarshalledStream;\n  };\n  EventStreamMarshaller.prototype.serialize = function (input, serializer) {\n    var _a;\n    var self = this;\n    var serializedIterator = function () {\n      return __asyncGenerator(this, arguments, function () {\n        var input_1, input_1_1, chunk, payloadBuf, e_1_1;\n        var e_1, _a;\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              _b.trys.push([0, 7, 8, 13]);\n              input_1 = __asyncValues(input);\n              _b.label = 1;\n            case 1:\n              return [4, __await(input_1.next())];\n            case 2:\n              if (!(input_1_1 = _b.sent(), !input_1_1.done)) return [3, 6];\n              chunk = input_1_1.value;\n              payloadBuf = self.eventStreamCodec.encode(serializer(chunk));\n              return [4, __await(payloadBuf)];\n            case 3:\n              return [4, _b.sent()];\n            case 4:\n              _b.sent();\n              _b.label = 5;\n            case 5:\n              return [3, 1];\n            case 6:\n              return [3, 13];\n            case 7:\n              e_1_1 = _b.sent();\n              e_1 = {\n                error: e_1_1\n              };\n              return [3, 13];\n            case 8:\n              _b.trys.push([8,, 11, 12]);\n              if (!(input_1_1 && !input_1_1.done && (_a = input_1.return))) return [3, 10];\n              return [4, __await(_a.call(input_1))];\n            case 9:\n              _b.sent();\n              _b.label = 10;\n            case 10:\n              return [3, 12];\n            case 11:\n              if (e_1) throw e_1.error;\n              return [7];\n            case 12:\n              return [7];\n            case 13:\n              return [4, __await(new Uint8Array(0))];\n            case 14:\n              return [4, _b.sent()];\n            case 15:\n              _b.sent();\n              return [2];\n          }\n        });\n      });\n    };\n    return _a = {}, _a[Symbol.asyncIterator] = serializedIterator, _a;\n  };\n  return EventStreamMarshaller;\n}();\nexport { EventStreamMarshaller };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}