{"ast":null,"code":"import { __assign, __awaiter, __generator, __read, __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { print, parse, GraphQLError } from 'graphql';\nimport { Amplify, ConsoleLogger as Logger, Credentials, getAmplifyUserAgent, INTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER } from '@aws-amplify/core';\nimport { InternalPubSub } from '@aws-amplify/pubsub/internals';\nimport { Auth } from '@aws-amplify/auth';\nimport { Cache } from '@aws-amplify/cache';\nimport { GraphQLAuthError } from '../types';\nimport { RestClient } from '@aws-amplify/api-rest';\nvar USER_AGENT_HEADER = 'x-amz-user-agent';\nvar logger = new Logger('GraphQLAPI');\nexport var graphqlOperation = function (query, variables, authToken) {\n  if (variables === void 0) {\n    variables = {};\n  }\n  return {\n    query: query,\n    variables: variables,\n    authToken: authToken\n  };\n};\n/**\n * Export Cloud Logic APIs\n */\nvar InternalGraphQLAPIClass = /** @class */function () {\n  /**\n   * Initialize GraphQL API with AWS configuration\n   * @param {Object} options - Configuration object for API\n   */\n  function InternalGraphQLAPIClass(options) {\n    this._api = null;\n    this.Auth = Auth;\n    this.Cache = Cache;\n    this.Credentials = Credentials;\n    this._options = options;\n    logger.debug('API Options', this._options);\n  }\n  InternalGraphQLAPIClass.prototype.getModuleName = function () {\n    return 'InternalGraphQLAPI';\n  };\n  /**\n   * Configure API\n   * @param {Object} config - Configuration of the API\n   * @return {Object} - The current configuration\n   */\n  InternalGraphQLAPIClass.prototype.configure = function (options) {\n    var _a = options || {},\n      _b = _a.API,\n      API = _b === void 0 ? {} : _b,\n      otherOptions = __rest(_a, [\"API\"]);\n    var opt = __assign(__assign({}, otherOptions), API);\n    logger.debug('configure GraphQL API', {\n      opt: opt\n    });\n    if (opt['aws_project_region']) {\n      opt = Object.assign({}, opt, {\n        region: opt['aws_project_region'],\n        header: {}\n      });\n    }\n    if (typeof opt.graphql_headers !== 'undefined' && typeof opt.graphql_headers !== 'function') {\n      logger.warn('graphql_headers should be a function');\n      opt.graphql_headers = undefined;\n    }\n    this._options = Object.assign({}, this._options, opt);\n    this.createInstance();\n    return this._options;\n  };\n  /**\n   * Create an instance of API for the library\n   * @return - A promise of true if Success\n   */\n  InternalGraphQLAPIClass.prototype.createInstance = function () {\n    logger.debug('create Rest instance');\n    if (this._options) {\n      this._api = new RestClient(this._options);\n      // Share instance Credentials with client for SSR\n      this._api.Credentials = this.Credentials;\n      return true;\n    } else {\n      return Promise.reject('API not configured');\n    }\n  };\n  InternalGraphQLAPIClass.prototype._headerBasedAuth = function (defaultAuthenticationType, additionalHeaders) {\n    if (additionalHeaders === void 0) {\n      additionalHeaders = {};\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, aws_appsync_authenticationType, apiKey, authenticationType, headers, _b, credentialsOK, token, federatedInfo, currentUser, e_1, session, e_2;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _a = this._options, aws_appsync_authenticationType = _a.aws_appsync_authenticationType, apiKey = _a.aws_appsync_apiKey;\n            authenticationType = defaultAuthenticationType || aws_appsync_authenticationType || 'AWS_IAM';\n            headers = {};\n            _b = authenticationType;\n            switch (_b) {\n              case 'API_KEY':\n                return [3 /*break*/, 1];\n              case 'AWS_IAM':\n                return [3 /*break*/, 2];\n              case 'OPENID_CONNECT':\n                return [3 /*break*/, 4];\n              case 'AMAZON_COGNITO_USER_POOLS':\n                return [3 /*break*/, 11];\n              case 'AWS_LAMBDA':\n                return [3 /*break*/, 15];\n            }\n            return [3 /*break*/, 16];\n          case 1:\n            if (!apiKey) {\n              throw new Error(GraphQLAuthError.NO_API_KEY);\n            }\n            headers = {\n              Authorization: null,\n              'X-Api-Key': apiKey\n            };\n            return [3 /*break*/, 17];\n          case 2:\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 3:\n            credentialsOK = _c.sent();\n            if (!credentialsOK) {\n              throw new Error(GraphQLAuthError.NO_CREDENTIALS);\n            }\n            return [3 /*break*/, 17];\n          case 4:\n            _c.trys.push([4, 9,, 10]);\n            token = void 0;\n            return [4 /*yield*/, Cache.getItem('federatedInfo')];\n          case 5:\n            federatedInfo = _c.sent();\n            if (!federatedInfo) return [3 /*break*/, 6];\n            token = federatedInfo.token;\n            return [3 /*break*/, 8];\n          case 6:\n            return [4 /*yield*/, Auth.currentAuthenticatedUser()];\n          case 7:\n            currentUser = _c.sent();\n            if (currentUser) {\n              token = currentUser.token;\n            }\n            _c.label = 8;\n          case 8:\n            if (!token) {\n              throw new Error(GraphQLAuthError.NO_FEDERATED_JWT);\n            }\n            headers = {\n              Authorization: token\n            };\n            return [3 /*break*/, 10];\n          case 9:\n            e_1 = _c.sent();\n            throw new Error(GraphQLAuthError.NO_CURRENT_USER);\n          case 10:\n            return [3 /*break*/, 17];\n          case 11:\n            _c.trys.push([11, 13,, 14]);\n            return [4 /*yield*/, this.Auth.currentSession()];\n          case 12:\n            session = _c.sent();\n            headers = {\n              Authorization: session.getAccessToken().getJwtToken()\n            };\n            return [3 /*break*/, 14];\n          case 13:\n            e_2 = _c.sent();\n            throw new Error(GraphQLAuthError.NO_CURRENT_USER);\n          case 14:\n            return [3 /*break*/, 17];\n          case 15:\n            if (!additionalHeaders.Authorization) {\n              throw new Error(GraphQLAuthError.NO_AUTH_TOKEN);\n            }\n            headers = {\n              Authorization: additionalHeaders.Authorization\n            };\n            return [3 /*break*/, 17];\n          case 16:\n            headers = {\n              Authorization: null\n            };\n            return [3 /*break*/, 17];\n          case 17:\n            return [2 /*return*/, headers];\n        }\n      });\n    });\n  };\n  /**\n   * to get the operation type\n   * @param operation\n   */\n  InternalGraphQLAPIClass.prototype.getGraphqlOperationType = function (operation) {\n    var doc = parse(operation);\n    var definitions = doc.definitions;\n    var _a = __read(definitions, 1),\n      operationType = _a[0].operation;\n    return operationType;\n  };\n  /**\n   * Executes a GraphQL operation\n   *\n   * @param options - GraphQL Options\n   * @param [additionalHeaders] - headers to merge in after any `graphql_headers` set in the config\n   * @returns An Observable if the query is a subscription query, else a promise of the graphql result.\n   */\n  InternalGraphQLAPIClass.prototype.graphql = function (_a, additionalHeaders, customUserAgentDetails) {\n    var paramQuery = _a.query,\n      _b = _a.variables,\n      variables = _b === void 0 ? {} : _b,\n      authMode = _a.authMode,\n      authToken = _a.authToken;\n    var query = typeof paramQuery === 'string' ? parse(paramQuery) : parse(print(paramQuery));\n    var _c = __read(query.definitions.filter(function (def) {\n        return def.kind === 'OperationDefinition';\n      }), 1),\n      _d = _c[0],\n      operationDef = _d === void 0 ? {} : _d;\n    var operationType = operationDef.operation;\n    var headers = additionalHeaders || {};\n    // if an authorization header is set, have the explicit authToken take precedence\n    if (authToken) {\n      headers.Authorization = authToken;\n    }\n    switch (operationType) {\n      case 'query':\n      case 'mutation':\n        this.createInstanceIfNotCreated();\n        var cancellableToken = this._api.getCancellableToken();\n        var initParams = {\n          cancellableToken: cancellableToken,\n          withCredentials: this._options.withCredentials\n        };\n        var responsePromise = this._graphql({\n          query: query,\n          variables: variables,\n          authMode: authMode\n        }, headers, initParams, customUserAgentDetails);\n        this._api.updateRequestToBeCancellable(responsePromise, cancellableToken);\n        return responsePromise;\n      case 'subscription':\n        return this._graphqlSubscribe({\n          query: query,\n          variables: variables,\n          authMode: authMode\n        }, headers, customUserAgentDetails);\n      default:\n        throw new Error(\"invalid operation type: \".concat(operationType));\n    }\n  };\n  InternalGraphQLAPIClass.prototype._graphql = function (_a, additionalHeaders, initParams, customUserAgentDetails) {\n    var query = _a.query,\n      variables = _a.variables,\n      authMode = _a.authMode;\n    if (additionalHeaders === void 0) {\n      additionalHeaders = {};\n    }\n    if (initParams === void 0) {\n      initParams = {};\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var _b, region, appSyncGraphqlEndpoint, _c, graphql_headers, customGraphqlEndpoint, customEndpointRegion, headers, _d, _e, _f, _g, _h, _j, body, init, endpoint, error, response, err_1, errors;\n      var _k;\n      return __generator(this, function (_l) {\n        switch (_l.label) {\n          case 0:\n            this.createInstanceIfNotCreated();\n            _b = this._options, region = _b.aws_appsync_region, appSyncGraphqlEndpoint = _b.aws_appsync_graphqlEndpoint, _c = _b.graphql_headers, graphql_headers = _c === void 0 ? function () {\n              return {};\n            } : _c, customGraphqlEndpoint = _b.graphql_endpoint, customEndpointRegion = _b.graphql_endpoint_iam_region;\n            _d = [{}];\n            _e = !customGraphqlEndpoint;\n            if (!_e) return [3 /*break*/, 2];\n            return [4 /*yield*/, this._headerBasedAuth(authMode, additionalHeaders)];\n          case 1:\n            _e = _l.sent();\n            _l.label = 2;\n          case 2:\n            _f = [__assign.apply(void 0, _d.concat([_e]))];\n            _g = customGraphqlEndpoint;\n            if (!_g) return [3 /*break*/, 6];\n            if (!customEndpointRegion) return [3 /*break*/, 4];\n            return [4 /*yield*/, this._headerBasedAuth(authMode, additionalHeaders)];\n          case 3:\n            _h = _l.sent();\n            return [3 /*break*/, 5];\n          case 4:\n            _h = {\n              Authorization: null\n            };\n            _l.label = 5;\n          case 5:\n            _g = _h;\n            _l.label = 6;\n          case 6:\n            _j = [__assign.apply(void 0, _f.concat([_g]))];\n            return [4 /*yield*/, graphql_headers({\n              query: query,\n              variables: variables\n            })];\n          case 7:\n            headers = __assign.apply(void 0, [__assign.apply(void 0, [__assign.apply(void 0, _j.concat([_l.sent()])), additionalHeaders]), !customGraphqlEndpoint && (_k = {}, _k[USER_AGENT_HEADER] = getAmplifyUserAgent(customUserAgentDetails), _k)]);\n            body = {\n              query: print(query),\n              variables: variables\n            };\n            init = Object.assign({\n              headers: headers,\n              body: body,\n              signerServiceInfo: {\n                service: !customGraphqlEndpoint ? 'appsync' : 'execute-api',\n                region: !customGraphqlEndpoint ? region : customEndpointRegion\n              }\n            }, initParams);\n            endpoint = customGraphqlEndpoint || appSyncGraphqlEndpoint;\n            if (!endpoint) {\n              error = new GraphQLError('No graphql endpoint provided.');\n              throw {\n                data: {},\n                errors: [error]\n              };\n            }\n            _l.label = 8;\n          case 8:\n            _l.trys.push([8, 10,, 11]);\n            return [4 /*yield*/, this._api.post(endpoint, init)];\n          case 9:\n            response = _l.sent();\n            return [3 /*break*/, 11];\n          case 10:\n            err_1 = _l.sent();\n            // If the exception is because user intentionally\n            // cancelled the request, do not modify the exception\n            // so that clients can identify the exception correctly.\n            if (this._api.isCancel(err_1)) {\n              throw err_1;\n            }\n            response = {\n              data: {},\n              errors: [new GraphQLError(err_1.message, null, null, null, null, err_1)]\n            };\n            return [3 /*break*/, 11];\n          case 11:\n            errors = response.errors;\n            if (errors && errors.length) {\n              throw response;\n            }\n            return [2 /*return*/, response];\n        }\n      });\n    });\n  };\n  InternalGraphQLAPIClass.prototype.createInstanceIfNotCreated = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!!this._api) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.createInstance()];\n          case 1:\n            _a.sent();\n            _a.label = 2;\n          case 2:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Checks to see if an error thrown is from an api request cancellation\n   * @param {any} error - Any error\n   * @return {boolean} - A boolean indicating if the error was from an api request cancellation\n   */\n  InternalGraphQLAPIClass.prototype.isCancel = function (error) {\n    return this._api.isCancel(error);\n  };\n  /**\n   * Cancels an inflight request. Only applicable for graphql queries and mutations\n   * @param {any} request - request to cancel\n   * @return {boolean} - A boolean indicating if the request was cancelled\n   */\n  InternalGraphQLAPIClass.prototype.cancel = function (request, message) {\n    return this._api.cancel(request, message);\n  };\n  /**\n   * Check if the request has a corresponding cancel token in the WeakMap.\n   * @params request - The request promise\n   * @return if the request has a corresponding cancel token.\n   */\n  InternalGraphQLAPIClass.prototype.hasCancelToken = function (request) {\n    return this._api.hasCancelToken(request);\n  };\n  InternalGraphQLAPIClass.prototype._graphqlSubscribe = function (_a, additionalHeaders, customUserAgentDetails) {\n    var query = _a.query,\n      variables = _a.variables,\n      defaultAuthenticationType = _a.authMode,\n      authToken = _a.authToken;\n    if (additionalHeaders === void 0) {\n      additionalHeaders = {};\n    }\n    var _b = this._options,\n      region = _b.aws_appsync_region,\n      appSyncGraphqlEndpoint = _b.aws_appsync_graphqlEndpoint,\n      aws_appsync_authenticationType = _b.aws_appsync_authenticationType,\n      apiKey = _b.aws_appsync_apiKey,\n      _c = _b.graphql_headers,\n      graphql_headers = _c === void 0 ? function () {\n        return {};\n      } : _c;\n    var authenticationType = defaultAuthenticationType || aws_appsync_authenticationType || 'AWS_IAM';\n    if (InternalPubSub && typeof InternalPubSub.subscribe === 'function') {\n      return InternalPubSub.subscribe('', {\n        provider: INTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER,\n        appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n        authenticationType: authenticationType,\n        apiKey: apiKey,\n        query: print(query),\n        region: region,\n        variables: variables,\n        graphql_headers: graphql_headers,\n        additionalHeaders: additionalHeaders,\n        authToken: authToken\n      }, customUserAgentDetails);\n    } else {\n      logger.debug('No pubsub module applied for subscription');\n      throw new Error('No pubsub module applied for subscription');\n    }\n  };\n  /**\n   * @private\n   */\n  InternalGraphQLAPIClass.prototype._ensureCredentials = function () {\n    var _this = this;\n    return this.Credentials.get().then(function (credentials) {\n      if (!credentials) return false;\n      var cred = _this.Credentials.shear(credentials);\n      logger.debug('set credentials for api', cred);\n      return true;\n    }).catch(function (err) {\n      logger.warn('ensure credentials error', err);\n      return false;\n    });\n  };\n  return InternalGraphQLAPIClass;\n}();\nexport { InternalGraphQLAPIClass };\nexport var InternalGraphQLAPI = new InternalGraphQLAPIClass(null);\nAmplify.register(InternalGraphQLAPI);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}