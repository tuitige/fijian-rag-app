{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { ConsoleLogger as Logger } from './Logger';\nvar logger = new Logger('Hub');\nvar AMPLIFY_SYMBOL = typeof Symbol !== 'undefined' && typeof Symbol.for === 'function' ? Symbol.for('amplify_default') : '@@amplify_default';\nfunction isLegacyCallback(callback) {\n  return callback.onHubCapsule !== undefined;\n}\nvar HubClass = /** @class */function () {\n  function HubClass(name) {\n    this.listeners = [];\n    this.patterns = [];\n    this.protectedChannels = ['core', 'auth', 'api', 'analytics', 'interactions', 'pubsub', 'storage', 'ui', 'xr'];\n    this.name = name;\n  }\n  /**\n   * Used internally to remove a Hub listener.\n   *\n   * @remarks\n   * This private method is for internal use only. Instead of calling Hub.remove, call the result of Hub.listen.\n   */\n  HubClass.prototype._remove = function (channel, listener) {\n    if (channel instanceof RegExp) {\n      var pattern_1 = this.patterns.find(function (_a) {\n        var pattern = _a.pattern;\n        return pattern.source === channel.source;\n      });\n      if (!pattern_1) {\n        logger.warn(\"No listeners for \".concat(channel));\n        return;\n      }\n      this.patterns = __spreadArray([], __read(this.patterns.filter(function (x) {\n        return x !== pattern_1;\n      })), false);\n    } else {\n      var holder = this.listeners[channel];\n      if (!holder) {\n        logger.warn(\"No listeners for \".concat(channel));\n        return;\n      }\n      this.listeners[channel] = __spreadArray([], __read(holder.filter(function (_a) {\n        var callback = _a.callback;\n        return callback !== listener;\n      })), false);\n    }\n  };\n  /**\n   * @deprecated Instead of calling Hub.remove, call the result of Hub.listen.\n   */\n  HubClass.prototype.remove = function (channel, listener) {\n    this._remove(channel, listener);\n  };\n  /**\n   * Used to send a Hub event.\n   *\n   * @param channel - The channel on which the event will be broadcast\n   * @param payload - The HubPayload\n   * @param source  - The source of the event; defaults to ''\n   * @param ampSymbol - Symbol used to determine if the event is dispatched internally on a protected channel\n   *\n   */\n  HubClass.prototype.dispatch = function (channel, payload, source, ampSymbol) {\n    if (source === void 0) {\n      source = '';\n    }\n    if (this.protectedChannels.indexOf(channel) > -1) {\n      var hasAccess = ampSymbol === AMPLIFY_SYMBOL;\n      if (!hasAccess) {\n        logger.warn(\"WARNING: \".concat(channel, \" is protected and dispatching on it can have unintended consequences\"));\n      }\n    }\n    var capsule = {\n      channel: channel,\n      payload: __assign({}, payload),\n      source: source,\n      patternInfo: []\n    };\n    try {\n      this._toListeners(capsule);\n    } catch (e) {\n      logger.error(e);\n    }\n  };\n  /**\n   * Used to listen for Hub events.\n   *\n   * @param channel - The channel on which to listen\n   * @param callback - The callback to execute when an event is received on the specified channel\n   * @param listenerName - The name of the listener; defaults to 'noname'\n   * @returns A function which can be called to cancel the listener.\n   *\n   */\n  HubClass.prototype.listen = function (channel, callback, listenerName) {\n    var _this = this;\n    if (listenerName === void 0) {\n      listenerName = 'noname';\n    }\n    var cb;\n    // Check for legacy onHubCapsule callback for backwards compatability\n    if (isLegacyCallback(callback)) {\n      logger.warn(\"WARNING onHubCapsule is Deprecated. Please pass in a callback.\");\n      cb = callback.onHubCapsule.bind(callback);\n    } else if (typeof callback !== 'function') {\n      throw new Error('No callback supplied to Hub');\n    } else {\n      cb = callback;\n    }\n    if (channel instanceof RegExp) {\n      this.patterns.push({\n        pattern: channel,\n        callback: cb\n      });\n    } else {\n      var holder = this.listeners[channel];\n      if (!holder) {\n        holder = [];\n        this.listeners[channel] = holder;\n      }\n      holder.push({\n        name: listenerName,\n        callback: cb\n      });\n    }\n    return function () {\n      _this._remove(channel, cb);\n    };\n  };\n  HubClass.prototype._toListeners = function (capsule) {\n    var channel = capsule.channel,\n      payload = capsule.payload;\n    var holder = this.listeners[channel];\n    if (holder) {\n      holder.forEach(function (listener) {\n        logger.debug(\"Dispatching to \".concat(channel, \" with \"), payload);\n        try {\n          listener.callback(capsule);\n        } catch (e) {\n          logger.error(e);\n        }\n      });\n    }\n    if (this.patterns.length > 0) {\n      if (!payload.message) {\n        logger.warn(\"Cannot perform pattern matching without a message key\");\n        return;\n      }\n      var payloadStr_1 = payload.message;\n      this.patterns.forEach(function (pattern) {\n        var match = payloadStr_1.match(pattern.pattern);\n        if (match) {\n          var _a = __read(match),\n            groups = _a.slice(1);\n          var dispatchingCapsule = __assign(__assign({}, capsule), {\n            patternInfo: groups\n          });\n          try {\n            pattern.callback(dispatchingCapsule);\n          } catch (e) {\n            logger.error(e);\n          }\n        }\n      });\n    }\n  };\n  return HubClass;\n}();\nexport { HubClass };\n/*We export a __default__ instance of HubClass to use it as a\npseudo Singleton for the main messaging bus, however you can still create\nyour own instance of HubClass() for a separate \"private bus\" of events.*/\nexport var Hub = new HubClass('__default__');","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}