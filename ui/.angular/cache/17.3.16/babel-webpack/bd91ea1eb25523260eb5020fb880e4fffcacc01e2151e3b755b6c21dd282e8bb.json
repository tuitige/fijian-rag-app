{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __awaiter, __generator } from \"tslib\";\nimport { MethodEmbed } from '../utils/MethodEmbed';\nimport { ConsoleLogger as Logger, browserOrNode } from '@aws-amplify/core';\nvar logger = new Logger('PageViewTracker');\nvar PREV_URL_KEY = 'aws-amplify-analytics-prevUrl';\nvar getUrl = function () {\n  if (!browserOrNode().isBrowser) return '';else return window.location.origin + window.location.pathname;\n};\nvar defaultOpts = {\n  enable: false,\n  provider: 'AWSPinpoint',\n  getUrl: getUrl\n};\nvar PageViewTracker = /** @class */function () {\n  function PageViewTracker(tracker, opts) {\n    logger.debug('initialize pageview tracker with opts', opts);\n    this._config = Object.assign({}, defaultOpts, opts);\n    this._tracker = tracker;\n    this._hasEnabled = false;\n    this._trackFunc = this._trackFunc.bind(this);\n    if (this._config.type === 'SPA') {\n      this._pageViewTrackSPA();\n    } else {\n      this._pageViewTrackDefault();\n    }\n  }\n  PageViewTracker.prototype.configure = function (opts) {\n    Object.assign(this._config, opts);\n    // if spa, need to remove those listeners if disabled\n    if (this._config.type === 'SPA') {\n      this._pageViewTrackSPA();\n    }\n    return this._config;\n  };\n  PageViewTracker.prototype._isSameUrl = function () {\n    var prevUrl = sessionStorage.getItem(PREV_URL_KEY);\n    var curUrl = this._config.getUrl();\n    if (prevUrl === curUrl) {\n      logger.debug('the url is same');\n      return true;\n    } else return false;\n  };\n  PageViewTracker.prototype._pageViewTrackDefault = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var url, customAttrs, _a, attributes;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!browserOrNode().isBrowser || !window.addEventListener || !window.sessionStorage) {\n              logger.debug('not in the supported web enviroment');\n              return [2 /*return*/];\n            }\n            url = this._config.getUrl();\n            if (!(typeof this._config.attributes === 'function')) return [3 /*break*/, 2];\n            return [4 /*yield*/, this._config.attributes()];\n          case 1:\n            _a = _b.sent();\n            return [3 /*break*/, 3];\n          case 2:\n            _a = this._config.attributes;\n            _b.label = 3;\n          case 3:\n            customAttrs = _a;\n            attributes = Object.assign({\n              url: url\n            }, customAttrs);\n            if (this._config.enable && !this._isSameUrl()) {\n              this._tracker({\n                name: this._config.eventName || 'pageView',\n                attributes: attributes\n              }, this._config.provider).catch(function (e) {\n                logger.debug('Failed to record the page view event', e);\n              });\n              sessionStorage.setItem(PREV_URL_KEY, url);\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  PageViewTracker.prototype._trackFunc = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var url, customAttrs, _a, attributes;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!browserOrNode().isBrowser || !window.addEventListener || !history.pushState || !window.sessionStorage) {\n              logger.debug('not in the supported web enviroment');\n              return [2 /*return*/];\n            }\n            url = this._config.getUrl();\n            if (!(typeof this._config.attributes === 'function')) return [3 /*break*/, 2];\n            return [4 /*yield*/, this._config.attributes()];\n          case 1:\n            _a = _b.sent();\n            return [3 /*break*/, 3];\n          case 2:\n            _a = this._config.attributes;\n            _b.label = 3;\n          case 3:\n            customAttrs = _a;\n            attributes = Object.assign({\n              url: url\n            }, customAttrs);\n            if (!this._isSameUrl()) {\n              this._tracker({\n                name: this._config.eventName || 'pageView',\n                attributes: attributes\n              }, this._config.provider).catch(function (e) {\n                logger.debug('Failed to record the page view event', e);\n              });\n              sessionStorage.setItem(PREV_URL_KEY, url);\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  PageViewTracker.prototype._pageViewTrackSPA = function () {\n    if (!browserOrNode().isBrowser || !window.addEventListener || !history.pushState) {\n      logger.debug('not in the supported web enviroment');\n      return;\n    }\n    if (this._config.enable && !this._hasEnabled) {\n      MethodEmbed.add(history, 'pushState', this._trackFunc);\n      MethodEmbed.add(history, 'replaceState', this._trackFunc);\n      window.addEventListener('popstate', this._trackFunc);\n      this._trackFunc();\n      this._hasEnabled = true;\n    } else {\n      MethodEmbed.remove(history, 'pushState');\n      MethodEmbed.remove(history, 'replaceState');\n      window.removeEventListener('popstate', this._trackFunc);\n      this._hasEnabled = false;\n    }\n  };\n  return PageViewTracker;\n}();\nexport { PageViewTracker };\n//# sourceMappingURL=PageViewTracker.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}