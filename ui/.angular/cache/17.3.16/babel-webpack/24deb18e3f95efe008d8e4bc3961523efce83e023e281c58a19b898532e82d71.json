{"ast":null,"code":"import { Amplify as e } from \"aws-amplify\";\nimport \"../../types/authenticator/user.mjs\";\nimport \"../../types/authenticator/attributes.mjs\";\nimport \"../../types/primitives/componentClassName.mjs\";\nimport \"../../i18n/translations.mjs\";\nimport { hasSpecialChars as s } from \"../authenticator/utils.mjs\";\nconst a = () => {\n    const s = e.configure(),\n      a = null == s ? void 0 : s.aws_cognito_password_protection_settings;\n    if (!a) return null;\n    const {\n      passwordPolicyCharacters: t = [],\n      passwordPolicyMinLength: o\n    } = a;\n    return {\n      minLength: o,\n      needsLowerCase: t.includes(\"REQUIRES_LOWERCASE\"),\n      needsUpperCase: t.includes(\"REQUIRES_UPPERCASE\"),\n      needsNumber: t.includes(\"REQUIRES_NUMBERS\"),\n      needsSpecialChar: t.includes(\"REQUIRES_SYMBOLS\")\n    };\n  },\n  t = e => ({\n    validationMode: \"onTouched\",\n    validator: s => s.length >= e,\n    message: `Password must have at least ${e} characters`\n  }),\n  o = {\n    validationMode: \"onTouched\",\n    validator: e => /[a-z]/.test(e),\n    message: \"Password must have lower case letters\"\n  },\n  r = {\n    validationMode: \"onTouched\",\n    validator: e => /[A-Z]/.test(e),\n    message: \"Password must have upper case letters\"\n  },\n  n = {\n    validationMode: \"onTouched\",\n    validator: e => /[0-9]/.test(e),\n    message: \"Password must have numbers\"\n  },\n  i = {\n    validationMode: \"onTouched\",\n    validator: e => s(e),\n    message: \"Password must have special characters\"\n  },\n  d = e => ({\n    validationMode: \"onTouched\",\n    validator: s => e === s,\n    message: \"Your passwords must match\"\n  }),\n  u = () => {\n    const e = a();\n    if (!e) return [];\n    const s = [],\n      {\n        minLength: d,\n        needsLowerCase: u,\n        needsUpperCase: l,\n        needsNumber: c,\n        needsSpecialChar: h\n      } = e;\n    return d && s.push(t(d)), u && s.push(o), l && s.push(r), c && s.push(n), h && s.push(i), s;\n  },\n  l = e => [d(e)],\n  c = ({\n    validationMode: e,\n    eventType: s,\n    hasBlurred: a\n  }) => {\n    switch (e) {\n      case \"onBlur\":\n        return \"blur\" === s;\n      case \"onChange\":\n        return \"change\" === s;\n      case \"onTouched\":\n        return \"blur\" === s || a;\n    }\n  },\n  h = ({\n    value: e,\n    validators: s,\n    eventType: a,\n    hasBlurred: t\n  }) => e ? s.reduce((s, o) => {\n    const {\n      validator: r,\n      validationMode: n,\n      message: i\n    } = o;\n    if (c({\n      validationMode: n,\n      eventType: a,\n      hasBlurred: t\n    })) {\n      return !r(e) ? [...s, i] : s;\n    }\n    return s;\n  }, []) : [];\nexport { l as getDefaultConfirmPasswordValidators, u as getDefaultPasswordValidators, t as getHasMinLength, d as getMatchesConfirmPassword, a as getPasswordRequirement, o as hasLowerCase, n as hasNumber, i as hasSpecialChar, r as hasUpperCase, h as runFieldValidators, c as shouldValidate };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}