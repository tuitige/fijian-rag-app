{"ast":null,"code":"import { __awaiter as e } from \"tslib\";\nimport { Auth as r } from \"aws-amplify\";\nimport { actions as t } from \"xstate\";\nimport \"../../types/authenticator/user.mjs\";\nimport \"../../types/authenticator/attributes.mjs\";\nimport \"../../types/primitives/componentClassName.mjs\";\nimport \"../../i18n/translations.mjs\";\nimport { trimValues as a } from \"../../helpers/authenticator/utils.mjs\";\nimport \"../../helpers/accountSettings/utils.mjs\";\nconst {\n    assign: o,\n    stop: s\n  } = t,\n  n = e => s(e),\n  i = o({\n    attributeToVerify: e => {}\n  }),\n  u = o({\n    challengeName: e => {}\n  }),\n  m = o({\n    requiredAttributes: e => {}\n  }),\n  l = o({\n    remoteError: e => \"\"\n  }),\n  d = o({\n    formValues: e => ({})\n  }),\n  c = o({\n    touched: e => ({})\n  }),\n  p = o({\n    unverifiedContactMethods: e => {}\n  }),\n  f = o({\n    username: e => {}\n  }),\n  v = o({\n    validationError: e => ({})\n  }),\n  h = o({\n    totpSecretCode: (e, r) => r.data\n  }),\n  g = o({\n    challengeName: (e, r) => {\n      var t;\n      return null === (t = r.data) || void 0 === t ? void 0 : t.challengeName;\n    }\n  }),\n  b = o({\n    requiredAttributes: (e, r) => {\n      var t, a;\n      return null === (a = null === (t = r.data) || void 0 === t ? void 0 : t.challengeParam) || void 0 === a ? void 0 : a.requiredAttributes;\n    }\n  }),\n  V = o({\n    redirectIntent: e => \"confirmPasswordReset\"\n  }),\n  j = o({\n    redirectIntent: e => \"confirmSignUp\"\n  }),\n  y = o({\n    authAttributes: (e, r) => {\n      var t, a;\n      const [o] = e.loginMechanisms;\n      return {\n        username: null !== (t = e.formValues[o]) && void 0 !== t ? t : e.formValues.username,\n        password: null === (a = e.formValues) || void 0 === a ? void 0 : a.password\n      };\n    }\n  }),\n  O = o({\n    validationError: (e, r) => r.data\n  }),\n  _ = o({\n    remoteError: (e, r) => {\n      var t;\n      return \"NoUserPoolError\" === r.data.name ? \"Configuration error (see console) â€“ please contact the administrator\" : (null === (t = r.data) || void 0 === t ? void 0 : t.message) || r.data;\n    }\n  }),\n  w = o({\n    unverifiedContactMethods: (e, r) => r.data.unverified\n  }),\n  A = o({\n    user: (e, r) => r.data.user || r.data\n  }),\n  C = o({\n    username: (e, r) => {\n      let {\n        formValues: {\n          username: t,\n          country_code: a\n        }\n      } = e;\n      return a && (t = `${a}${t}`), t;\n    }\n  }),\n  E = o({\n    codeDeliveryDetails: (e, r) => r.data.codeDeliveryDetails\n  }),\n  N = o({\n    authAttributes: (e, r) => ({\n      username: e.formValues.username\n    })\n  }),\n  $ = o({\n    formValues: (e, r) => {\n      const {\n        name: t,\n        value: a\n      } = r.data;\n      return Object.assign(Object.assign({}, e.formValues), {\n        [t]: a\n      });\n    }\n  }),\n  D = o({\n    formValues: (e, r) => {\n      const t = Object.assign(Object.assign({}, e.formValues), r.data);\n      return a(t, \"password\");\n    }\n  }),\n  M = o({\n    touched: (e, r) => {\n      const {\n        name: t\n      } = r.data;\n      return Object.assign(Object.assign({}, e.touched), {\n        [`${t}`]: !0\n      });\n    }\n  }),\n  P = t => e(void 0, void 0, void 0, function* () {\n    const {\n      username: e\n    } = t;\n    return yield r.forgotPassword(e);\n  }),\n  q = o({\n    formValues: (e, r) => {\n      var t;\n      const [a = \"username\"] = e.loginMechanisms;\n      if (!e.formValues.phone_number && \"phone_number\" !== a) return e.formValues;\n      const {\n          formValues: o,\n          country_code: s\n        } = e,\n        n = o.phone_number ? \"phone_number\" : \"username\",\n        i = `${null !== (t = o.country_code) && void 0 !== t ? t : s}${o[n]}`.replace(/[^A-Z0-9+]/gi, \"\"),\n        u = Object.assign(Object.assign({}, o), {\n          [n]: i\n        });\n      return delete u.country_code, u;\n    }\n  });\nexport { i as clearAttributeToVerify, u as clearChallengeName, l as clearError, d as clearFormValues, m as clearRequiredAttributes, c as clearTouched, p as clearUnverifiedContactMethods, f as clearUsername, v as clearValidationError, M as handleBlur, $ as handleInput, D as handleSubmit, q as parsePhoneNumber, P as resendCode, g as setChallengeName, E as setCodeDeliveryDetails, V as setConfirmResetPasswordIntent, j as setConfirmSignUpIntent, y as setCredentials, O as setFieldErrors, _ as setRemoteError, b as setRequiredAttributes, h as setTotpSecretCode, w as setUnverifiedContactMethods, A as setUser, C as setUsername, N as setUsernameAuthAttributes, n as stopActor };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}