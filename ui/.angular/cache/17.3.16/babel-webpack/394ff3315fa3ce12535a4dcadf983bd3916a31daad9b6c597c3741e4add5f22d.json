{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\nexport function resolveHostHeaderConfig(input) {\n  return input;\n}\nexport var hostHeaderMiddleware = function (options) {\n  return function (next) {\n    return function (args) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var request, _a, handlerProtocol;\n        return __generator(this, function (_b) {\n          if (!HttpRequest.isInstance(args.request)) return [2, next(args)];\n          request = args.request;\n          _a = (options.requestHandler.metadata || {}).handlerProtocol, handlerProtocol = _a === void 0 ? \"\" : _a;\n          if (handlerProtocol.indexOf(\"h2\") >= 0 && !request.headers[\":authority\"]) {\n            delete request.headers[\"host\"];\n            request.headers[\":authority\"] = \"\";\n          } else if (!request.headers[\"host\"]) {\n            request.headers[\"host\"] = request.hostname;\n          }\n          return [2, next(args)];\n        });\n      });\n    };\n  };\n};\nexport var hostHeaderMiddlewareOptions = {\n  name: \"hostHeaderMiddleware\",\n  step: \"build\",\n  priority: \"low\",\n  tags: [\"HOST\"],\n  override: true\n};\nexport var getHostHeaderPlugin = function (options) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.add(hostHeaderMiddleware(options), hostHeaderMiddlewareOptions);\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}