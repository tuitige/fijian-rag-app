{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport { getSignedHeaders } from './utils/getSignedHeaders';\nimport { getSigningValues } from './utils/getSigningValues';\nimport { AMZ_DATE_HEADER, AUTH_HEADER, HOST_HEADER, SHA256_ALGORITHM_IDENTIFIER, TOKEN_HEADER } from './constants';\nimport { getSignature } from './utils/getSignature';\n/**\n * Given a `HttpRequest`, returns a Signature Version 4 signed `HttpRequest`.\n *\n * @param request `HttpRequest` to be signed.\n * @param signRequestOptions `SignRequestOptions` object containing values used to construct the signature.\n * @returns A `HttpRequest` with authentication headers which can grant temporary access to AWS resources.\n */\nexport var signRequest = function (request, options) {\n  var signingValues = getSigningValues(options);\n  var accessKeyId = signingValues.accessKeyId,\n    credentialScope = signingValues.credentialScope,\n    longDate = signingValues.longDate,\n    sessionToken = signingValues.sessionToken;\n  // create the request to sign\n  var headers = __assign({}, request.headers);\n  headers[HOST_HEADER] = request.url.host;\n  headers[AMZ_DATE_HEADER] = longDate;\n  if (sessionToken) {\n    headers[TOKEN_HEADER] = sessionToken;\n  }\n  var requestToSign = __assign(__assign({}, request), {\n    headers: headers\n  });\n  // calculate and add the signature to the request\n  var signature = getSignature(requestToSign, signingValues);\n  var credentialEntry = \"Credential=\".concat(accessKeyId, \"/\").concat(credentialScope);\n  var signedHeadersEntry = \"SignedHeaders=\".concat(getSignedHeaders(headers));\n  var signatureEntry = \"Signature=\".concat(signature);\n  headers[AUTH_HEADER] = \"\".concat(SHA256_ALGORITHM_IDENTIFIER, \" \").concat(credentialEntry, \", \").concat(signedHeadersEntry, \", \").concat(signatureEntry);\n  return requestToSign;\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}