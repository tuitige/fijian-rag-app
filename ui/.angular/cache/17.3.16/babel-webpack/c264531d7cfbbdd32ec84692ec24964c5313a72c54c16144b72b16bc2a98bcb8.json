{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Drop-in replacement for fast-xml-parser's XmlParser class used in the AWS SDK S3 client XML deserializer. This\n * implementation is not tested against the full xml conformance test suite. It is only tested against the XML responses\n * from S3. This implementation requires the `DOMParser` class in the runtime.\n */\nexport var parser = {\n  parse: function (xmlStr) {\n    var domParser = new DOMParser();\n    var xml = domParser.parseFromString(xmlStr, 'text/xml');\n    var parsedObj = parseXmlNode(xml);\n    var rootKey = Object.keys(parsedObj)[0];\n    return parsedObj[rootKey];\n  }\n};\nvar parseXmlNode = function (node) {\n  var _a;\n  var _b, _c;\n  if (isDocumentNode(node)) {\n    return _a = {}, _a[node.documentElement.nodeName] = parseXmlNode(node.documentElement), _a;\n  }\n  if (node.nodeType === Node.TEXT_NODE) {\n    return (_b = node.nodeValue) === null || _b === void 0 ? void 0 : _b.trim();\n  }\n  if (isElementNode(node)) {\n    // Node like <Location>foo</Location> will be converted to { Location: 'foo' }\n    // instead of { Location: { '#text': 'foo' } }.\n    if (isTextOnlyElementNode(node)) {\n      return (_c = node.childNodes[0]) === null || _c === void 0 ? void 0 : _c.nodeValue;\n    }\n    var nodeValue = {};\n    // convert attributes\n    for (var i = 0; i < node.attributes.length; i++) {\n      var attr = node.attributes[i];\n      if (!isNamespaceAttributeName(attr.nodeName)) {\n        nodeValue[attr.nodeName] = attr.nodeValue;\n      }\n    }\n    // convert child nodes\n    if (node.children.length > 0) {\n      for (var i = 0; i < node.children.length; i++) {\n        var child = node.children[i];\n        var childValue = parseXmlNode(child);\n        if (childValue === undefined) {\n          continue;\n        }\n        var childName = child.nodeName;\n        if (nodeValue[childName] === undefined) {\n          nodeValue[childName] = childValue;\n        } else if (Array.isArray(nodeValue[childName])) {\n          nodeValue[childName].push(childValue);\n        } else {\n          nodeValue[childName] = [nodeValue[childName], childValue];\n        }\n      }\n    }\n    // Return empty element node as empty string instead of `{}`, which is the default behavior of fast-xml-parser.\n    return Object.keys(nodeValue).length === 0 ? '' : nodeValue;\n  }\n};\nvar isElementNode = function (node) {\n  return node.nodeType === Node.ELEMENT_NODE;\n};\nvar isDocumentNode = function (node) {\n  return node.nodeType === Node.DOCUMENT_NODE;\n};\nvar isTextOnlyElementNode = function (node) {\n  var _a;\n  return hasOnlyNamespaceAttributes(node) && node.children.length === 0 && ((_a = node.firstChild) === null || _a === void 0 ? void 0 : _a.nodeType) === Node.TEXT_NODE;\n};\nvar hasOnlyNamespaceAttributes = function (node) {\n  for (var i = 0; i < node.attributes.length; i++) {\n    var attr = node.attributes[i];\n    if (!isNamespaceAttributeName(attr.nodeName)) {\n      return false;\n    }\n  }\n  return true;\n};\nvar isNamespaceAttributeName = function (name) {\n  return name === 'xmlns' || name.startsWith('xmlns:');\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}