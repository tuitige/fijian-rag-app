{"ast":null,"code":"import { __assign, __awaiter, __extends, __generator, __read } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport Observable from 'zen-observable-ts';\nimport { GraphQLError } from 'graphql';\nimport * as url from 'url';\nimport { v4 as uuid } from 'uuid';\nimport { Buffer } from 'buffer';\nimport { Logger, Credentials, Signer, Hub, USER_AGENT_HEADER, jitteredExponentialRetry, NonRetryableError, isNonRetryableError, getAmplifyUserAgent } from '@aws-amplify/core';\nimport { Cache } from '@aws-amplify/cache';\nimport { Auth } from '@aws-amplify/auth';\nimport { AbstractPubSubProvider } from '../PubSubProvider';\nimport { CONTROL_MSG, ConnectionState } from '../../types/PubSub';\nimport { AMPLIFY_SYMBOL, AWS_APPSYNC_REALTIME_HEADERS, CONNECTION_INIT_TIMEOUT, DEFAULT_KEEP_ALIVE_TIMEOUT, DEFAULT_KEEP_ALIVE_ALERT_TIMEOUT, MAX_DELAY_MS, MESSAGE_TYPES, NON_RETRYABLE_CODES, SOCKET_STATUS, START_ACK_TIMEOUT, SUBSCRIPTION_STATUS, CONNECTION_STATE_CHANGE } from '../constants';\nimport { ConnectionStateMonitor, CONNECTION_CHANGE } from '../../utils/ConnectionStateMonitor';\nimport { ReconnectEvent, ReconnectionMonitor } from '../../utils/ReconnectionMonitor';\nvar logger = new Logger('AWSAppSyncRealTimeProvider');\nvar dispatchApiEvent = function (event, data, message) {\n  Hub.dispatch('api', {\n    event: event,\n    data: data,\n    message: message\n  }, 'PubSub', AMPLIFY_SYMBOL);\n};\n/**\n * @returns base64url-encoded string - https://datatracker.ietf.org/doc/html/rfc4648#section-5\n */\nvar base64urlEncode = function (str) {\n  var base64Str = Buffer.from(str).toString('base64');\n  var base64UrlStr = base64Str.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n  return base64UrlStr;\n};\nvar standardDomainPattern = /^https:\\/\\/\\w{26}\\.appsync\\-api\\.\\w{2}(?:(?:\\-\\w{2,})+)\\-\\d\\.amazonaws.com(?:\\.cn)?\\/graphql$/i;\nvar customDomainPath = '/realtime';\nvar AWSAppSyncRealTimeProvider = /** @class */function (_super) {\n  __extends(AWSAppSyncRealTimeProvider, _super);\n  function AWSAppSyncRealTimeProvider(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var _this = _super.call(this, options) || this;\n    _this.socketStatus = SOCKET_STATUS.CLOSED;\n    _this.keepAliveTimeout = DEFAULT_KEEP_ALIVE_TIMEOUT;\n    _this.subscriptionObserverMap = new Map();\n    _this.promiseArray = [];\n    _this.connectionStateMonitor = new ConnectionStateMonitor();\n    _this.reconnectionMonitor = new ReconnectionMonitor();\n    // Monitor the connection state and pass changes along to Hub\n    _this.connectionStateMonitorSubscription = _this.connectionStateMonitor.connectionStateObservable.subscribe(function (connectionState) {\n      dispatchApiEvent(CONNECTION_STATE_CHANGE, {\n        provider: _this,\n        connectionState: connectionState\n      }, \"Connection state is \" + connectionState);\n      _this.connectionState = connectionState;\n      // Trigger START_RECONNECT when the connection is disrupted\n      if (connectionState === ConnectionState.ConnectionDisrupted) {\n        _this.reconnectionMonitor.record(ReconnectEvent.START_RECONNECT);\n      }\n      // Trigger HALT_RECONNECT to halt reconnection attempts when the state is anything other than\n      //   ConnectionDisrupted or Connecting\n      if ([ConnectionState.Connected, ConnectionState.ConnectedPendingDisconnect, ConnectionState.ConnectedPendingKeepAlive, ConnectionState.ConnectedPendingNetwork, ConnectionState.ConnectionDisruptedPendingNetwork, ConnectionState.Disconnected].includes(connectionState)) {\n        _this.reconnectionMonitor.record(ReconnectEvent.HALT_RECONNECT);\n      }\n    });\n    return _this;\n  }\n  /**\n   * Mark the socket closed and release all active listeners\n   */\n  AWSAppSyncRealTimeProvider.prototype.close = function () {\n    // Mark the socket closed both in status and the connection monitor\n    this.socketStatus = SOCKET_STATUS.CLOSED;\n    this.connectionStateMonitor.record(CONNECTION_CHANGE.CONNECTION_FAILED);\n    // Turn off the subscription monitor Hub publishing\n    this.connectionStateMonitorSubscription.unsubscribe();\n    // Complete all reconnect observers\n    this.reconnectionMonitor.close();\n  };\n  AWSAppSyncRealTimeProvider.prototype.getNewWebSocket = function (url, protocol) {\n    return new WebSocket(url, protocol);\n  };\n  AWSAppSyncRealTimeProvider.prototype.getProviderName = function () {\n    return 'AWSAppSyncRealTimeProvider';\n  };\n  AWSAppSyncRealTimeProvider.prototype.newClient = function () {\n    throw new Error('Not used here');\n  };\n  AWSAppSyncRealTimeProvider.prototype.publish = function (_topics, _msg, _options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        throw new Error('Operation not supported');\n      });\n    });\n  };\n  // Check if url matches standard domain pattern\n  AWSAppSyncRealTimeProvider.prototype.isCustomDomain = function (url) {\n    return url.match(standardDomainPattern) === null;\n  };\n  AWSAppSyncRealTimeProvider.prototype.subscribe = function (_topics, options, customUserAgentDetails) {\n    var _this = this;\n    var appSyncGraphqlEndpoint = options === null || options === void 0 ? void 0 : options.appSyncGraphqlEndpoint;\n    return new Observable(function (observer) {\n      if (!options || !appSyncGraphqlEndpoint) {\n        observer.error({\n          errors: [__assign({}, new GraphQLError(\"Subscribe only available for AWS AppSync endpoint\"))]\n        });\n        observer.complete();\n      } else {\n        var subscriptionStartActive_1 = false;\n        var subscriptionId_1 = uuid();\n        var startSubscription_1 = function () {\n          if (!subscriptionStartActive_1) {\n            subscriptionStartActive_1 = true;\n            var startSubscriptionPromise = _this._startSubscriptionWithAWSAppSyncRealTime({\n              options: options,\n              observer: observer,\n              subscriptionId: subscriptionId_1,\n              customUserAgentDetails: customUserAgentDetails\n            }).catch(function (err) {\n              logger.debug(CONTROL_MSG.REALTIME_SUBSCRIPTION_INIT_ERROR + \": \" + err);\n              _this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n            });\n            startSubscriptionPromise.finally(function () {\n              subscriptionStartActive_1 = false;\n            });\n          }\n        };\n        var reconnectSubscription_1;\n        // Add an observable to the reconnection list to manage reconnection for this subscription\n        reconnectSubscription_1 = new Observable(function (observer) {\n          _this.reconnectionMonitor.addObserver(observer);\n        }).subscribe(function () {\n          startSubscription_1();\n        });\n        startSubscription_1();\n        return function () {\n          return __awaiter(_this, void 0, void 0, function () {\n            var subscriptionState, err_1;\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  // Cleanup reconnection subscription\n                  reconnectSubscription_1 === null || reconnectSubscription_1 === void 0 ? void 0 : reconnectSubscription_1.unsubscribe();\n                  _a.label = 1;\n                case 1:\n                  _a.trys.push([1, 3, 4, 5]);\n                  // Waiting that subscription has been connected before trying to unsubscribe\n                  return [4 /*yield*/, this._waitForSubscriptionToBeConnected(subscriptionId_1)];\n                case 2:\n                  // Waiting that subscription has been connected before trying to unsubscribe\n                  _a.sent();\n                  subscriptionState = (this.subscriptionObserverMap.get(subscriptionId_1) || {}).subscriptionState;\n                  if (!subscriptionState) {\n                    // subscription already unsubscribed\n                    return [2 /*return*/];\n                  }\n                  if (subscriptionState === SUBSCRIPTION_STATUS.CONNECTED) {\n                    this._sendUnsubscriptionMessage(subscriptionId_1);\n                  } else {\n                    throw new Error('Subscription never connected');\n                  }\n                  return [3 /*break*/, 5];\n                case 3:\n                  err_1 = _a.sent();\n                  logger.debug(\"Error while unsubscribing \" + err_1);\n                  return [3 /*break*/, 5];\n                case 4:\n                  this._removeSubscriptionObserver(subscriptionId_1);\n                  return [7 /*endfinally*/];\n                case 5:\n                  return [2 /*return*/];\n              }\n            });\n          });\n        };\n      }\n    });\n  };\n  Object.defineProperty(AWSAppSyncRealTimeProvider.prototype, \"isSSLEnabled\", {\n    get: function () {\n      return !this.options['aws_appsync_dangerously_connect_to_http_endpoint_for_testing'];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  AWSAppSyncRealTimeProvider.prototype._startSubscriptionWithAWSAppSyncRealTime = function (_a) {\n    var options = _a.options,\n      observer = _a.observer,\n      subscriptionId = _a.subscriptionId,\n      customUserAgentDetails = _a.customUserAgentDetails;\n    var _b;\n    return __awaiter(this, void 0, void 0, function () {\n      var appSyncGraphqlEndpoint, authenticationType, query, variables, apiKey, region, _c, graphql_headers, _d, additionalHeaders, subscriptionState, data, dataString, headerObj, _e, _f, subscriptionMessage, stringToAWSRealTime, err_2, _g, subscriptionFailedCallback, subscriptionReadyCallback;\n      var _h;\n      var _this = this;\n      return __generator(this, function (_j) {\n        switch (_j.label) {\n          case 0:\n            appSyncGraphqlEndpoint = options.appSyncGraphqlEndpoint, authenticationType = options.authenticationType, query = options.query, variables = options.variables, apiKey = options.apiKey, region = options.region, _c = options.graphql_headers, graphql_headers = _c === void 0 ? function () {\n              return {};\n            } : _c, _d = options.additionalHeaders, additionalHeaders = _d === void 0 ? {} : _d;\n            subscriptionState = SUBSCRIPTION_STATUS.PENDING;\n            data = {\n              query: query,\n              variables: variables\n            };\n            // Having a subscription id map will make it simple to forward messages received\n            this.subscriptionObserverMap.set(subscriptionId, {\n              observer: observer,\n              query: query !== null && query !== void 0 ? query : '',\n              variables: variables !== null && variables !== void 0 ? variables : {},\n              subscriptionState: subscriptionState,\n              startAckTimeoutId: undefined\n            });\n            dataString = JSON.stringify(data);\n            _e = [{}];\n            return [4 /*yield*/, this._awsRealTimeHeaderBasedAuth({\n              apiKey: apiKey,\n              appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n              authenticationType: authenticationType,\n              payload: dataString,\n              canonicalUri: '',\n              region: region,\n              additionalHeaders: additionalHeaders\n            })];\n          case 1:\n            _f = [__assign.apply(void 0, _e.concat([_j.sent()]))];\n            return [4 /*yield*/, graphql_headers()];\n          case 2:\n            headerObj = __assign.apply(void 0, [__assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), additionalHeaders]), (_h = {}, _h[USER_AGENT_HEADER] = getAmplifyUserAgent(customUserAgentDetails), _h)]);\n            subscriptionMessage = {\n              id: subscriptionId,\n              payload: {\n                data: dataString,\n                extensions: {\n                  authorization: __assign({}, headerObj)\n                }\n              },\n              type: MESSAGE_TYPES.GQL_START\n            };\n            stringToAWSRealTime = JSON.stringify(subscriptionMessage);\n            _j.label = 3;\n          case 3:\n            _j.trys.push([3, 5,, 6]);\n            this.connectionStateMonitor.record(CONNECTION_CHANGE.OPENING_CONNECTION);\n            return [4 /*yield*/, this._initializeWebSocketConnection({\n              apiKey: apiKey,\n              appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n              authenticationType: authenticationType,\n              region: region,\n              additionalHeaders: additionalHeaders\n            })];\n          case 4:\n            _j.sent();\n            return [3 /*break*/, 6];\n          case 5:\n            err_2 = _j.sent();\n            this._logStartSubscriptionError(subscriptionId, observer, err_2);\n            return [2 /*return*/];\n          case 6:\n            _g = (_b = this.subscriptionObserverMap.get(subscriptionId)) !== null && _b !== void 0 ? _b : {}, subscriptionFailedCallback = _g.subscriptionFailedCallback, subscriptionReadyCallback = _g.subscriptionReadyCallback;\n            // This must be done before sending the message in order to be listening immediately\n            this.subscriptionObserverMap.set(subscriptionId, {\n              observer: observer,\n              subscriptionState: subscriptionState,\n              query: query !== null && query !== void 0 ? query : '',\n              variables: variables !== null && variables !== void 0 ? variables : {},\n              subscriptionReadyCallback: subscriptionReadyCallback,\n              subscriptionFailedCallback: subscriptionFailedCallback,\n              startAckTimeoutId: setTimeout(function () {\n                _this._timeoutStartSubscriptionAck.call(_this, subscriptionId);\n              }, START_ACK_TIMEOUT)\n            });\n            if (this.awsRealTimeSocket) {\n              this.awsRealTimeSocket.send(stringToAWSRealTime);\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  // Log logic for start subscription failures\n  AWSAppSyncRealTimeProvider.prototype._logStartSubscriptionError = function (subscriptionId, observer, err) {\n    var _a;\n    logger.debug({\n      err: err\n    });\n    var message = String((_a = err.message) !== null && _a !== void 0 ? _a : '');\n    // Resolving to give the state observer time to propogate the update\n    Promise.resolve(this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED));\n    // Capture the error only when the network didn't cause disruption\n    if (this.connectionState !== ConnectionState.ConnectionDisruptedPendingNetwork) {\n      // When the error is non-retriable, error out the observable\n      if (isNonRetryableError(err)) {\n        observer.error({\n          errors: [__assign({}, new GraphQLError(CONTROL_MSG.CONNECTION_FAILED + \": \" + message))]\n        });\n      } else {\n        logger.debug(CONTROL_MSG.CONNECTION_FAILED + \": \" + message);\n      }\n      var subscriptionFailedCallback = (this.subscriptionObserverMap.get(subscriptionId) || {}).subscriptionFailedCallback;\n      // Notify concurrent unsubscription\n      if (typeof subscriptionFailedCallback === 'function') {\n        subscriptionFailedCallback();\n      }\n    }\n  };\n  // Waiting that subscription has been connected before trying to unsubscribe\n  AWSAppSyncRealTimeProvider.prototype._waitForSubscriptionToBeConnected = function (subscriptionId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var subscriptionObserver, subscriptionState;\n      var _this = this;\n      return __generator(this, function (_a) {\n        subscriptionObserver = this.subscriptionObserverMap.get(subscriptionId);\n        if (subscriptionObserver) {\n          subscriptionState = subscriptionObserver.subscriptionState;\n          // This in case unsubscribe is invoked before sending start subscription message\n          if (subscriptionState === SUBSCRIPTION_STATUS.PENDING) {\n            return [2 /*return*/, new Promise(function (res, rej) {\n              var observer = subscriptionObserver.observer,\n                subscriptionState = subscriptionObserver.subscriptionState,\n                variables = subscriptionObserver.variables,\n                query = subscriptionObserver.query;\n              _this.subscriptionObserverMap.set(subscriptionId, {\n                observer: observer,\n                subscriptionState: subscriptionState,\n                variables: variables,\n                query: query,\n                subscriptionReadyCallback: res,\n                subscriptionFailedCallback: rej\n              });\n            })];\n          }\n        }\n        return [2 /*return*/];\n      });\n    });\n  };\n  AWSAppSyncRealTimeProvider.prototype._sendUnsubscriptionMessage = function (subscriptionId) {\n    try {\n      if (this.awsRealTimeSocket && this.awsRealTimeSocket.readyState === WebSocket.OPEN && this.socketStatus === SOCKET_STATUS.READY) {\n        // Preparing unsubscribe message to stop receiving messages for that subscription\n        var unsubscribeMessage = {\n          id: subscriptionId,\n          type: MESSAGE_TYPES.GQL_STOP\n        };\n        var stringToAWSRealTime = JSON.stringify(unsubscribeMessage);\n        this.awsRealTimeSocket.send(stringToAWSRealTime);\n      }\n    } catch (err) {\n      // If GQL_STOP is not sent because of disconnection issue, then there is nothing the client can do\n      logger.debug({\n        err: err\n      });\n    }\n  };\n  AWSAppSyncRealTimeProvider.prototype._removeSubscriptionObserver = function (subscriptionId) {\n    this.subscriptionObserverMap.delete(subscriptionId);\n    // Verifying 1000ms after removing subscription in case there are new subscription unmount/mount\n    setTimeout(this._closeSocketIfRequired.bind(this), 1000);\n  };\n  AWSAppSyncRealTimeProvider.prototype._closeSocketIfRequired = function () {\n    if (this.subscriptionObserverMap.size > 0) {\n      // Active subscriptions on the WebSocket\n      return;\n    }\n    if (!this.awsRealTimeSocket) {\n      this.socketStatus = SOCKET_STATUS.CLOSED;\n      return;\n    }\n    this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSING_CONNECTION);\n    if (this.awsRealTimeSocket.bufferedAmount > 0) {\n      // Still data on the WebSocket\n      setTimeout(this._closeSocketIfRequired.bind(this), 1000);\n    } else {\n      logger.debug('closing WebSocket...');\n      if (this.keepAliveTimeoutId) {\n        clearTimeout(this.keepAliveTimeoutId);\n      }\n      if (this.keepAliveAlertTimeoutId) {\n        clearTimeout(this.keepAliveAlertTimeoutId);\n      }\n      var tempSocket = this.awsRealTimeSocket;\n      // Cleaning callbacks to avoid race condition, socket still exists\n      tempSocket.onclose = null;\n      tempSocket.onerror = null;\n      tempSocket.close(1000);\n      this.awsRealTimeSocket = undefined;\n      this.socketStatus = SOCKET_STATUS.CLOSED;\n      this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n    }\n  };\n  AWSAppSyncRealTimeProvider.prototype._handleIncomingSubscriptionMessage = function (message) {\n    var _this = this;\n    if (typeof message.data !== 'string') {\n      return;\n    }\n    logger.debug(\"subscription message from AWS AppSync RealTime: \" + message.data);\n    var _a = JSON.parse(String(message.data)),\n      _b = _a.id,\n      id = _b === void 0 ? '' : _b,\n      payload = _a.payload,\n      type = _a.type;\n    var _c = this.subscriptionObserverMap.get(id) || {},\n      _d = _c.observer,\n      observer = _d === void 0 ? null : _d,\n      _e = _c.query,\n      query = _e === void 0 ? '' : _e,\n      _f = _c.variables,\n      variables = _f === void 0 ? {} : _f,\n      startAckTimeoutId = _c.startAckTimeoutId,\n      subscriptionReadyCallback = _c.subscriptionReadyCallback,\n      subscriptionFailedCallback = _c.subscriptionFailedCallback;\n    logger.debug({\n      id: id,\n      observer: observer,\n      query: query,\n      variables: variables\n    });\n    if (type === MESSAGE_TYPES.GQL_DATA && payload && payload.data) {\n      if (observer) {\n        observer.next(payload);\n      } else {\n        logger.debug(\"observer not found for id: \" + id);\n      }\n      return;\n    }\n    if (type === MESSAGE_TYPES.GQL_START_ACK) {\n      logger.debug(\"subscription ready for \" + JSON.stringify({\n        query: query,\n        variables: variables\n      }));\n      if (typeof subscriptionReadyCallback === 'function') {\n        subscriptionReadyCallback();\n      }\n      if (startAckTimeoutId) clearTimeout(startAckTimeoutId);\n      dispatchApiEvent(CONTROL_MSG.SUBSCRIPTION_ACK, {\n        query: query,\n        variables: variables\n      }, 'Connection established for subscription');\n      var subscriptionState = SUBSCRIPTION_STATUS.CONNECTED;\n      if (observer) {\n        this.subscriptionObserverMap.set(id, {\n          observer: observer,\n          query: query,\n          variables: variables,\n          startAckTimeoutId: undefined,\n          subscriptionState: subscriptionState,\n          subscriptionReadyCallback: subscriptionReadyCallback,\n          subscriptionFailedCallback: subscriptionFailedCallback\n        });\n      }\n      this.connectionStateMonitor.record(CONNECTION_CHANGE.CONNECTION_ESTABLISHED);\n      return;\n    }\n    if (type === MESSAGE_TYPES.GQL_CONNECTION_KEEP_ALIVE) {\n      if (this.keepAliveTimeoutId) clearTimeout(this.keepAliveTimeoutId);\n      if (this.keepAliveAlertTimeoutId) clearTimeout(this.keepAliveAlertTimeoutId);\n      this.keepAliveTimeoutId = setTimeout(function () {\n        return _this._errorDisconnect(CONTROL_MSG.TIMEOUT_DISCONNECT);\n      }, this.keepAliveTimeout);\n      this.keepAliveAlertTimeoutId = setTimeout(function () {\n        _this.connectionStateMonitor.record(CONNECTION_CHANGE.KEEP_ALIVE_MISSED);\n      }, DEFAULT_KEEP_ALIVE_ALERT_TIMEOUT);\n      this.connectionStateMonitor.record(CONNECTION_CHANGE.KEEP_ALIVE);\n      return;\n    }\n    if (type === MESSAGE_TYPES.GQL_ERROR) {\n      var subscriptionState = SUBSCRIPTION_STATUS.FAILED;\n      if (observer) {\n        this.subscriptionObserverMap.set(id, {\n          observer: observer,\n          query: query,\n          variables: variables,\n          startAckTimeoutId: startAckTimeoutId,\n          subscriptionReadyCallback: subscriptionReadyCallback,\n          subscriptionFailedCallback: subscriptionFailedCallback,\n          subscriptionState: subscriptionState\n        });\n        logger.debug(CONTROL_MSG.CONNECTION_FAILED + \": \" + JSON.stringify(payload));\n        observer.error({\n          errors: [__assign({}, new GraphQLError(CONTROL_MSG.CONNECTION_FAILED + \": \" + JSON.stringify(payload)))]\n        });\n        if (startAckTimeoutId) clearTimeout(startAckTimeoutId);\n        if (typeof subscriptionFailedCallback === 'function') {\n          subscriptionFailedCallback();\n        }\n      }\n    }\n  };\n  AWSAppSyncRealTimeProvider.prototype._errorDisconnect = function (msg) {\n    logger.debug(\"Disconnect error: \" + msg);\n    if (this.awsRealTimeSocket) {\n      this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n      this.awsRealTimeSocket.close();\n    }\n    this.socketStatus = SOCKET_STATUS.CLOSED;\n  };\n  AWSAppSyncRealTimeProvider.prototype._timeoutStartSubscriptionAck = function (subscriptionId) {\n    var subscriptionObserver = this.subscriptionObserverMap.get(subscriptionId);\n    if (subscriptionObserver) {\n      var observer = subscriptionObserver.observer,\n        query = subscriptionObserver.query,\n        variables = subscriptionObserver.variables;\n      if (!observer) {\n        return;\n      }\n      this.subscriptionObserverMap.set(subscriptionId, {\n        observer: observer,\n        query: query,\n        variables: variables,\n        subscriptionState: SUBSCRIPTION_STATUS.FAILED\n      });\n      this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n      logger.debug('timeoutStartSubscription', JSON.stringify({\n        query: query,\n        variables: variables\n      }));\n    }\n  };\n  AWSAppSyncRealTimeProvider.prototype._initializeWebSocketConnection = function (_a) {\n    var _this = this;\n    var appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint,\n      authenticationType = _a.authenticationType,\n      apiKey = _a.apiKey,\n      region = _a.region,\n      additionalHeaders = _a.additionalHeaders;\n    if (this.socketStatus === SOCKET_STATUS.READY) {\n      return;\n    }\n    return new Promise(function (res, rej) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var payloadString, authHeader, headerString, headerQs, discoverableEndpoint, protocol, awsRealTimeUrl, authTokenSubprotocol, err_3;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              this.promiseArray.push({\n                res: res,\n                rej: rej\n              });\n              if (!(this.socketStatus === SOCKET_STATUS.CLOSED)) return [3 /*break*/, 5];\n              _a.label = 1;\n            case 1:\n              _a.trys.push([1, 4,, 5]);\n              this.socketStatus = SOCKET_STATUS.CONNECTING;\n              payloadString = '{}';\n              return [4 /*yield*/, this._awsRealTimeHeaderBasedAuth({\n                authenticationType: authenticationType,\n                payload: payloadString,\n                canonicalUri: '/connect',\n                apiKey: apiKey,\n                appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n                region: region,\n                additionalHeaders: additionalHeaders\n              })];\n            case 2:\n              authHeader = _a.sent();\n              headerString = authHeader ? JSON.stringify(authHeader) : '';\n              headerQs = base64urlEncode(headerString);\n              discoverableEndpoint = appSyncGraphqlEndpoint !== null && appSyncGraphqlEndpoint !== void 0 ? appSyncGraphqlEndpoint : '';\n              if (this.isCustomDomain(discoverableEndpoint)) {\n                discoverableEndpoint = discoverableEndpoint.concat(customDomainPath);\n              } else {\n                discoverableEndpoint = discoverableEndpoint.replace('appsync-api', 'appsync-realtime-api').replace('gogi-beta', 'grt-beta');\n              }\n              protocol = this.isSSLEnabled ? 'wss://' : 'ws://';\n              discoverableEndpoint = discoverableEndpoint.replace('https://', protocol).replace('http://', protocol);\n              awsRealTimeUrl = discoverableEndpoint;\n              authTokenSubprotocol = \"header-\" + headerQs;\n              return [4 /*yield*/, this._initializeRetryableHandshake(awsRealTimeUrl, authTokenSubprotocol)];\n            case 3:\n              _a.sent();\n              this.promiseArray.forEach(function (_a) {\n                var res = _a.res;\n                logger.debug('Notifying connection successful');\n                res();\n              });\n              this.socketStatus = SOCKET_STATUS.READY;\n              this.promiseArray = [];\n              return [3 /*break*/, 5];\n            case 4:\n              err_3 = _a.sent();\n              logger.debug('Connection exited with', err_3);\n              this.promiseArray.forEach(function (_a) {\n                var rej = _a.rej;\n                return rej(err_3);\n              });\n              this.promiseArray = [];\n              if (this.awsRealTimeSocket && this.awsRealTimeSocket.readyState === WebSocket.OPEN) {\n                this.awsRealTimeSocket.close(3001);\n              }\n              this.awsRealTimeSocket = undefined;\n              this.socketStatus = SOCKET_STATUS.CLOSED;\n              return [3 /*break*/, 5];\n            case 5:\n              return [2 /*return*/];\n          }\n        });\n      });\n    });\n  };\n  AWSAppSyncRealTimeProvider.prototype._initializeRetryableHandshake = function (awsRealTimeUrl, subprotocol) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug(\"Initializaling retryable Handshake\");\n            return [4 /*yield*/, jitteredExponentialRetry(this._initializeHandshake.bind(this), [awsRealTimeUrl, subprotocol], MAX_DELAY_MS)];\n          case 1:\n            _a.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  AWSAppSyncRealTimeProvider.prototype._initializeHandshake = function (awsRealTimeUrl, subprotocol) {\n    return __awaiter(this, void 0, void 0, function () {\n      var err_4, _a, errorType, errorCode;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            logger.debug(\"Initializing handshake \" + awsRealTimeUrl);\n            _b.label = 1;\n          case 1:\n            _b.trys.push([1, 4,, 5]);\n            return [4 /*yield*/, function () {\n              return new Promise(function (res, rej) {\n                var newSocket = _this.getNewWebSocket(awsRealTimeUrl, ['graphql-ws', subprotocol]);\n                newSocket.onerror = function () {\n                  logger.debug(\"WebSocket connection error\");\n                };\n                newSocket.onclose = function () {\n                  rej(new Error('Connection handshake error'));\n                };\n                newSocket.onopen = function () {\n                  _this.awsRealTimeSocket = newSocket;\n                  return res();\n                };\n              });\n            }()];\n          case 2:\n            _b.sent();\n            // Step 2: wait for ack from AWS AppSyncReaTime after sending init\n            return [4 /*yield*/, function () {\n              return new Promise(function (res, rej) {\n                if (_this.awsRealTimeSocket) {\n                  var ackOk_1 = false;\n                  _this.awsRealTimeSocket.onerror = function (error) {\n                    logger.debug(\"WebSocket error \" + JSON.stringify(error));\n                  };\n                  _this.awsRealTimeSocket.onclose = function (event) {\n                    logger.debug(\"WebSocket closed \" + event.reason);\n                    rej(new Error(JSON.stringify(event)));\n                  };\n                  _this.awsRealTimeSocket.onmessage = function (message) {\n                    if (typeof message.data !== 'string') {\n                      return;\n                    }\n                    logger.debug(\"subscription message from AWS AppSyncRealTime: \" + message.data + \" \");\n                    var data = JSON.parse(message.data);\n                    var type = data.type,\n                      _a = data.payload,\n                      _b = (_a === void 0 ? {} : _a).connectionTimeoutMs,\n                      connectionTimeoutMs = _b === void 0 ? DEFAULT_KEEP_ALIVE_TIMEOUT : _b;\n                    if (type === MESSAGE_TYPES.GQL_CONNECTION_ACK) {\n                      ackOk_1 = true;\n                      if (_this.awsRealTimeSocket) {\n                        _this.keepAliveTimeout = connectionTimeoutMs;\n                        _this.awsRealTimeSocket.onmessage = _this._handleIncomingSubscriptionMessage.bind(_this);\n                        _this.awsRealTimeSocket.onerror = function (err) {\n                          logger.debug(err);\n                          _this._errorDisconnect(CONTROL_MSG.CONNECTION_CLOSED);\n                        };\n                        _this.awsRealTimeSocket.onclose = function (event) {\n                          logger.debug(\"WebSocket closed \" + event.reason);\n                          _this._errorDisconnect(CONTROL_MSG.CONNECTION_CLOSED);\n                        };\n                      }\n                      res('Cool, connected to AWS AppSyncRealTime');\n                      return;\n                    }\n                    if (type === MESSAGE_TYPES.GQL_CONNECTION_ERROR) {\n                      var _c = data.payload,\n                        _d = (_c === void 0 ? {} : _c).errors,\n                        _e = __read(_d === void 0 ? [] : _d, 1),\n                        _f = _e[0],\n                        _g = _f === void 0 ? {} : _f,\n                        _h = _g.errorType,\n                        errorType = _h === void 0 ? '' : _h,\n                        _j = _g.errorCode,\n                        errorCode = _j === void 0 ? 0 : _j;\n                      rej({\n                        errorType: errorType,\n                        errorCode: errorCode\n                      });\n                    }\n                  };\n                  var gqlInit = {\n                    type: MESSAGE_TYPES.GQL_CONNECTION_INIT\n                  };\n                  _this.awsRealTimeSocket.send(JSON.stringify(gqlInit));\n                  var checkAckOk_1 = function (ackOk) {\n                    if (!ackOk) {\n                      _this.connectionStateMonitor.record(CONNECTION_CHANGE.CONNECTION_FAILED);\n                      rej(new Error(\"Connection timeout: ack from AWSAppSyncRealTime was not received after \" + CONNECTION_INIT_TIMEOUT + \" ms\"));\n                    }\n                  };\n                  setTimeout(function () {\n                    return checkAckOk_1(ackOk_1);\n                  }, CONNECTION_INIT_TIMEOUT);\n                }\n              });\n            }()];\n          case 3:\n            // Step 2: wait for ack from AWS AppSyncReaTime after sending init\n            _b.sent();\n            return [3 /*break*/, 5];\n          case 4:\n            err_4 = _b.sent();\n            _a = err_4, errorType = _a.errorType, errorCode = _a.errorCode;\n            if (NON_RETRYABLE_CODES.includes(errorCode)) {\n              throw new NonRetryableError(errorType);\n            } else if (errorType) {\n              throw new Error(errorType);\n            } else {\n              throw err_4;\n            }\n            return [3 /*break*/, 5];\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeHeaderBasedAuth = function (_a) {\n    var authenticationType = _a.authenticationType,\n      payload = _a.payload,\n      canonicalUri = _a.canonicalUri,\n      appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint,\n      apiKey = _a.apiKey,\n      region = _a.region,\n      additionalHeaders = _a.additionalHeaders;\n    return __awaiter(this, void 0, void 0, function () {\n      var headerHandler, handler, host, result;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            headerHandler = {\n              API_KEY: this._awsRealTimeApiKeyHeader.bind(this),\n              AWS_IAM: this._awsRealTimeIAMHeader.bind(this),\n              OPENID_CONNECT: this._awsRealTimeOPENIDHeader.bind(this),\n              AMAZON_COGNITO_USER_POOLS: this._awsRealTimeCUPHeader.bind(this),\n              AWS_LAMBDA: this._customAuthHeader\n            };\n            if (!(!authenticationType || !headerHandler[authenticationType])) return [3 /*break*/, 1];\n            logger.debug(\"Authentication type \" + authenticationType + \" not supported\");\n            return [2 /*return*/, undefined];\n          case 1:\n            handler = headerHandler[authenticationType];\n            host = url.parse(appSyncGraphqlEndpoint !== null && appSyncGraphqlEndpoint !== void 0 ? appSyncGraphqlEndpoint : '').host;\n            logger.debug(\"Authenticating with \" + authenticationType);\n            return [4 /*yield*/, handler({\n              payload: payload,\n              canonicalUri: canonicalUri,\n              appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n              apiKey: apiKey,\n              region: region,\n              host: host,\n              additionalHeaders: additionalHeaders\n            })];\n          case 2:\n            result = _b.sent();\n            return [2 /*return*/, result];\n        }\n      });\n    });\n  };\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeCUPHeader = function (_a) {\n    var host = _a.host;\n    return __awaiter(this, void 0, void 0, function () {\n      var session;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, Auth.currentSession()];\n          case 1:\n            session = _b.sent();\n            return [2 /*return*/, {\n              Authorization: session.getAccessToken().getJwtToken(),\n              host: host\n            }];\n        }\n      });\n    });\n  };\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeOPENIDHeader = function (_a) {\n    var host = _a.host;\n    return __awaiter(this, void 0, void 0, function () {\n      var token, federatedInfo, currentUser;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, Cache.getItem('federatedInfo')];\n          case 1:\n            federatedInfo = _b.sent();\n            if (!federatedInfo) return [3 /*break*/, 2];\n            token = federatedInfo.token;\n            return [3 /*break*/, 4];\n          case 2:\n            return [4 /*yield*/, Auth.currentAuthenticatedUser()];\n          case 3:\n            currentUser = _b.sent();\n            if (currentUser) {\n              token = currentUser.token;\n            }\n            _b.label = 4;\n          case 4:\n            if (!token) {\n              throw new Error('No federated jwt');\n            }\n            return [2 /*return*/, {\n              Authorization: token,\n              host: host\n            }];\n        }\n      });\n    });\n  };\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeApiKeyHeader = function (_a) {\n    var apiKey = _a.apiKey,\n      host = _a.host;\n    return __awaiter(this, void 0, void 0, function () {\n      var dt, dtStr;\n      return __generator(this, function (_b) {\n        dt = new Date();\n        dtStr = dt.toISOString().replace(/[:\\-]|\\.\\d{3}/g, '');\n        return [2 /*return*/, {\n          host: host,\n          'x-amz-date': dtStr,\n          'x-api-key': apiKey\n        }];\n      });\n    });\n  };\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeIAMHeader = function (_a) {\n    var payload = _a.payload,\n      canonicalUri = _a.canonicalUri,\n      appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint,\n      region = _a.region;\n    return __awaiter(this, void 0, void 0, function () {\n      var endpointInfo, credentialsOK, creds, request, signed_params;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            endpointInfo = {\n              region: region,\n              service: 'appsync'\n            };\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _b.sent();\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n            return [4 /*yield*/, Credentials.get().then(function (credentials) {\n              var _a = credentials,\n                secretAccessKey = _a.secretAccessKey,\n                accessKeyId = _a.accessKeyId,\n                sessionToken = _a.sessionToken;\n              return {\n                secret_key: secretAccessKey,\n                access_key: accessKeyId,\n                session_token: sessionToken\n              };\n            })];\n          case 2:\n            creds = _b.sent();\n            request = {\n              url: \"\" + appSyncGraphqlEndpoint + canonicalUri,\n              data: payload,\n              method: 'POST',\n              headers: __assign({}, AWS_APPSYNC_REALTIME_HEADERS)\n            };\n            signed_params = Signer.sign(request, creds, endpointInfo);\n            return [2 /*return*/, signed_params.headers];\n        }\n      });\n    });\n  };\n  AWSAppSyncRealTimeProvider.prototype._customAuthHeader = function (_a) {\n    var host = _a.host,\n      additionalHeaders = _a.additionalHeaders;\n    if (!additionalHeaders || !additionalHeaders['Authorization']) {\n      throw new Error('No auth token specified');\n    }\n    return {\n      Authorization: additionalHeaders.Authorization,\n      host: host\n    };\n  };\n  /**\n   * @private\n   */\n  AWSAppSyncRealTimeProvider.prototype._ensureCredentials = function () {\n    return Credentials.get().then(function (credentials) {\n      if (!credentials) return false;\n      var cred = Credentials.shear(credentials);\n      logger.debug('set credentials for AWSAppSyncRealTimeProvider', cred);\n      return true;\n    }).catch(function (err) {\n      logger.warn('ensure credentials error', err);\n      return false;\n    });\n  };\n  return AWSAppSyncRealTimeProvider;\n}(AbstractPubSubProvider);\nexport { AWSAppSyncRealTimeProvider };\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}