{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { PersonalizeEventsClient } from \"./PersonalizeEventsClient\";\nimport { PutEventsCommand } from \"./commands/PutEventsCommand\";\nimport { PutItemsCommand } from \"./commands/PutItemsCommand\";\nimport { PutUsersCommand } from \"./commands/PutUsersCommand\";\n/**\n * <p>Amazon Personalize can consume real-time user event data, such as <i>stream</i> or <i>click</i> data, and use\n *       it for model training either alone or combined with historical data. For more information see <a>recording-events</a>.</p>\n */\nvar PersonalizeEvents = /** @class */function (_super) {\n  __extends(PersonalizeEvents, _super);\n  function PersonalizeEvents() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  PersonalizeEvents.prototype.putEvents = function (args, optionsOrCb, cb) {\n    var command = new PutEventsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  PersonalizeEvents.prototype.putItems = function (args, optionsOrCb, cb) {\n    var command = new PutItemsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  PersonalizeEvents.prototype.putUsers = function (args, optionsOrCb, cb) {\n    var command = new PutUsersCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  return PersonalizeEvents;\n}(PersonalizeEventsClient);\nexport { PersonalizeEvents };\n//# sourceMappingURL=PersonalizeEvents.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}