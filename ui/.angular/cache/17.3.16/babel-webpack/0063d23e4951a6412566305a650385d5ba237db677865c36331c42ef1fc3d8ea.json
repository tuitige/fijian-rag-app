{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\n/**\n * Returns a canonical query string.\n *\n * @param searchParams `searchParams` from the request url.\n * @returns URL-encoded query string parameters, separated by ampersands (&). Percent-encode reserved characters,\n * including the space character. Encode names and values separately. If there are empty parameters, append the equals\n * sign to the parameter name before encoding. After encoding, sort the parameters alphabetically by key name. If there\n * is no query string, use an empty string (\"\").\n *\n * @internal\n */\nexport var getCanonicalQueryString = function (searchParams) {\n  return Array.from(searchParams).sort(function (_a, _b) {\n    var _c = __read(_a, 2),\n      keyA = _c[0],\n      valA = _c[1];\n    var _d = __read(_b, 2),\n      keyB = _d[0],\n      valB = _d[1];\n    if (keyA === keyB) {\n      return valA < valB ? -1 : 1;\n    }\n    return keyA < keyB ? -1 : 1;\n  }).map(function (_a) {\n    var _b = __read(_a, 2),\n      key = _b[0],\n      val = _b[1];\n    return \"\".concat(escapeUri(key), \"=\").concat(escapeUri(val));\n  }).join('&');\n};\nvar escapeUri = function (uri) {\n  return encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode);\n};\nvar hexEncode = function (c) {\n  return \"%\".concat(c.charCodeAt(0).toString(16).toUpperCase());\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}