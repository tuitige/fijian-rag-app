{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (g && (g = 0, op[0] && (_ = 0)), _) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * @private For internal Amplify use.\n *\n * Creates a new scope for promises, observables, and other types of work or\n * processes that may be running in the background. This manager provides\n * an singular entrypoint to request termination and await completion.\n *\n * As work completes on its own prior to close, the manager removes them\n * from the registry to avoid holding references to completed jobs.\n */\nvar BackgroundProcessManager = /** @class */function () {\n  /**\n   * Creates a new manager for promises, observables, and other types\n   * of work that may be running in the background. This manager provides\n   * a centralized mechanism to request termination and await completion.\n   */\n  function BackgroundProcessManager() {\n    /**\n     * A string indicating whether the manager is accepting new work (\"Open\"),\n     * waiting for work to complete (\"Closing\"), or fully done with all\n     * submitted work and *not* accepting new jobs (\"Closed\").\n     */\n    this._state = BackgroundProcessManagerState.Open;\n    /**\n     * The list of outstanding jobs we'll need to wait for upon `close()`\n     */\n    this.jobs = new Set();\n  }\n  BackgroundProcessManager.prototype.add = function (jobOrDescription, optionalDescription) {\n    var job;\n    var description;\n    if (typeof jobOrDescription === 'string') {\n      job = undefined;\n      description = jobOrDescription;\n    } else {\n      job = jobOrDescription;\n      description = optionalDescription;\n    }\n    var error = this.closedFailure(description);\n    if (error) return error;\n    if (job === undefined) {\n      return this.addHook(description);\n    } else if (typeof job === 'function') {\n      return this.addFunction(job, description);\n    } else if (job instanceof BackgroundProcessManager) {\n      return this.addManager(job, description);\n    } else {\n      throw new Error('If `job` is provided, it must be an Observable, Function, or BackgroundProcessManager.');\n    }\n  };\n  /**\n   * Adds a **cleaner** function that doesn't immediately get executed.\n   * Instead, the caller gets a **terminate** function back. The *cleaner* is\n   * invoked only once the mananger *closes* or the returned **terminate**\n   * function is called.\n   *\n   * @param clean The cleanup function.\n   * @param description Optional description to help identify pending jobs.\n   * @returns A terminate function.\n   */\n  BackgroundProcessManager.prototype.addCleaner = function (clean, description) {\n    var _this = this;\n    var _a = this.addHook(description),\n      resolve = _a.resolve,\n      onTerminate = _a.onTerminate;\n    var proxy = function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4 /*yield*/, clean()];\n            case 1:\n              _a.sent();\n              resolve();\n              return [2 /*return*/];\n          }\n        });\n      });\n    };\n    onTerminate.then(proxy);\n    return proxy;\n  };\n  BackgroundProcessManager.prototype.addFunction = function (job, description) {\n    // the function we call when we want to try to terminate this job.\n    var terminate;\n    // the promise the job can opt into listening to for termination.\n    var onTerminate = new Promise(function (resolve) {\n      terminate = resolve;\n    });\n    // finally! start the job.\n    var jobResult = job(onTerminate);\n    // depending on what the job gives back, register the result\n    // so we can monitor for completion.\n    if (typeof (jobResult === null || jobResult === void 0 ? void 0 : jobResult.then) === 'function') {\n      this.registerPromise(jobResult, terminate, description);\n    }\n    // At the end of the day, or you know, method call, it doesn't matter\n    // what the return value is at all; we just pass it through to the\n    // caller.\n    return jobResult;\n  };\n  BackgroundProcessManager.prototype.addManager = function (manager, description) {\n    var _this = this;\n    this.addCleaner(function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4 /*yield*/, manager.close()];\n            case 1:\n              return [2 /*return*/, _a.sent()];\n          }\n        });\n      });\n    }, description);\n  };\n  /**\n   * Creates and registers a fabricated job for processes that need to operate\n   * with callbacks/hooks. The returned `resolve` and `reject`\n   * functions can be used to signal the job is done successfully or not.\n   * The returned `onTerminate` is a promise that will resolve when the\n   * manager is requesting the termination of the job.\n   *\n   * @param description Optional description to help identify pending jobs.\n   * @returns `{ resolve, reject, onTerminate }`\n   */\n  BackgroundProcessManager.prototype.addHook = function (description) {\n    // the resolve/reject functions we'll provide to the caller to signal\n    // the state of the job.\n    var resolve;\n    var reject;\n    // the underlying promise we'll use to manage it, pretty much like\n    // any other promise.\n    var promise = new Promise(function (res, rej) {\n      resolve = res;\n      reject = rej;\n    });\n    // the function we call when we want to try to terminate this job.\n    var terminate;\n    // the promise the job can opt into listening to for termination.\n    var onTerminate = new Promise(function (resolveTerminate) {\n      terminate = resolveTerminate;\n    });\n    this.registerPromise(promise, terminate, description);\n    return {\n      resolve: resolve,\n      reject: reject,\n      onTerminate: onTerminate\n    };\n  };\n  /**\n   * Adds a Promise based job to the list of jobs for monitoring and listens\n   * for either a success or failure, upon which the job is considered \"done\"\n   * and removed from the registry.\n   *\n   * @param promise A promise that is on its way to being returned to a\n   * caller, which needs to be tracked as a background job.\n   * @param terminate The termination function to register, which can be\n   * invoked to request the job stop.\n   * @param description Optional description to help identify pending jobs.\n   */\n  BackgroundProcessManager.prototype.registerPromise = function (promise, terminate, description) {\n    var _this = this;\n    var jobEntry = {\n      promise: promise,\n      terminate: terminate,\n      description: description\n    };\n    this.jobs.add(jobEntry);\n    // in all of my testing, it is safe to multi-subscribe to a promise.\n    // so, rather than create another layer of promising, we're just going\n    // to hook into the promise we already have, and when it's done\n    // (successfully or not), we no longer need to wait for it upon close.\n    //\n    // sorry this is a bit hand-wavy:\n    //\n    // i believe we use `.then` and `.catch` instead of `.finally` because\n    // `.finally` is invoked in a different order in the sequence, and this\n    // breaks assumptions throughout and causes failures.\n    promise.then(function () {\n      _this.jobs.delete(jobEntry);\n    }).catch(function () {\n      _this.jobs.delete(jobEntry);\n    });\n  };\n  Object.defineProperty(BackgroundProcessManager.prototype, \"length\", {\n    /**\n     * The number of jobs being waited on.\n     *\n     * We don't use this for anything. It's just informational for the caller,\n     * and can be used in logging and testing.\n     *\n     * @returns the number of jobs.\n     */\n    get: function () {\n      return this.jobs.size;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BackgroundProcessManager.prototype, \"state\", {\n    /**\n     * The execution state of the manager. One of:\n     *\n     * 1. \"Open\" -> Accepting new jobs\n     * 1. \"Closing\" -> Not accepting new work. Waiting for jobs to complete.\n     * 1. \"Closed\" -> Not accepting new work. All submitted jobs are complete.\n     */\n    get: function () {\n      return this._state;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BackgroundProcessManager.prototype, \"pending\", {\n    /**\n     * The registered `description` of all still-pending jobs.\n     *\n     * @returns descriptions as an array.\n     */\n    get: function () {\n      return Array.from(this.jobs).map(function (job) {\n        return job.description;\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BackgroundProcessManager.prototype, \"isOpen\", {\n    /**\n     * Whether the manager is accepting new jobs.\n     */\n    get: function () {\n      return this._state === BackgroundProcessManagerState.Open;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BackgroundProcessManager.prototype, \"isClosing\", {\n    /**\n     * Whether the manager is rejecting new work, but still waiting for\n     * submitted work to complete.\n     */\n    get: function () {\n      return this._state === BackgroundProcessManagerState.Closing;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BackgroundProcessManager.prototype, \"isClosed\", {\n    /**\n     * Whether the manager is rejecting work and done waiting for submitted\n     * work to complete.\n     */\n    get: function () {\n      return this._state === BackgroundProcessManagerState.Closed;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  BackgroundProcessManager.prototype.closedFailure = function (description) {\n    if (!this.isOpen) {\n      return Promise.reject(new BackgroundManagerNotOpenError([\"The manager is \".concat(this.state, \".\"), \"You tried to add \\\"\".concat(description, \"\\\".\"), \"Pending jobs: [\\n\".concat(this.pending.map(function (t) {\n        return '    ' + t;\n      }).join(',\\n'), \"\\n]\")].join('\\n')));\n    }\n  };\n  /**\n   * Signals jobs to stop (for those that accept interruptions) and waits\n   * for confirmation that jobs have stopped.\n   *\n   * This immediately puts the manager into a closing state and just begins\n   * to reject new work. After all work in the manager is complete, the\n   * manager goes into a `Completed` state and `close()` returns.\n   *\n   * This call is idempotent.\n   *\n   * If the manager is already closing or closed, `finalCleaup` is not executed.\n   *\n   * @param onClosed\n   * @returns The settled results of each still-running job's promise. If the\n   * manager is already closed, this will contain the results as of when the\n   * manager's `close()` was called in an `Open` state.\n   */\n  BackgroundProcessManager.prototype.close = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, _b, job;\n      var e_1, _c;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            if (!this.isOpen) return [3 /*break*/, 2];\n            this._state = BackgroundProcessManagerState.Closing;\n            try {\n              for (_a = __values(Array.from(this.jobs)), _b = _a.next(); !_b.done; _b = _a.next()) {\n                job = _b.value;\n                try {\n                  job.terminate();\n                } catch (error) {\n                  // Due to potential races with a job's natural completion, it's\n                  // reasonable to expect the termination call to fail. Hence,\n                  // not logging as an error.\n                  console.warn(\"Failed to send termination signal to job. Error: \".concat(error.message), job);\n                }\n              }\n            } catch (e_1_1) {\n              e_1 = {\n                error: e_1_1\n              };\n            } finally {\n              try {\n                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n              } finally {\n                if (e_1) throw e_1.error;\n              }\n            }\n            // Use `allSettled()` because we want to wait for all to finish. We do\n            // not want to stop waiting if there is a failure.\n            this._closingPromise = Promise.allSettled(Array.from(this.jobs).map(function (j) {\n              return j.promise;\n            }));\n            return [4 /*yield*/, this._closingPromise];\n          case 1:\n            _d.sent();\n            this._state = BackgroundProcessManagerState.Closed;\n            _d.label = 2;\n          case 2:\n            return [2 /*return*/, this._closingPromise];\n        }\n      });\n    });\n  };\n  /**\n   * Signals the manager to start accepting work (again) and returns once\n   * the manager is ready to do so.\n   *\n   * If the state is already `Open`, this call is a no-op.\n   *\n   * If the state is `Closed`, this call simply updates state and returns.\n   *\n   * If the state is `Closing`, this call waits for completion before it\n   * updates the state and returns.\n   */\n  BackgroundProcessManager.prototype.open = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.isClosing) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.close()];\n          case 1:\n            _a.sent();\n            _a.label = 2;\n          case 2:\n            this._state = BackgroundProcessManagerState.Open;\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  return BackgroundProcessManager;\n}();\nexport { BackgroundProcessManager };\n/**\n *\n */\nvar BackgroundManagerNotOpenError = /** @class */function (_super) {\n  __extends(BackgroundManagerNotOpenError, _super);\n  function BackgroundManagerNotOpenError(message) {\n    return _super.call(this, \"BackgroundManagerNotOpenError: \".concat(message)) || this;\n  }\n  return BackgroundManagerNotOpenError;\n}(Error);\nexport { BackgroundManagerNotOpenError };\n/**\n * All possible states a `BackgroundProcessManager` instance can be in.\n */\nexport var BackgroundProcessManagerState = /*#__PURE__*/function (BackgroundProcessManagerState) {\n  /**\n   * Accepting new jobs.\n   */\n  BackgroundProcessManagerState[\"Open\"] = \"Open\";\n  /**\n   * Not accepting new jobs. Waiting for submitted jobs to complete.\n   */\n  BackgroundProcessManagerState[\"Closing\"] = \"Closing\";\n  /**\n   * Not accepting new jobs. All submitted jobs are complete.\n   */\n  BackgroundProcessManagerState[\"Closed\"] = \"Closed\";\n  return BackgroundProcessManagerState;\n}(BackgroundProcessManagerState || {});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}