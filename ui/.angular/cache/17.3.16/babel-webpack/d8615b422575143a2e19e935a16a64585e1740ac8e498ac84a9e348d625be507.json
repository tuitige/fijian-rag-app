{"ast":null,"code":"import { __rest as e } from \"tslib\";\nimport { Storage as r } from \"aws-amplify\";\nimport { translate as t } from \"../../../../i18n/translations.mjs\";\nfunction l(t) {\n  var {\n      file: l,\n      fileName: a,\n      level: o = \"private\",\n      progressCallback: s,\n      errorCallback: i,\n      completeCallback: n,\n      isResumable: p = !1,\n      provider: c\n    } = t,\n    b = e(t, [\"file\", \"fileName\", \"level\", \"progressCallback\", \"errorCallback\", \"completeCallback\", \"isResumable\", \"provider\"]);\n  const m = l.type || \"binary/octet-stream\";\n  return !0 === p ? r.put(a, l, Object.assign({\n    level: o,\n    resumable: p,\n    progressCallback: s,\n    errorCallback: i,\n    completeCallback: n,\n    contentType: m,\n    provider: c\n  }, b)) : r.put(a, l, Object.assign({\n    level: o,\n    resumable: !1,\n    progressCallback: s,\n    contentType: m,\n    provider: c\n  }, b)).then(n, i);\n}\nfunction a(e, r = !1, t = 1) {\n  const l = r ? 1e3 : 1024;\n  if (Math.abs(e) < l) return e + \" B\";\n  const a = r ? [\"kB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"] : [\"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\", \"ZiB\", \"YiB\"];\n  let o = -1;\n  const s = Math.pow(10, t);\n  do {\n    e /= l, ++o;\n  } while (Math.round(Math.abs(e) * s) / s >= l && o < a.length - 1);\n  return e.toFixed(t) + \" \" + a[o];\n}\nconst o = (e, r) => e && r.size > e ? t(\"File size must be below \") + a(e, !0) : null,\n  s = (e, r) => e.filter(e => {\n    const t = e.name || \"\",\n      l = (e.type || \"\").toLowerCase(),\n      a = l.replace(/\\/.*$/, \"\");\n    return r.some(e => {\n      const r = e.trim().toLowerCase();\n      return \".\" === r.charAt(0) ? t.toLowerCase().endsWith(r) : r.endsWith(\"/*\") ? a === r.replace(/\\/.*$/, \"\") : l === r;\n    });\n  }),\n  i = (e, r) => {\n    const t = e.split(\".\").pop();\n    return r.split(\".\").pop() === t;\n  };\nexport { o as checkMaxSize, a as humanFileSize, i as isValidExtension, s as returnAcceptedFiles, l as uploadFile };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}