{"ast":null,"code":"import e from \"lodash/kebabCase.js\";\nimport t from \"style-dictionary/lib/utils/references/usesReference.js\";\nimport { isObject as n, has as r, isString as o } from \"../utils/index.mjs\";\nconst u = \"amplify\",\n  s = [\"offsetX\", \"offsetY\", \"blurRadius\", \"spreadRadius\", \"color\"];\nfunction i(e) {\n  if (!e) return \"\";\n  if (t(e)) {\n    return `var(--${f({\n      path: e.replace(/\\{|\\}/g, \"\").replace(\".value\", \"\").split(\".\")\n    })})`;\n  }\n  return e;\n}\nfunction a(e) {\n  const {\n    value: t\n  } = e;\n  return o(t) ? i(t) : p(t) ? s.map(n => i(p(e) ? e[n] : t[n])).join(\" \") : t;\n}\nfunction f({\n  path: t = []\n}) {\n  return `${e([u, ...t].join(\" \"))}`;\n}\nfunction c(e) {\n  return n(e) && r(e, \"value\");\n}\nfunction p(e) {\n  return n(e) && r(e, \"offsetX\");\n}\nfunction l({\n  tokens: e,\n  path: t = [],\n  setupToken: o\n}) {\n  if (r(e, \"value\")) return o({\n    token: e,\n    path: t\n  });\n  const u = {};\n  for (const s in e) if (r(e, s)) {\n    const r = e[s],\n      i = n(r) ? r : {\n        value: r\n      };\n    u[s] = l({\n      tokens: i,\n      path: t.concat(s),\n      setupToken: o\n    });\n  }\n  return u;\n}\nexport { u as CSS_VARIABLE_PREFIX, f as cssNameTransform, a as cssValue, c as isDesignToken, p as isShadowTokenObject, l as setupTokens };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}