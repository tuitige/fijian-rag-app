{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __read } from \"tslib\";\nimport { Amplify, ConsoleLogger, Hub } from '@aws-amplify/core';\nimport isEmpty from 'lodash/isEmpty';\nimport { AMPLIFY_SYMBOL } from '../../../common';\nvar DELIVERY_TYPE = 'IN_APP_MESSAGE';\nvar eventNameMemo = {};\nvar eventAttributesMemo = {};\nvar eventMetricsMemo = {};\nexport var logger = new ConsoleLogger('InAppMessaging.AWSPinpointProvider');\nexport var dispatchInAppMessagingEvent = function (event, data, message) {\n  Hub.dispatch('inAppMessaging', {\n    event: event,\n    data: data,\n    message: message\n  }, 'InAppMessaging', AMPLIFY_SYMBOL);\n};\nexport var recordAnalyticsEvent = function (event, message) {\n  if (Amplify.Analytics && typeof Amplify.Analytics.record === 'function') {\n    var id = message.id,\n      metadata = message.metadata;\n    Amplify.Analytics.record({\n      name: event,\n      attributes: {\n        campaign_id: id,\n        delivery_type: DELIVERY_TYPE,\n        treatment_id: metadata === null || metadata === void 0 ? void 0 : metadata.treatmentId\n      }\n    });\n  } else {\n    logger.debug('Analytics module is not registered into Amplify');\n  }\n};\nexport var getStartOfDay = function () {\n  var now = new Date();\n  now.setHours(0, 0, 0, 0);\n  return now.toISOString();\n};\nexport var matchesEventType = function (_a, _b) {\n  var CampaignId = _a.CampaignId,\n    Schedule = _a.Schedule;\n  var eventType = _b.name;\n  var _c;\n  var EventType = ((_c = Schedule === null || Schedule === void 0 ? void 0 : Schedule.EventFilter) === null || _c === void 0 ? void 0 : _c.Dimensions).EventType;\n  var memoKey = CampaignId + \":\" + eventType;\n  if (!eventNameMemo.hasOwnProperty(memoKey)) {\n    eventNameMemo[memoKey] = !!(EventType === null || EventType === void 0 ? void 0 : EventType.Values.includes(eventType));\n  }\n  return eventNameMemo[memoKey];\n};\nexport var matchesAttributes = function (_a, _b) {\n  var CampaignId = _a.CampaignId,\n    Schedule = _a.Schedule;\n  var attributes = _b.attributes;\n  var _c;\n  var Attributes = ((_c = Schedule === null || Schedule === void 0 ? void 0 : Schedule.EventFilter) === null || _c === void 0 ? void 0 : _c.Dimensions).Attributes;\n  if (isEmpty(Attributes)) {\n    // if message does not have attributes defined it does not matter what attributes are on the event\n    return true;\n  }\n  if (isEmpty(attributes)) {\n    // if message does have attributes but the event does not then it always fails the check\n    return false;\n  }\n  var memoKey = CampaignId + \":\" + JSON.stringify(attributes);\n  if (!eventAttributesMemo.hasOwnProperty(memoKey)) {\n    eventAttributesMemo[memoKey] = Object.entries(Attributes).every(function (_a) {\n      var _b = __read(_a, 2),\n        key = _b[0],\n        Values = _b[1].Values;\n      return Values.includes(attributes[key]);\n    });\n  }\n  return eventAttributesMemo[memoKey];\n};\nexport var matchesMetrics = function (_a, _b) {\n  var CampaignId = _a.CampaignId,\n    Schedule = _a.Schedule;\n  var metrics = _b.metrics;\n  var _c;\n  var Metrics = ((_c = Schedule === null || Schedule === void 0 ? void 0 : Schedule.EventFilter) === null || _c === void 0 ? void 0 : _c.Dimensions).Metrics;\n  if (isEmpty(Metrics)) {\n    // if message does not have metrics defined it does not matter what metrics are on the event\n    return true;\n  }\n  if (isEmpty(metrics)) {\n    // if message does have metrics but the event does not then it always fails the check\n    return false;\n  }\n  var memoKey = CampaignId + \":\" + JSON.stringify(metrics);\n  if (!eventMetricsMemo.hasOwnProperty(memoKey)) {\n    eventMetricsMemo[memoKey] = Object.entries(Metrics).every(function (_a) {\n      var _b = __read(_a, 2),\n        key = _b[0],\n        _c = _b[1],\n        ComparisonOperator = _c.ComparisonOperator,\n        Value = _c.Value;\n      var compare = getComparator(ComparisonOperator);\n      // if there is some unknown comparison operator, treat as a comparison failure\n      return compare ? compare(Value, metrics[key]) : false;\n    });\n  }\n  return eventMetricsMemo[memoKey];\n};\nexport var getComparator = function (operator) {\n  switch (operator) {\n    case 'EQUAL':\n      return function (metricsVal, eventVal) {\n        return metricsVal === eventVal;\n      };\n    case 'GREATER_THAN':\n      return function (metricsVal, eventVal) {\n        return metricsVal < eventVal;\n      };\n    case 'GREATER_THAN_OR_EQUAL':\n      return function (metricsVal, eventVal) {\n        return metricsVal <= eventVal;\n      };\n    case 'LESS_THAN':\n      return function (metricsVal, eventVal) {\n        return metricsVal > eventVal;\n      };\n    case 'LESS_THAN_OR_EQUAL':\n      return function (metricsVal, eventVal) {\n        return metricsVal >= eventVal;\n      };\n    default:\n      return null;\n  }\n};\nexport var isBeforeEndDate = function (_a) {\n  var Schedule = _a.Schedule;\n  if (!(Schedule === null || Schedule === void 0 ? void 0 : Schedule.EndDate)) {\n    return true;\n  }\n  return new Date() < new Date(Schedule.EndDate);\n};\nexport var isQuietTime = function (message) {\n  var Schedule = message.Schedule;\n  if (!(Schedule === null || Schedule === void 0 ? void 0 : Schedule.QuietTime)) {\n    return false;\n  }\n  var pattern = /^[0-2]\\d:[0-5]\\d$/; // basic sanity check, not a fully featured HH:MM validation\n  var _a = Schedule.QuietTime,\n    Start = _a.Start,\n    End = _a.End;\n  if (!Start || !End || Start === End || !pattern.test(Start) || !pattern.test(End)) {\n    return false;\n  }\n  var now = new Date();\n  var start = new Date(now);\n  var end = new Date(now);\n  var _b = __read(Start.split(':'), 2),\n    startHours = _b[0],\n    startMinutes = _b[1];\n  var _c = __read(End.split(':'), 2),\n    endHours = _c[0],\n    endMinutes = _c[1];\n  start.setHours(Number.parseInt(startHours, 10), Number.parseInt(startMinutes, 10), 0, 0);\n  end.setHours(Number.parseInt(endHours, 10), Number.parseInt(endMinutes, 10), 0, 0);\n  // if quiet time includes midnight, bump the end time to the next day\n  if (start > end) {\n    end.setDate(end.getDate() + 1);\n  }\n  var isQuietTime = now >= start && now <= end;\n  if (isQuietTime) {\n    logger.debug('message filtered due to quiet time', message);\n  }\n  return isQuietTime;\n};\nexport var clearMemo = function () {\n  eventNameMemo = {};\n  eventAttributesMemo = {};\n  eventMetricsMemo = {};\n};\n// in the pinpoint console when a message is created with a Modal or Full Screen layout,\n// it is assigned a layout value of MOBILE_FEED or OVERLAYS respectively in the message payload.\n// In the future, Pinpoint will be updating the layout values in the aforementioned scenario\n// to MODAL and FULL_SCREEN.\n//\n// This utility acts as a safeguard to ensure that:\n// - 1. the usage of MOBILE_FEED and OVERLAYS as values for message layouts are not leaked\n//      outside the Pinpoint provider\n// - 2. Amplify correctly handles the legacy layout values from Pinpoint after they are updated\nexport var interpretLayout = function (layout) {\n  if (layout === 'MOBILE_FEED') {\n    return 'MODAL';\n  }\n  if (layout === 'OVERLAYS') {\n    return 'FULL_SCREEN';\n  }\n  // cast as PinpointInAppMessage['InAppMessage']['Layout'] allows `string` as a value\n  return layout;\n};\nexport var extractContent = function (_a) {\n  var message = _a.InAppMessage;\n  var _b, _c;\n  return (_c = (_b = message === null || message === void 0 ? void 0 : message.Content) === null || _b === void 0 ? void 0 : _b.map(function (content) {\n    var BackgroundColor = content.BackgroundColor,\n      BodyConfig = content.BodyConfig,\n      HeaderConfig = content.HeaderConfig,\n      ImageUrl = content.ImageUrl,\n      PrimaryBtn = content.PrimaryBtn,\n      SecondaryBtn = content.SecondaryBtn;\n    var defaultPrimaryButton = PrimaryBtn === null || PrimaryBtn === void 0 ? void 0 : PrimaryBtn.DefaultConfig;\n    var defaultSecondaryButton = SecondaryBtn === null || SecondaryBtn === void 0 ? void 0 : SecondaryBtn.DefaultConfig;\n    var extractedContent = {};\n    if (BackgroundColor) {\n      extractedContent.container = {\n        style: {\n          backgroundColor: BackgroundColor\n        }\n      };\n    }\n    if (HeaderConfig) {\n      extractedContent.header = {\n        content: HeaderConfig.Header,\n        style: {\n          color: HeaderConfig.TextColor,\n          textAlign: HeaderConfig.Alignment.toLowerCase()\n        }\n      };\n    }\n    if (BodyConfig) {\n      extractedContent.body = {\n        content: BodyConfig.Body,\n        style: {\n          color: BodyConfig.TextColor,\n          textAlign: BodyConfig.Alignment.toLowerCase()\n        }\n      };\n    }\n    if (ImageUrl) {\n      extractedContent.image = {\n        src: ImageUrl\n      };\n    }\n    if (defaultPrimaryButton) {\n      extractedContent.primaryButton = {\n        title: defaultPrimaryButton.Text,\n        action: defaultPrimaryButton.ButtonAction,\n        url: defaultPrimaryButton.Link,\n        style: {\n          backgroundColor: defaultPrimaryButton.BackgroundColor,\n          borderRadius: defaultPrimaryButton.BorderRadius,\n          color: defaultPrimaryButton.TextColor\n        }\n      };\n    }\n    if (defaultSecondaryButton) {\n      extractedContent.secondaryButton = {\n        title: defaultSecondaryButton.Text,\n        action: defaultSecondaryButton.ButtonAction,\n        url: defaultSecondaryButton.Link,\n        style: {\n          backgroundColor: defaultSecondaryButton.BackgroundColor,\n          borderRadius: defaultSecondaryButton.BorderRadius,\n          color: defaultSecondaryButton.TextColor\n        }\n      };\n    }\n    return extractedContent;\n  })) !== null && _c !== void 0 ? _c : [];\n};\nexport var extractMetadata = function (_a) {\n  var InAppMessage = _a.InAppMessage,\n    Priority = _a.Priority,\n    Schedule = _a.Schedule,\n    TreatmentId = _a.TreatmentId;\n  return {\n    customData: InAppMessage === null || InAppMessage === void 0 ? void 0 : InAppMessage.CustomConfig,\n    endDate: Schedule === null || Schedule === void 0 ? void 0 : Schedule.EndDate,\n    priority: Priority,\n    treatmentId: TreatmentId\n  };\n};\n//# sourceMappingURL=utils.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}