{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (g && (g = 0, op[0] && (_ = 0)), _) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nimport { parseMetadata } from '@aws-amplify/core/internals/aws-client-utils';\nimport { parser } from '../runtime';\nexport var parseXmlError = function (response) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var statusCode, body, code, message, error;\n    var _a, _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          if (!response || response.statusCode < 300) {\n            return [2 /*return*/];\n          }\n          statusCode = response.statusCode;\n          return [4 /*yield*/, parseXmlBody(response)];\n        case 1:\n          body = _c.sent();\n          code = (body === null || body === void 0 ? void 0 : body['Code']) ? body.Code : statusCode === 404 ? 'NotFound' : statusCode.toString();\n          message = (_b = (_a = body === null || body === void 0 ? void 0 : body['message']) !== null && _a !== void 0 ? _a : body === null || body === void 0 ? void 0 : body['Message']) !== null && _b !== void 0 ? _b : code;\n          error = new Error(message);\n          return [2 /*return*/, Object.assign(error, {\n            name: code,\n            $metadata: parseMetadata(response)\n          })];\n      }\n    });\n  });\n};\nexport var parseXmlBody = function (response) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (!response.body) {\n            // S3 can return 200 without a body indicating failure.\n            throw new Error('S3 aborted request.');\n          }\n          return [4 /*yield*/, response.body.text()];\n        case 1:\n          data = _a.sent();\n          if ((data === null || data === void 0 ? void 0 : data.length) > 0) {\n            try {\n              return [2 /*return*/, parser.parse(data)];\n            } catch (error) {\n              throw new Error('Failed to parse XML response.');\n            }\n          }\n          return [2 /*return*/, {}];\n      }\n    });\n  });\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}