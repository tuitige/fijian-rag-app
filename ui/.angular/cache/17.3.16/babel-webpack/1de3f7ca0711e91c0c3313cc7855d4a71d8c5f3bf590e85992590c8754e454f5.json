{"ast":null,"code":"import { __awaiter, __extends, __generator, __read } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Category, Credentials, PredictionsAction, getAmplifyUserAgentObject } from '@aws-amplify/core';\nimport { AbstractInterpretPredictionsProvider } from '../types/Providers';\nimport { InterpretTextCategories } from '../types';\nimport { ComprehendClient, DetectSyntaxCommand, DetectEntitiesCommand, DetectDominantLanguageCommand, DetectKeyPhrasesCommand, DetectSentimentCommand } from '@aws-sdk/client-comprehend';\nvar AmazonAIInterpretPredictionsProvider = /** @class */function (_super) {\n  __extends(AmazonAIInterpretPredictionsProvider, _super);\n  function AmazonAIInterpretPredictionsProvider() {\n    return _super.call(this) || this;\n  }\n  AmazonAIInterpretPredictionsProvider.prototype.getProviderName = function () {\n    return 'AmazonAIInterpretPredictionsProvider';\n  };\n  AmazonAIInterpretPredictionsProvider.prototype.interpretText = function (input) {\n    var _this = this;\n    return new Promise(function (res, rej) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var credentials, _a, _b, _c, region, _d, _e, interpretTypeConfig, _f, _g, _h, _j, text, _k, interpretType, _l, _m, _o, language, doAll, languagePromise, languageDetectionParams, entitiesPromise, LanguageCode, _p, entitiesDetectionParams, sentimentPromise, LanguageCode, _q, sentimentParams, syntaxPromise, LanguageCode, _r, syntaxParams, keyPhrasesPromise, LanguageCode, _s, keyPhrasesParams, results, err_1;\n        return __generator(this, function (_t) {\n          switch (_t.label) {\n            case 0:\n              return [4 /*yield*/, Credentials.get()];\n            case 1:\n              credentials = _t.sent();\n              if (!credentials) return [2 /*return*/, rej('No credentials')];\n              _a = this._config.interpretText, _b = _a === void 0 ? {} : _a, _c = _b.region, region = _c === void 0 ? '' : _c, _d = _b.defaults, _e = (_d === void 0 ? {} : _d).type, interpretTypeConfig = _e === void 0 ? '' : _e;\n              _f = input.text, _g = _f === void 0 ? {} : _f, _h = _g.source, _j = (_h === void 0 ? {} : _h).text, text = _j === void 0 ? '' : _j, _k = _g.type, interpretType = _k === void 0 ? interpretTypeConfig : _k;\n              _l = input.text, _m = (_l === void 0 ? {} : _l).source, _o = (_m === void 0 ? {} : _m).language, language = _o === void 0 ? undefined : _o;\n              this.comprehendClient = new ComprehendClient({\n                credentials: credentials,\n                region: region,\n                customUserAgent: getAmplifyUserAgentObject({\n                  category: Category.Predictions,\n                  action: PredictionsAction.Interpret\n                })\n              });\n              doAll = interpretType === InterpretTextCategories.ALL;\n              if (doAll || interpretType === InterpretTextCategories.LANGUAGE) {\n                languageDetectionParams = {\n                  Text: text\n                };\n                languagePromise = this.detectLanguage(languageDetectionParams);\n              }\n              if (!(doAll || interpretType === InterpretTextCategories.ENTITIES)) return [3 /*break*/, 4];\n              _p = language;\n              if (_p) return [3 /*break*/, 3];\n              return [4 /*yield*/, languagePromise];\n            case 2:\n              _p = _t.sent();\n              _t.label = 3;\n            case 3:\n              LanguageCode = _p;\n              if (!LanguageCode) {\n                return [2 /*return*/, rej('language code is required on source for this selection')];\n              }\n              entitiesDetectionParams = {\n                Text: text,\n                LanguageCode: LanguageCode\n              };\n              entitiesPromise = this.detectEntities(entitiesDetectionParams);\n              _t.label = 4;\n            case 4:\n              if (!(doAll || interpretType === InterpretTextCategories.SENTIMENT)) return [3 /*break*/, 7];\n              _q = language;\n              if (_q) return [3 /*break*/, 6];\n              return [4 /*yield*/, languagePromise];\n            case 5:\n              _q = _t.sent();\n              _t.label = 6;\n            case 6:\n              LanguageCode = _q;\n              if (!LanguageCode) {\n                return [2 /*return*/, rej('language code is required on source for this selection')];\n              }\n              sentimentParams = {\n                Text: text,\n                LanguageCode: LanguageCode\n              };\n              sentimentPromise = this.detectSentiment(sentimentParams);\n              _t.label = 7;\n            case 7:\n              if (!(doAll || interpretType === InterpretTextCategories.SYNTAX)) return [3 /*break*/, 10];\n              _r = language;\n              if (_r) return [3 /*break*/, 9];\n              return [4 /*yield*/, languagePromise];\n            case 8:\n              _r = _t.sent();\n              _t.label = 9;\n            case 9:\n              LanguageCode = _r;\n              if (!LanguageCode) {\n                return [2 /*return*/, rej('language code is required on source for this selection')];\n              }\n              syntaxParams = {\n                Text: text,\n                LanguageCode: LanguageCode\n              };\n              syntaxPromise = this.detectSyntax(syntaxParams);\n              _t.label = 10;\n            case 10:\n              if (!(doAll || interpretType === InterpretTextCategories.KEY_PHRASES)) return [3 /*break*/, 13];\n              _s = language;\n              if (_s) return [3 /*break*/, 12];\n              return [4 /*yield*/, languagePromise];\n            case 11:\n              _s = _t.sent();\n              _t.label = 12;\n            case 12:\n              LanguageCode = _s;\n              if (!LanguageCode) {\n                return [2 /*return*/, rej('language code is required on source for this selection')];\n              }\n              keyPhrasesParams = {\n                Text: text,\n                LanguageCode: LanguageCode\n              };\n              keyPhrasesPromise = this.detectKeyPhrases(keyPhrasesParams);\n              _t.label = 13;\n            case 13:\n              _t.trys.push([13, 15,, 16]);\n              return [4 /*yield*/, Promise.all([languagePromise, entitiesPromise, sentimentPromise, syntaxPromise, keyPhrasesPromise])];\n            case 14:\n              results = _t.sent();\n              res({\n                textInterpretation: {\n                  keyPhrases: results[4] || [],\n                  language: results[0] || '',\n                  sentiment: results[2],\n                  syntax: results[3] || [],\n                  textEntities: results[1] || []\n                }\n              });\n              return [3 /*break*/, 16];\n            case 15:\n              err_1 = _t.sent();\n              rej(err_1);\n              return [3 /*break*/, 16];\n            case 16:\n              return [2 /*return*/];\n          }\n        });\n      });\n    });\n  };\n  AmazonAIInterpretPredictionsProvider.prototype.detectKeyPhrases = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var detectKeyPhrasesCommand, data, _a, KeyPhrases, err_2;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _b.trys.push([0, 2,, 3]);\n            detectKeyPhrasesCommand = new DetectKeyPhrasesCommand(params);\n            return [4 /*yield*/, this.comprehendClient.send(detectKeyPhrasesCommand)];\n          case 1:\n            data = _b.sent();\n            _a = (data || {}).KeyPhrases, KeyPhrases = _a === void 0 ? [] : _a;\n            return [2 /*return*/, KeyPhrases.map(function (_a) {\n              var text = _a.Text;\n              return {\n                text: text\n              };\n            })];\n          case 2:\n            err_2 = _b.sent();\n            if (err_2.code === 'AccessDeniedException') {\n              Promise.reject('Not authorized, did you enable Interpret Text on predictions category Amplify CLI? try: ' + 'amplify predictions add');\n            } else {\n              Promise.reject(err_2.message);\n            }\n            return [3 /*break*/, 3];\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  AmazonAIInterpretPredictionsProvider.prototype.detectSyntax = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var detectSyntaxCommand, data, _a, SyntaxTokens, err_3;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _b.trys.push([0, 2,, 3]);\n            detectSyntaxCommand = new DetectSyntaxCommand(params);\n            return [4 /*yield*/, this.comprehendClient.send(detectSyntaxCommand)];\n          case 1:\n            data = _b.sent();\n            _a = (data || {}).SyntaxTokens, SyntaxTokens = _a === void 0 ? [] : _a;\n            return [2 /*return*/, this.serializeSyntaxFromComprehend(SyntaxTokens)];\n          case 2:\n            err_3 = _b.sent();\n            if (err_3.code === 'AccessDeniedException') {\n              Promise.reject('Not authorized, did you enable Interpret Text on predictions category Amplify CLI? try: ' + 'amplify predictions add');\n            } else {\n              Promise.reject(err_3.message);\n            }\n            return [3 /*break*/, 3];\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  AmazonAIInterpretPredictionsProvider.prototype.serializeSyntaxFromComprehend = function (tokens) {\n    var response = [];\n    if (tokens && Array.isArray(tokens)) {\n      response = tokens.map(function (_a) {\n        var _b = _a.Text,\n          text = _b === void 0 ? '' : _b,\n          _c = _a.PartOfSpeech,\n          _d = (_c === void 0 ? {} : _c).Tag,\n          syntax = _d === void 0 ? '' : _d;\n        return {\n          text: text,\n          syntax: syntax\n        };\n      });\n    }\n    return response;\n  };\n  AmazonAIInterpretPredictionsProvider.prototype.detectSentiment = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var detectSentimentCommand, data, _a, _b, predominant, _c, _d, _e, positive, _f, negative, _g, neutral, _h, mixed, err_4;\n      return __generator(this, function (_j) {\n        switch (_j.label) {\n          case 0:\n            _j.trys.push([0, 2,, 3]);\n            detectSentimentCommand = new DetectSentimentCommand(params);\n            return [4 /*yield*/, this.comprehendClient.send(detectSentimentCommand)];\n          case 1:\n            data = _j.sent();\n            _a = data, _b = _a.Sentiment, predominant = _b === void 0 ? '' : _b, _c = _a.SentimentScore, _d = _c === void 0 ? {} : _c, _e = _d.Positive, positive = _e === void 0 ? 0 : _e, _f = _d.Negative, negative = _f === void 0 ? 0 : _f, _g = _d.Neutral, neutral = _g === void 0 ? 0 : _g, _h = _d.Mixed, mixed = _h === void 0 ? 0 : _h;\n            return [2 /*return*/, {\n              predominant: predominant,\n              positive: positive,\n              negative: negative,\n              neutral: neutral,\n              mixed: mixed\n            }];\n          case 2:\n            err_4 = _j.sent();\n            if (err_4.code === 'AccessDeniedException') {\n              Promise.reject('Not authorized, did you enable Interpret Text on predictions category Amplify CLI? try: ' + 'amplify predictions add');\n            } else {\n              Promise.reject(err_4.message);\n            }\n            return [3 /*break*/, 3];\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  AmazonAIInterpretPredictionsProvider.prototype.detectEntities = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var detectEntitiesCommand, data, _a, Entities, err_5;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _b.trys.push([0, 2,, 3]);\n            detectEntitiesCommand = new DetectEntitiesCommand(params);\n            return [4 /*yield*/, this.comprehendClient.send(detectEntitiesCommand)];\n          case 1:\n            data = _b.sent();\n            _a = (data || {}).Entities, Entities = _a === void 0 ? [] : _a;\n            return [2 /*return*/, this.serializeEntitiesFromComprehend(Entities)];\n          case 2:\n            err_5 = _b.sent();\n            if (err_5.code === 'AccessDeniedException') {\n              Promise.reject('Not authorized, did you enable Interpret Text on predictions category Amplify CLI? try: ' + 'amplify predictions add');\n            } else {\n              Promise.reject(err_5.message);\n            }\n            return [3 /*break*/, 3];\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  AmazonAIInterpretPredictionsProvider.prototype.serializeEntitiesFromComprehend = function (data) {\n    var response = [];\n    if (data && Array.isArray(data)) {\n      response = data.map(function (_a) {\n        var type = _a.Type,\n          text = _a.Text;\n        return {\n          type: type,\n          text: text\n        };\n      });\n    }\n    return response;\n  };\n  AmazonAIInterpretPredictionsProvider.prototype.detectLanguage = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var detectDominantLanguageCommand, data, _a, _b, LanguageCode, err_6;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _c.trys.push([0, 2,, 3]);\n            detectDominantLanguageCommand = new DetectDominantLanguageCommand(params);\n            return [4 /*yield*/, this.comprehendClient.send(detectDominantLanguageCommand)];\n          case 1:\n            data = _c.sent();\n            _a = (data || {}).Languages, _b = __read(_a === void 0 ? [{}] : _a, 1), LanguageCode = _b[0].LanguageCode;\n            if (!LanguageCode) {\n              Promise.reject('Language not detected');\n            }\n            return [2 /*return*/, data.Languages[0].LanguageCode];\n          case 2:\n            err_6 = _c.sent();\n            if (err_6.code === 'AccessDeniedException') {\n              Promise.reject('Not authorized, did you enable Interpret Text on predictions category Amplify CLI? try: ' + 'amplify predictions add');\n            } else {\n              Promise.reject(err_6.message);\n            }\n            return [3 /*break*/, 3];\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  return AmazonAIInterpretPredictionsProvider;\n}(AbstractInterpretPredictionsProvider);\nexport { AmazonAIInterpretPredictionsProvider };\n//# sourceMappingURL=AmazonAIInterpretPredictionsProvider.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}