{"ast":null,"code":"import { __asyncGenerator, __await, __awaiter, __generator, __read, __spreadArray } from \"tslib\";\nimport { ListGeofenceCollectionsCommand } from \"../commands/ListGeofenceCollectionsCommand\";\nimport { Location } from \"../Location\";\nimport { LocationClient } from \"../LocationClient\";\nvar makePagedClientRequest = function (client, input) {\n  var args = [];\n  for (var _i = 2; _i < arguments.length; _i++) {\n    args[_i - 2] = arguments[_i];\n  }\n  return __awaiter(void 0, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4, client.send.apply(client, __spreadArray([new ListGeofenceCollectionsCommand(input)], __read(args), false))];\n        case 1:\n          return [2, _a.sent()];\n      }\n    });\n  });\n};\nvar makePagedRequest = function (client, input) {\n  var args = [];\n  for (var _i = 2; _i < arguments.length; _i++) {\n    args[_i - 2] = arguments[_i];\n  }\n  return __awaiter(void 0, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4, client.listGeofenceCollections.apply(client, __spreadArray([input], __read(args), false))];\n        case 1:\n          return [2, _a.sent()];\n      }\n    });\n  });\n};\nexport function paginateListGeofenceCollections(config, input) {\n  var additionalArguments = [];\n  for (var _i = 2; _i < arguments.length; _i++) {\n    additionalArguments[_i - 2] = arguments[_i];\n  }\n  return __asyncGenerator(this, arguments, function paginateListGeofenceCollections_1() {\n    var token, hasNext, page, prevToken;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          token = config.startingToken || undefined;\n          hasNext = true;\n          _a.label = 1;\n        case 1:\n          if (!hasNext) return [3, 9];\n          input.NextToken = token;\n          input[\"MaxResults\"] = config.pageSize;\n          if (!(config.client instanceof Location)) return [3, 3];\n          return [4, __await(makePagedRequest.apply(void 0, __spreadArray([config.client, input], __read(additionalArguments), false)))];\n        case 2:\n          page = _a.sent();\n          return [3, 6];\n        case 3:\n          if (!(config.client instanceof LocationClient)) return [3, 5];\n          return [4, __await(makePagedClientRequest.apply(void 0, __spreadArray([config.client, input], __read(additionalArguments), false)))];\n        case 4:\n          page = _a.sent();\n          return [3, 6];\n        case 5:\n          throw new Error(\"Invalid client, expected Location | LocationClient\");\n        case 6:\n          return [4, __await(page)];\n        case 7:\n          return [4, _a.sent()];\n        case 8:\n          _a.sent();\n          prevToken = token;\n          token = page.NextToken;\n          hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));\n          return [3, 1];\n        case 9:\n          return [4, __await(undefined)];\n        case 10:\n          return [2, _a.sent()];\n      }\n    });\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}