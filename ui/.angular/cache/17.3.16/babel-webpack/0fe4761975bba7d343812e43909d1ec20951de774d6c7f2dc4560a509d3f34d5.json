{"ast":null,"code":"import { __assign, __awaiter, __generator, __read, __rest, __values } from \"tslib\";\nimport { InternalAPI } from '@aws-amplify/api/internals';\nimport { Category, ConsoleLogger as Logger, DataStoreAction, jitteredBackoff, NonRetryableError, retry, BackgroundProcessManager } from '@aws-amplify/core';\nimport Observable from 'zen-observable-ts';\nimport { DISCARD, isModelFieldType, isTargetNameAssociation, OpType, ProcessName } from '../../types';\nimport { extractTargetNamesFromSrc, USER, ID } from '../../util';\nimport { buildGraphQLOperation, createMutationInstanceFromModelOperation, getModelAuthModes, TransformerMutationType, getTokenForCustomAuth } from '../utils';\nimport { getMutationErrorType } from './errorMaps';\nvar MAX_ATTEMPTS = 10;\nvar logger = new Logger('DataStore');\nvar MutationProcessor = /** @class */function () {\n  function MutationProcessor(schema, storage, userClasses, outbox, modelInstanceCreator, MutationEvent, amplifyConfig, authModeStrategy, errorHandler, conflictHandler, amplifyContext) {\n    if (amplifyConfig === void 0) {\n      amplifyConfig = {};\n    }\n    this.schema = schema;\n    this.storage = storage;\n    this.userClasses = userClasses;\n    this.outbox = outbox;\n    this.modelInstanceCreator = modelInstanceCreator;\n    this.MutationEvent = MutationEvent;\n    this.amplifyConfig = amplifyConfig;\n    this.authModeStrategy = authModeStrategy;\n    this.errorHandler = errorHandler;\n    this.conflictHandler = conflictHandler;\n    this.amplifyContext = amplifyContext;\n    this.typeQuery = new WeakMap();\n    this.processing = false;\n    this.runningProcesses = new BackgroundProcessManager();\n    this.amplifyContext.InternalAPI = this.amplifyContext.InternalAPI || InternalAPI;\n    this.generateQueries();\n  }\n  MutationProcessor.prototype.generateQueries = function () {\n    var _this = this;\n    Object.values(this.schema.namespaces).forEach(function (namespace) {\n      Object.values(namespace.models).filter(function (_a) {\n        var syncable = _a.syncable;\n        return syncable;\n      }).forEach(function (model) {\n        var _a = __read(buildGraphQLOperation(namespace, model, 'CREATE'), 1),\n          createMutation = _a[0];\n        var _b = __read(buildGraphQLOperation(namespace, model, 'UPDATE'), 1),\n          updateMutation = _b[0];\n        var _c = __read(buildGraphQLOperation(namespace, model, 'DELETE'), 1),\n          deleteMutation = _c[0];\n        _this.typeQuery.set(model, [createMutation, updateMutation, deleteMutation]);\n      });\n    });\n  };\n  MutationProcessor.prototype.isReady = function () {\n    return this.observer !== undefined;\n  };\n  MutationProcessor.prototype.start = function () {\n    var _this = this;\n    this.runningProcesses = new BackgroundProcessManager();\n    var observable = new Observable(function (observer) {\n      _this.observer = observer;\n      try {\n        _this.resume();\n      } catch (error) {\n        logger.error('mutations processor start error', error);\n        throw error;\n      }\n      return _this.runningProcesses.addCleaner(function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          return __generator(this, function (_a) {\n            // The observer has unsubscribed and/or `stop()` has been called.\n            this.removeObserver();\n            this.pause();\n            return [2 /*return*/];\n          });\n        });\n      });\n    });\n    return observable;\n  };\n  MutationProcessor.prototype.stop = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.removeObserver();\n            return [4 /*yield*/, this.runningProcesses.close()];\n          case 1:\n            _a.sent();\n            return [4 /*yield*/, this.runningProcesses.open()];\n          case 2:\n            _a.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  MutationProcessor.prototype.removeObserver = function () {\n    var _a, _b;\n    (_b = (_a = this.observer) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);\n    this.observer = undefined;\n  };\n  MutationProcessor.prototype.resume = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.runningProcesses.isOpen && this.runningProcesses.add(function (onTerminate) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var head, namespaceName, _loop_1, this_1, _a;\n                var _this = this;\n                var _b, _c;\n                return __generator(this, function (_d) {\n                  switch (_d.label) {\n                    case 0:\n                      if (this.processing || !this.isReady() || !this.runningProcesses.isOpen) {\n                        return [2 /*return*/];\n                      }\n                      this.processing = true;\n                      namespaceName = USER;\n                      _loop_1 = function () {\n                        var model, operation, data, condition, modelConstructor, result, opName, modelDefinition, modelAuthModes, operationAuthModes_1, authModeAttempts_1, authModeRetry_1, error_1, record, hasMore;\n                        var _a;\n                        return __generator(this, function (_b) {\n                          switch (_b.label) {\n                            case 0:\n                              model = head.model, operation = head.operation, data = head.data, condition = head.condition;\n                              modelConstructor = this_1.userClasses[model];\n                              result = undefined;\n                              opName = undefined;\n                              modelDefinition = undefined;\n                              _b.label = 1;\n                            case 1:\n                              _b.trys.push([1, 4,, 5]);\n                              return [4 /*yield*/, getModelAuthModes({\n                                authModeStrategy: this_1.authModeStrategy,\n                                defaultAuthMode: this_1.amplifyConfig.aws_appsync_authenticationType,\n                                modelName: model,\n                                schema: this_1.schema\n                              })];\n                            case 2:\n                              modelAuthModes = _b.sent();\n                              operationAuthModes_1 = modelAuthModes[operation.toUpperCase()];\n                              authModeAttempts_1 = 0;\n                              authModeRetry_1 = function () {\n                                return __awaiter(_this, void 0, void 0, function () {\n                                  var response, error_2, e_1;\n                                  return __generator(this, function (_a) {\n                                    switch (_a.label) {\n                                      case 0:\n                                        _a.trys.push([0, 2,, 9]);\n                                        logger.debug(\"Attempting mutation with authMode: \" + operationAuthModes_1[authModeAttempts_1]);\n                                        return [4 /*yield*/, this.jitteredRetry(namespaceName, model, operation, data, condition, modelConstructor, this.MutationEvent, head, operationAuthModes_1[authModeAttempts_1], onTerminate)];\n                                      case 1:\n                                        response = _a.sent();\n                                        logger.debug(\"Mutation sent successfully with authMode: \" + operationAuthModes_1[authModeAttempts_1]);\n                                        return [2 /*return*/, response];\n                                      case 2:\n                                        error_2 = _a.sent();\n                                        authModeAttempts_1++;\n                                        if (!(authModeAttempts_1 >= operationAuthModes_1.length)) return [3 /*break*/, 7];\n                                        logger.debug(\"Mutation failed with authMode: \" + operationAuthModes_1[authModeAttempts_1 - 1]);\n                                        _a.label = 3;\n                                      case 3:\n                                        _a.trys.push([3, 5,, 6]);\n                                        return [4 /*yield*/, this.errorHandler({\n                                          recoverySuggestion: 'Ensure app code is up to date, auth directives exist and are correct on each model, and that server-side data has not been invalidated by a schema change. If the problem persists, search for or create an issue: https://github.com/aws-amplify/amplify-js/issues',\n                                          localModel: null,\n                                          message: error_2.message,\n                                          model: modelConstructor.name,\n                                          operation: opName,\n                                          errorType: getMutationErrorType(error_2),\n                                          process: ProcessName.sync,\n                                          remoteModel: null,\n                                          cause: error_2\n                                        })];\n                                      case 4:\n                                        _a.sent();\n                                        return [3 /*break*/, 6];\n                                      case 5:\n                                        e_1 = _a.sent();\n                                        logger.error('Mutation error handler failed with:', e_1);\n                                        return [3 /*break*/, 6];\n                                      case 6:\n                                        throw error_2;\n                                      case 7:\n                                        logger.debug(\"Mutation failed with authMode: \" + operationAuthModes_1[authModeAttempts_1 - 1] + \". Retrying with authMode: \" + operationAuthModes_1[authModeAttempts_1]);\n                                        return [4 /*yield*/, authModeRetry_1()];\n                                      case 8:\n                                        return [2 /*return*/, _a.sent()];\n                                      case 9:\n                                        return [2 /*return*/];\n                                    }\n                                  });\n                                });\n                              };\n                              return [4 /*yield*/, authModeRetry_1()];\n                            case 3:\n                              _a = __read.apply(void 0, [_b.sent(), 3]), result = _a[0], opName = _a[1], modelDefinition = _a[2];\n                              return [3 /*break*/, 5];\n                            case 4:\n                              error_1 = _b.sent();\n                              if (error_1.message === 'Offline' || error_1.message === 'RetryMutation') {\n                                return [2 /*return*/, \"continue\"];\n                              }\n                              return [3 /*break*/, 5];\n                            case 5:\n                              if (!(result === undefined)) return [3 /*break*/, 7];\n                              logger.debug('done retrying');\n                              return [4 /*yield*/, this_1.storage.runExclusive(function (storage) {\n                                return __awaiter(_this, void 0, void 0, function () {\n                                  return __generator(this, function (_a) {\n                                    switch (_a.label) {\n                                      case 0:\n                                        return [4 /*yield*/, this.outbox.dequeue(storage)];\n                                      case 1:\n                                        _a.sent();\n                                        return [2 /*return*/];\n                                    }\n                                  });\n                                });\n                              })];\n                            case 6:\n                              _b.sent();\n                              return [2 /*return*/, \"continue\"];\n                            case 7:\n                              record = result.data[opName];\n                              hasMore = false;\n                              return [4 /*yield*/, this_1.storage.runExclusive(function (storage) {\n                                return __awaiter(_this, void 0, void 0, function () {\n                                  return __generator(this, function (_a) {\n                                    switch (_a.label) {\n                                      case 0:\n                                        // using runExclusive to prevent possible race condition\n                                        // when another record gets enqueued between dequeue and peek\n                                        return [4 /*yield*/, this.outbox.dequeue(storage, record, operation)];\n                                      case 1:\n                                        // using runExclusive to prevent possible race condition\n                                        // when another record gets enqueued between dequeue and peek\n                                        _a.sent();\n                                        return [4 /*yield*/, this.outbox.peek(storage)];\n                                      case 2:\n                                        hasMore = _a.sent() !== undefined;\n                                        return [2 /*return*/];\n                                    }\n                                  });\n                                });\n                              })];\n                            case 8:\n                              _b.sent();\n                              (_c = (_b = this_1.observer) === null || _b === void 0 ? void 0 : _b.next) === null || _c === void 0 ? void 0 : _c.call(_b, {\n                                operation: operation,\n                                modelDefinition: modelDefinition,\n                                model: record,\n                                hasMore: hasMore\n                              });\n                              return [2 /*return*/];\n                          }\n                        });\n                      };\n                      this_1 = this;\n                      _d.label = 1;\n                    case 1:\n                      _a = this.processing && this.runningProcesses.isOpen;\n                      if (!_a) return [3 /*break*/, 3];\n                      return [4 /*yield*/, this.outbox.peek(this.storage)];\n                    case 2:\n                      _a = (head = _d.sent()) !== undefined;\n                      _d.label = 3;\n                    case 3:\n                      if (!_a) return [3 /*break*/, 5];\n                      return [5 /*yield**/, _loop_1()];\n                    case 4:\n                      _d.sent();\n                      return [3 /*break*/, 1];\n                    case 5:\n                      // pauses itself\n                      this.pause();\n                      return [2 /*return*/];\n                  }\n                });\n              });\n            }, 'mutation resume loop')];\n          case 1:\n            _a.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  MutationProcessor.prototype.jitteredRetry = function (namespaceName, model, operation, data, condition, modelConstructor, MutationEvent, mutationEvent, authMode, onTerminate) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, retry(function (model, operation, data, condition, modelConstructor, MutationEvent, mutationEvent) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var _a, query, variables, graphQLCondition, opName, modelDefinition, authToken, tryWith, attempt, opType, customUserAgentDetails, result, err_1, _b, error, _c, _d, code, retryWith, err_2, _e, _f, opName_1, query_1, authToken_1, serverData, namespace, updatedMutation;\n                var _g;\n                return __generator(this, function (_h) {\n                  switch (_h.label) {\n                    case 0:\n                      _a = __read(this.createQueryVariables(namespaceName, model, operation, data, condition), 5), query = _a[0], variables = _a[1], graphQLCondition = _a[2], opName = _a[3], modelDefinition = _a[4];\n                      return [4 /*yield*/, getTokenForCustomAuth(authMode, this.amplifyConfig)];\n                    case 1:\n                      authToken = _h.sent();\n                      tryWith = {\n                        query: query,\n                        variables: variables,\n                        authMode: authMode,\n                        authToken: authToken\n                      };\n                      attempt = 0;\n                      opType = this.opTypeFromTransformerOperation(operation);\n                      customUserAgentDetails = {\n                        category: Category.DataStore,\n                        action: DataStoreAction.GraphQl\n                      };\n                      _h.label = 2;\n                    case 2:\n                      _h.trys.push([2, 4,, 17]);\n                      return [4 /*yield*/, this.amplifyContext.InternalAPI.graphql(tryWith, undefined, customUserAgentDetails)];\n                    case 3:\n                      result = _h.sent();\n                      // Use `as any` because TypeScript doesn't seem to like passing tuples\n                      // through generic params.\n                      return [2 /*return*/, [result, opName, modelDefinition]];\n                    case 4:\n                      err_1 = _h.sent();\n                      if (!(err_1.errors && err_1.errors.length > 0)) return [3 /*break*/, 15];\n                      _b = __read(err_1.errors, 1), error = _b[0];\n                      _c = error.originalError, _d = (_c === void 0 ? {} : _c).code, code = _d === void 0 ? null : _d;\n                      if (error.errorType === 'Unauthorized') {\n                        throw new NonRetryableError('Unauthorized');\n                      }\n                      if (error.message === 'Network Error' || code === 'ECONNABORTED' // refers to axios timeout error caused by device's bad network condition\n                      ) {\n                        if (!this.processing) {\n                          throw new NonRetryableError('Offline');\n                        }\n                        // TODO: Check errors on different env (react-native or other browsers)\n                        throw new Error('Network Error');\n                      }\n                      if (!(error.errorType === 'ConflictUnhandled')) return [3 /*break*/, 13];\n                      // TODO: add on ConflictConditionalCheck error query last from server\n                      attempt++;\n                      retryWith = void 0;\n                      if (!(attempt > MAX_ATTEMPTS)) return [3 /*break*/, 5];\n                      retryWith = DISCARD;\n                      return [3 /*break*/, 8];\n                    case 5:\n                      _h.trys.push([5, 7,, 8]);\n                      return [4 /*yield*/, this.conflictHandler({\n                        modelConstructor: modelConstructor,\n                        localModel: this.modelInstanceCreator(modelConstructor, variables.input),\n                        remoteModel: this.modelInstanceCreator(modelConstructor, error.data),\n                        operation: opType,\n                        attempts: attempt\n                      })];\n                    case 6:\n                      retryWith = _h.sent();\n                      return [3 /*break*/, 8];\n                    case 7:\n                      err_2 = _h.sent();\n                      logger.warn('conflict trycatch', err_2);\n                      return [3 /*break*/, 17];\n                    case 8:\n                      if (!(retryWith === DISCARD)) return [3 /*break*/, 11];\n                      _e = __read(buildGraphQLOperation(this.schema.namespaces[namespaceName], modelDefinition, 'GET'), 1), _f = __read(_e[0], 3), opName_1 = _f[1], query_1 = _f[2];\n                      return [4 /*yield*/, getTokenForCustomAuth(authMode, this.amplifyConfig)];\n                    case 9:\n                      authToken_1 = _h.sent();\n                      return [4 /*yield*/, this.amplifyContext.InternalAPI.graphql({\n                        query: query_1,\n                        variables: {\n                          id: variables.input.id\n                        },\n                        authMode: authMode,\n                        authToken: authToken_1\n                      }, undefined, customUserAgentDetails)];\n                    case 10:\n                      serverData = _h.sent();\n                      // onTerminate cancel graphql()\n                      return [2 /*return*/, [serverData, opName_1, modelDefinition]];\n                    case 11:\n                      namespace = this.schema.namespaces[namespaceName];\n                      updatedMutation = createMutationInstanceFromModelOperation(namespace.relationships, modelDefinition, opType, modelConstructor, retryWith, graphQLCondition, MutationEvent, this.modelInstanceCreator, mutationEvent.id);\n                      return [4 /*yield*/, this.storage.save(updatedMutation)];\n                    case 12:\n                      _h.sent();\n                      throw new NonRetryableError('RetryMutation');\n                    case 13:\n                      try {\n                        this.errorHandler({\n                          recoverySuggestion: 'Ensure app code is up to date, auth directives exist and are correct on each model, and that server-side data has not been invalidated by a schema change. If the problem persists, search for or create an issue: https://github.com/aws-amplify/amplify-js/issues',\n                          localModel: variables.input,\n                          message: error.message,\n                          operation: operation,\n                          errorType: getMutationErrorType(error),\n                          errorInfo: error.errorInfo,\n                          process: ProcessName.mutate,\n                          cause: error,\n                          remoteModel: error.data ? this.modelInstanceCreator(modelConstructor, error.data) : null\n                        });\n                      } catch (err) {\n                        logger.warn('Mutation error handler failed with:', err);\n                      } finally {\n                        // Return empty tuple, dequeues the mutation\n                        return [2 /*return*/, error.data ? [{\n                          data: (_g = {}, _g[opName] = error.data, _g)\n                        }, opName, modelDefinition] : []];\n                      }\n                      _h.label = 14;\n                    case 14:\n                      return [3 /*break*/, 16];\n                    case 15:\n                      // Catch-all for client-side errors that don't come back in the `GraphQLError` format.\n                      // These errors should not be retried.\n                      throw new NonRetryableError(err_1);\n                    case 16:\n                      return [3 /*break*/, 17];\n                    case 17:\n                      if (tryWith) return [3 /*break*/, 2];\n                      _h.label = 18;\n                    case 18:\n                      return [2 /*return*/];\n                  }\n                });\n              });\n            }, [model, operation, data, condition, modelConstructor, MutationEvent, mutationEvent], safeJitteredBackoff, onTerminate)];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  MutationProcessor.prototype.createQueryVariables = function (namespaceName, model, operation, data, condition) {\n    var e_2, _a, e_3, _b, e_4, _c;\n    var _d, _e;\n    var modelDefinition = this.schema.namespaces[namespaceName].models[model];\n    var primaryKey = this.schema.namespaces[namespaceName].keys[model].primaryKey;\n    var auth = (_d = modelDefinition.attributes) === null || _d === void 0 ? void 0 : _d.find(function (a) {\n      return a.type === 'auth';\n    });\n    var ownerFields = ((_e = auth === null || auth === void 0 ? void 0 : auth.properties) === null || _e === void 0 ? void 0 : _e.rules.map(function (rule) {\n      return rule.ownerField;\n    }).filter(function (f) {\n      return f;\n    })) || ['owner'];\n    var queriesTuples = this.typeQuery.get(modelDefinition);\n    var _f = __read(queriesTuples.find(function (_a) {\n        var _b = __read(_a, 1),\n          transformerMutationType = _b[0];\n        return transformerMutationType === operation;\n      }), 3),\n      opName = _f[1],\n      query = _f[2];\n    var _g = JSON.parse(data),\n      _version = _g._version,\n      parsedData = __rest(_g, [\"_version\"]);\n    // include all the fields that comprise a custom PK if one is specified\n    var deleteInput = {};\n    if (primaryKey === null || primaryKey === void 0 ? void 0 : primaryKey.length) {\n      try {\n        for (var primaryKey_1 = __values(primaryKey), primaryKey_1_1 = primaryKey_1.next(); !primaryKey_1_1.done; primaryKey_1_1 = primaryKey_1.next()) {\n          var pkField = primaryKey_1_1.value;\n          deleteInput[pkField] = parsedData[pkField];\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (primaryKey_1_1 && !primaryKey_1_1.done && (_a = primaryKey_1.return)) _a.call(primaryKey_1);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n    } else {\n      deleteInput[ID] = parsedData.id;\n    }\n    var mutationInput;\n    if (operation === TransformerMutationType.DELETE) {\n      // For DELETE mutations, only the key(s) are included in the input\n      mutationInput = deleteInput;\n    } else {\n      // Otherwise, we construct the mutation input with the following logic\n      mutationInput = {};\n      var modelFields = Object.values(modelDefinition.fields);\n      try {\n        for (var modelFields_1 = __values(modelFields), modelFields_1_1 = modelFields_1.next(); !modelFields_1_1.done; modelFields_1_1 = modelFields_1.next()) {\n          var _h = modelFields_1_1.value,\n            name_1 = _h.name,\n            type = _h.type,\n            association = _h.association,\n            isReadOnly = _h.isReadOnly;\n          // omit readonly fields. cloud storage doesn't need them and won't take them!\n          if (isReadOnly) {\n            continue;\n          }\n          // omit owner fields if it's `null`. cloud storage doesn't allow it.\n          if (ownerFields.includes(name_1) && parsedData[name_1] === null) {\n            continue;\n          }\n          // model fields should be stripped out from the input\n          if (isModelFieldType(type)) {\n            // except for belongs to relations - we need to replace them with the correct foreign key(s)\n            if (isTargetNameAssociation(association) && association.connectionType === 'BELONGS_TO') {\n              var targetNames = extractTargetNamesFromSrc(association);\n              if (targetNames) {\n                try {\n                  // instead of including the connected model itself, we add its key(s) to the mutation input\n                  for (var targetNames_1 = (e_4 = void 0, __values(targetNames)), targetNames_1_1 = targetNames_1.next(); !targetNames_1_1.done; targetNames_1_1 = targetNames_1.next()) {\n                    var targetName = targetNames_1_1.value;\n                    mutationInput[targetName] = parsedData[targetName];\n                  }\n                } catch (e_4_1) {\n                  e_4 = {\n                    error: e_4_1\n                  };\n                } finally {\n                  try {\n                    if (targetNames_1_1 && !targetNames_1_1.done && (_c = targetNames_1.return)) _c.call(targetNames_1);\n                  } finally {\n                    if (e_4) throw e_4.error;\n                  }\n                }\n              }\n            }\n            continue;\n          }\n          // scalar fields / non-model types\n          if (operation === TransformerMutationType.UPDATE) {\n            if (!parsedData.hasOwnProperty(name_1)) {\n              // for update mutations - strip out a field if it's unchanged\n              continue;\n            }\n          }\n          // all other fields are added to the input object\n          mutationInput[name_1] = parsedData[name_1];\n        }\n      } catch (e_3_1) {\n        e_3 = {\n          error: e_3_1\n        };\n      } finally {\n        try {\n          if (modelFields_1_1 && !modelFields_1_1.done && (_b = modelFields_1.return)) _b.call(modelFields_1);\n        } finally {\n          if (e_3) throw e_3.error;\n        }\n      }\n    }\n    // Build mutation variables input object\n    var input = __assign(__assign({}, mutationInput), {\n      _version: _version\n    });\n    var graphQLCondition = JSON.parse(condition);\n    var variables = __assign({\n      input: input\n    }, operation === TransformerMutationType.CREATE ? {} : {\n      condition: Object.keys(graphQLCondition).length > 0 ? graphQLCondition : null\n    });\n    return [query, variables, graphQLCondition, opName, modelDefinition];\n  };\n  MutationProcessor.prototype.opTypeFromTransformerOperation = function (operation) {\n    switch (operation) {\n      case TransformerMutationType.CREATE:\n        return OpType.INSERT;\n      case TransformerMutationType.DELETE:\n        return OpType.DELETE;\n      case TransformerMutationType.UPDATE:\n        return OpType.UPDATE;\n      case TransformerMutationType.GET:\n        // Intentionally blank\n        break;\n      default:\n        throw new Error(\"Invalid operation \" + operation);\n    }\n    // because it makes TS happy ...\n    return undefined;\n  };\n  MutationProcessor.prototype.pause = function () {\n    this.processing = false;\n  };\n  return MutationProcessor;\n}();\nvar MAX_RETRY_DELAY_MS = 5 * 60 * 1000;\nvar originalJitteredBackoff = jitteredBackoff(MAX_RETRY_DELAY_MS);\n/**\n * @private\n * Internal use of Amplify only.\n *\n * Wraps the jittered backoff calculation to retry Network Errors indefinitely.\n * Backs off according to original jittered retry logic until the original retry\n * logic hits its max. After this occurs, if the error is a Network Error, we\n * ignore the attempt count and return MAX_RETRY_DELAY_MS to retry forever (until\n * the request succeeds).\n *\n * @param attempt ignored\n * @param _args ignored\n * @param error tested to see if `.message` is 'Network Error'\n * @returns number | false :\n */\nexport var safeJitteredBackoff = function (attempt, _args, error) {\n  var attemptResult = originalJitteredBackoff(attempt);\n  // If this is the last attempt and it is a network error, we retry indefinitively every 5 minutes\n  if (attemptResult === false && (error === null || error === void 0 ? void 0 : error.message) === 'Network Error') {\n    return MAX_RETRY_DELAY_MS;\n  }\n  return attemptResult;\n};\nexport { MutationProcessor };\n//# sourceMappingURL=mutation.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}