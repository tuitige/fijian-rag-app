{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar _tslib = require('./_virtual/_tslib.js');\nvar defaultWaitForOptions = {\n  timeout: 10000 // 10 seconds\n};\n/**\r\n * Subscribes to an actor ref and waits for its emitted value to satisfy\r\n * a predicate, and then resolves with that value.\r\n * Will throw if the desired state is not reached after a timeout\r\n * (defaults to 10 seconds).\r\n *\r\n * @example\r\n * ```js\r\n * const state = await waitFor(someService, state => {\r\n *   return state.hasTag('loaded');\r\n * });\r\n *\r\n * state.hasTag('loaded'); // true\r\n * ```\r\n *\r\n * @param actorRef The actor ref to subscribe to\r\n * @param predicate Determines if a value matches the condition to wait for\r\n * @param options\r\n * @returns A promise that eventually resolves to the emitted value\r\n * that matches the condition\r\n */\n\nfunction waitFor(actorRef, predicate, options) {\n  var resolvedOptions = _tslib.__assign(_tslib.__assign({}, defaultWaitForOptions), options);\n  return new Promise(function (res, rej) {\n    var done = false;\n    if (process.env.NODE_ENV !== 'production' && resolvedOptions.timeout < 0) {\n      console.error('`timeout` passed to `waitFor` is negative and it will reject its internal promise immediately.');\n    }\n    var handle = resolvedOptions.timeout === Infinity ? undefined : setTimeout(function () {\n      sub.unsubscribe();\n      rej(new Error(\"Timeout of \".concat(resolvedOptions.timeout, \" ms exceeded\")));\n    }, resolvedOptions.timeout);\n    var dispose = function () {\n      clearTimeout(handle);\n      done = true;\n      sub === null || sub === void 0 ? void 0 : sub.unsubscribe();\n    };\n    var sub = actorRef.subscribe({\n      next: function (emitted) {\n        if (predicate(emitted)) {\n          dispose();\n          res(emitted);\n        }\n      },\n      error: function (err) {\n        dispose();\n        rej(err);\n      },\n      complete: function () {\n        dispose();\n        rej(new Error(\"Actor terminated without satisfying predicate\"));\n      }\n    });\n    if (done) {\n      sub.unsubscribe();\n    }\n  });\n}\nexports.waitFor = waitFor;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}