{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (g && (g = 0, op[0] && (_ = 0)), _) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar DEFAULT_RETRY_ATTEMPTS = 3;\n/**\n * Retry middleware\n */\nexport var retryMiddleware = function (_a) {\n  var _b = _a.maxAttempts,\n    maxAttempts = _b === void 0 ? DEFAULT_RETRY_ATTEMPTS : _b,\n    retryDecider = _a.retryDecider,\n    computeDelay = _a.computeDelay,\n    abortSignal = _a.abortSignal;\n  if (maxAttempts < 1) {\n    throw new Error('maxAttempts must be greater than 0');\n  }\n  return function (next, context) {\n    return function retryMiddleware(request) {\n      var _a;\n      return __awaiter(this, void 0, void 0, function () {\n        var error, attemptsCount, response, handleTerminalErrorOrResponse, e_1, delay;\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              attemptsCount = (_a = context.attemptsCount) !== null && _a !== void 0 ? _a : 0;\n              handleTerminalErrorOrResponse = function () {\n                if (response) {\n                  addOrIncrementMetadataAttempts(response, attemptsCount);\n                  return response;\n                } else {\n                  addOrIncrementMetadataAttempts(error, attemptsCount);\n                  throw error;\n                }\n              };\n              _b.label = 1;\n            case 1:\n              if (!(!(abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) && attemptsCount < maxAttempts)) return [3 /*break*/, 11];\n              _b.label = 2;\n            case 2:\n              _b.trys.push([2, 4,, 5]);\n              return [4 /*yield*/, next(request)];\n            case 3:\n              response = _b.sent();\n              error = undefined;\n              return [3 /*break*/, 5];\n            case 4:\n              e_1 = _b.sent();\n              error = e_1;\n              response = undefined;\n              return [3 /*break*/, 5];\n            case 5:\n              // context.attemptsCount may be updated after calling next handler which may retry the request by itself.\n              attemptsCount = context.attemptsCount > attemptsCount ? context.attemptsCount : attemptsCount + 1;\n              context.attemptsCount = attemptsCount;\n              return [4 /*yield*/, retryDecider(response, error)];\n            case 6:\n              if (!_b.sent()) return [3 /*break*/, 9];\n              if (!(!(abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) && attemptsCount < maxAttempts)) return [3 /*break*/, 8];\n              delay = computeDelay(attemptsCount);\n              return [4 /*yield*/, cancellableSleep(delay, abortSignal)];\n            case 7:\n              _b.sent();\n              _b.label = 8;\n            case 8:\n              return [3 /*break*/, 1];\n            case 9:\n              return [2 /*return*/, handleTerminalErrorOrResponse()];\n            case 10:\n              return [3 /*break*/, 1];\n            case 11:\n              if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {\n                throw new Error('Request aborted.');\n              } else {\n                return [2 /*return*/, handleTerminalErrorOrResponse()];\n              }\n              return [2 /*return*/];\n          }\n        });\n      });\n    };\n  };\n};\nvar cancellableSleep = function (timeoutMs, abortSignal) {\n  if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {\n    return Promise.resolve();\n  }\n  var timeoutId;\n  var sleepPromiseResolveFn;\n  var sleepPromise = new Promise(function (resolve) {\n    sleepPromiseResolveFn = resolve;\n    timeoutId = setTimeout(resolve, timeoutMs);\n  });\n  abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.addEventListener('abort', function cancelSleep(event) {\n    clearTimeout(timeoutId);\n    abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.removeEventListener('abort', cancelSleep);\n    sleepPromiseResolveFn();\n  });\n  return sleepPromise;\n};\nvar addOrIncrementMetadataAttempts = function (nextHandlerOutput, attempts) {\n  var _a;\n  if (Object.prototype.toString.call(nextHandlerOutput) !== '[object Object]') {\n    return;\n  }\n  nextHandlerOutput['$metadata'] = __assign(__assign({}, (_a = nextHandlerOutput['$metadata']) !== null && _a !== void 0 ? _a : {}), {\n    attempts: attempts\n  });\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}