{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (g && (g = 0, op[0] && (_ = 0)), _) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { ConsoleLogger as Logger, Credentials, StorageHelper, Hub, parseAWSExports, StorageAction } from '@aws-amplify/core';\nimport { copyObject, getObject, getPresignedGetObjectUrl, headObject, deleteObject, listObjectsV2, SERVICE_NAME as S3_SERVICE_NAME } from '../AwsClients/S3';\nimport { SEND_DOWNLOAD_PROGRESS_EVENT, SEND_UPLOAD_PROGRESS_EVENT } from '../AwsClients/S3/utils';\nimport { StorageErrorStrings } from '../common/StorageErrorStrings';\nimport { dispatchStorageEvent } from '../common/StorageUtils';\nimport { getPrefix, loadS3Config } from '../common/S3ClientUtils';\nimport { AWSS3ProviderManagedUpload } from './AWSS3ProviderManagedUpload';\nimport { AWSS3UploadTask, TaskEvents } from './AWSS3UploadTask';\nimport { UPLOADS_STORAGE_KEY } from '../common/StorageConstants';\nimport * as events from 'events';\nvar logger = new Logger('AWSS3Provider');\nvar DEFAULT_STORAGE_LEVEL = 'public';\nvar DEFAULT_PRESIGN_EXPIRATION = 900;\n/**\n * Provide storage methods to use AWS S3\n */\nexport var AWSS3Provider = /** @class */function () {\n  /**\n   * Initialize Storage with AWS configurations\n   * @param {Object} config - Configuration object for storage\n   */\n  function AWSS3Provider(config) {\n    var _this = this;\n    this._config = config ? config : {};\n    this._storage = new StorageHelper().getStorage();\n    Hub.listen('auth', function (data) {\n      var payload = data.payload;\n      if (payload.event === 'signOut' || payload.event === 'signIn') {\n        _this._storage.removeItem(UPLOADS_STORAGE_KEY);\n      }\n    });\n    logger.debug('Storage Options', this._config);\n  }\n  /**\n   * get the category of the plugin\n   */\n  AWSS3Provider.prototype.getCategory = function () {\n    return AWSS3Provider.CATEGORY;\n  };\n  /**\n   * get provider name of the plugin\n   */\n  AWSS3Provider.prototype.getProviderName = function () {\n    return AWSS3Provider.PROVIDER_NAME;\n  };\n  /**\n   * Configure Storage part with aws configuration\n   * @param {Object} config - Configuration of the Storage\n   * @return {Object} - Current configuration\n   */\n  AWSS3Provider.prototype.configure = function (config) {\n    logger.debug('configure Storage', config);\n    if (!config) return this._config;\n    var amplifyConfig = parseAWSExports(config);\n    this._config = Object.assign({}, this._config, amplifyConfig.Storage);\n    if (!this._config.bucket) {\n      logger.debug('Do not have bucket yet');\n    }\n    return this._config;\n  };\n  AWSS3Provider.prototype.startResumableUpload = function (addTaskInput, config) {\n    var _a;\n    var s3Config = addTaskInput.s3Config,\n      emitter = addTaskInput.emitter,\n      key = addTaskInput.key,\n      file = addTaskInput.file,\n      params = addTaskInput.params;\n    var progressCallback = config.progressCallback,\n      completeCallback = config.completeCallback,\n      errorCallback = config.errorCallback,\n      track = (_a = config.track, _a === void 0 ? false : _a);\n    if (!(file instanceof Blob)) {\n      throw new Error(StorageErrorStrings.INVALID_BLOB);\n    }\n    emitter.on(TaskEvents.UPLOAD_PROGRESS, function (event) {\n      if (progressCallback) {\n        if (typeof progressCallback === 'function') {\n          progressCallback(event);\n        } else {\n          logger.warn('progressCallback should be a function, not a ' + typeof progressCallback);\n        }\n      }\n    });\n    emitter.on(TaskEvents.UPLOAD_COMPLETE, function (event) {\n      if (completeCallback) {\n        if (typeof completeCallback === 'function') {\n          completeCallback(event);\n        } else {\n          logger.warn('completeCallback should be a function, not a ' + typeof completeCallback);\n        }\n      }\n    });\n    emitter.on(TaskEvents.ERROR, function (err) {\n      if (errorCallback) {\n        if (typeof errorCallback === 'function') {\n          errorCallback(err);\n        } else {\n          logger.warn('errorCallback should be a function, not a ' + typeof errorCallback);\n        }\n      }\n    });\n    // we want to keep this function sync so we defer this promise to AWSS3UploadTask to resolve when it's needed\n    // when its doing a final check with _listSingleFile function\n    var prefixPromise = Credentials.get().then(function (credentials) {\n      var cred = Credentials.shear(credentials);\n      return getPrefix(__assign(__assign({}, config), {\n        level: addTaskInput.accessLevel,\n        credentials: cred\n      }));\n    });\n    var task = new AWSS3UploadTask({\n      s3Config: s3Config,\n      file: file,\n      emitter: emitter,\n      level: addTaskInput.accessLevel,\n      storage: this._storage,\n      params: params,\n      prefixPromise: prefixPromise\n    });\n    dispatchStorageEvent(track, 'upload', {\n      method: 'put',\n      result: 'success'\n    }, null, \"Upload Task created successfully for \".concat(key));\n    // automatically start the upload task\n    task.resume();\n    return task;\n  };\n  /**\n   * Copy an object from a source object to a new object within the same bucket. Can optionally copy files across\n   * different level or identityId (if source object's level is 'protected').\n   *\n   * @async\n   * @param {S3CopySource} src - Key and optionally access level and identityId of the source object.\n   * @param {S3CopyDestination} dest - Key and optionally access level of the destination object.\n   * @param {S3ProviderCopyConfig} [config] - Optional configuration for s3 commands.\n   * @return {Promise<S3ProviderCopyOutput>} The key of the copied object.\n   */\n  AWSS3Provider.prototype.copy = function (src, dest, config) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, opt, acl, bucket, cacheControl, expires, track, serverSideEncryption, SSECustomerAlgorithm, SSECustomerKey, SSECustomerKeyMD5, SSEKMSKeyId, srcLevel, srcIdentityId, srcKey, destLevel, destKey, srcPrefix, destPrefix, finalSrcKey, finalDestKey, params, error_1;\n      var _a, _b;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _c.sent();\n            if (!credentialsOK || !this._isWithCredentials(this._config)) {\n              throw new Error(StorageErrorStrings.NO_CREDENTIALS);\n            }\n            opt = Object.assign({}, this._config, config);\n            acl = opt.acl, bucket = opt.bucket, cacheControl = opt.cacheControl, expires = opt.expires, track = opt.track, serverSideEncryption = opt.serverSideEncryption, SSECustomerAlgorithm = opt.SSECustomerAlgorithm, SSECustomerKey = opt.SSECustomerKey, SSECustomerKeyMD5 = opt.SSECustomerKeyMD5, SSEKMSKeyId = opt.SSEKMSKeyId;\n            srcLevel = (_a = src.level, _a === void 0 ? DEFAULT_STORAGE_LEVEL : _a), srcIdentityId = src.identityId, srcKey = src.key;\n            destLevel = (_b = dest.level, _b === void 0 ? DEFAULT_STORAGE_LEVEL : _b), destKey = dest.key;\n            if (!srcKey || typeof srcKey !== 'string') {\n              throw new Error(StorageErrorStrings.NO_SRC_KEY);\n            }\n            if (!destKey || typeof destKey !== 'string') {\n              throw new Error(StorageErrorStrings.NO_DEST_KEY);\n            }\n            if (srcLevel !== 'protected' && srcIdentityId) {\n              logger.warn(\"You may copy files from another user if the source level is \\\"protected\\\", currently it's \".concat(srcLevel));\n            }\n            srcPrefix = this._prefix(__assign(__assign(__assign({}, opt), {\n              level: srcLevel\n            }), srcIdentityId && {\n              identityId: srcIdentityId\n            }));\n            destPrefix = this._prefix(__assign(__assign({}, opt), {\n              level: destLevel\n            }));\n            finalSrcKey = \"\".concat(bucket, \"/\").concat(srcPrefix).concat(srcKey);\n            finalDestKey = \"\".concat(destPrefix).concat(destKey);\n            logger.debug(\"copying \".concat(finalSrcKey, \" to \").concat(finalDestKey));\n            params = {\n              Bucket: bucket,\n              CopySource: finalSrcKey,\n              Key: finalDestKey,\n              // Copies over metadata like contentType as well\n              MetadataDirective: 'COPY'\n            };\n            if (cacheControl) params.CacheControl = cacheControl;\n            if (expires) params.Expires = expires;\n            if (serverSideEncryption) {\n              params.ServerSideEncryption = serverSideEncryption;\n            }\n            if (SSECustomerAlgorithm) {\n              params.SSECustomerAlgorithm = SSECustomerAlgorithm;\n            }\n            if (SSECustomerKey) {\n              params.SSECustomerKey = SSECustomerKey;\n            }\n            if (SSECustomerKeyMD5) {\n              params.SSECustomerKeyMD5 = SSECustomerKeyMD5;\n            }\n            if (SSEKMSKeyId) {\n              params.SSEKMSKeyId = SSEKMSKeyId;\n            }\n            if (acl) params.ACL = acl;\n            _c.label = 2;\n          case 2:\n            _c.trys.push([2, 4,, 5]);\n            return [4 /*yield*/, copyObject(loadS3Config(__assign(__assign({}, opt), {\n              storageAction: StorageAction.Copy\n            })), params)];\n          case 3:\n            _c.sent();\n            dispatchStorageEvent(track, 'copy', {\n              method: 'copy',\n              result: 'success'\n            }, null, \"Copy success from \".concat(srcKey, \" to \").concat(destKey));\n            return [2 /*return*/, {\n              key: destKey\n            }];\n          case 4:\n            error_1 = _c.sent();\n            dispatchStorageEvent(track, 'copy', {\n              method: 'copy',\n              result: 'failed'\n            }, null, \"Copy failed from \".concat(srcKey, \" to \").concat(destKey));\n            throw error_1;\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  AWSS3Provider.prototype.get = function (key, config) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, opt, bucket, download, cacheControl, contentDisposition, contentEncoding, contentLanguage, contentType, expires, track, SSECustomerAlgorithm, SSECustomerKey, SSECustomerKeyMD5, progressCallback, validateObjectExistence, prefix, final_key, emitter, s3Config, params, response, error_2, error_3, url, _b, _c, error_4;\n      var _d, _e;\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _f.sent();\n            if (!credentialsOK || !this._isWithCredentials(this._config)) {\n              throw new Error(StorageErrorStrings.NO_CREDENTIALS);\n            }\n            opt = Object.assign({}, this._config, config);\n            bucket = opt.bucket, download = opt.download, cacheControl = opt.cacheControl, contentDisposition = opt.contentDisposition, contentEncoding = opt.contentEncoding, contentLanguage = opt.contentLanguage, contentType = opt.contentType, expires = opt.expires, track = opt.track, SSECustomerAlgorithm = opt.SSECustomerAlgorithm, SSECustomerKey = opt.SSECustomerKey, SSECustomerKeyMD5 = opt.SSECustomerKeyMD5, progressCallback = opt.progressCallback, validateObjectExistence = (_d = opt.validateObjectExistence, _d === void 0 ? false : _d);\n            prefix = this._prefix(opt);\n            final_key = prefix + key;\n            emitter = new events.EventEmitter();\n            s3Config = loadS3Config(__assign(__assign({}, opt), {\n              emitter: emitter,\n              storageAction: StorageAction.Get\n            }));\n            logger.debug('get ' + key + ' from ' + final_key);\n            params = {\n              Bucket: bucket,\n              Key: final_key\n            };\n            // See: https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#getObject-property\n            if (cacheControl) params.ResponseCacheControl = cacheControl;\n            if (contentDisposition) params.ResponseContentDisposition = contentDisposition;\n            if (contentEncoding) params.ResponseContentEncoding = contentEncoding;\n            if (contentLanguage) params.ResponseContentLanguage = contentLanguage;\n            if (contentType) params.ResponseContentType = contentType;\n            if (SSECustomerAlgorithm) {\n              params.SSECustomerAlgorithm = SSECustomerAlgorithm;\n            }\n            if (SSECustomerKey) {\n              params.SSECustomerKey = SSECustomerKey;\n            }\n            if (SSECustomerKeyMD5) {\n              params.SSECustomerKeyMD5 = SSECustomerKeyMD5;\n            }\n            if (!(download === true)) return [3 /*break*/, 5];\n            _f.label = 2;\n          case 2:\n            _f.trys.push([2, 4,, 5]);\n            if (progressCallback) {\n              if (typeof progressCallback === 'function') {\n                emitter.on(SEND_DOWNLOAD_PROGRESS_EVENT, function (progress) {\n                  progressCallback(progress);\n                });\n              } else {\n                logger.warn('progressCallback should be a function, not a ' + typeof progressCallback);\n              }\n            }\n            return [4 /*yield*/, getObject(s3Config, params)];\n          case 3:\n            response = _f.sent();\n            emitter.removeAllListeners(SEND_DOWNLOAD_PROGRESS_EVENT);\n            dispatchStorageEvent(track, 'download', {\n              method: 'get',\n              result: 'success'\n            }, {\n              fileSize: Number(response.Body['size'] || response.Body['length'])\n            }, \"Download success for \".concat(key));\n            return [2 /*return*/, response];\n          case 4:\n            error_2 = _f.sent();\n            dispatchStorageEvent(track, 'download', {\n              method: 'get',\n              result: 'failed'\n            }, null, \"Download failed with \".concat(error_2.message));\n            throw error_2;\n          case 5:\n            if (!validateObjectExistence) return [3 /*break*/, 9];\n            _f.label = 6;\n          case 6:\n            _f.trys.push([6, 8,, 9]);\n            return [4 /*yield*/, headObject(s3Config, params)];\n          case 7:\n            _f.sent();\n            return [3 /*break*/, 9];\n          case 8:\n            error_3 = _f.sent();\n            if (((_a = error_3.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) === 404) {\n              dispatchStorageEvent(track, 'getSignedUrl', {\n                method: 'get',\n                result: 'failed'\n              }, null, \"\".concat(key, \" not found\"));\n            }\n            throw error_3;\n          case 9:\n            _f.trys.push([9, 12,, 13]);\n            _b = getPresignedGetObjectUrl;\n            _c = [__assign({}, s3Config)];\n            _e = {\n              expiration: expires || DEFAULT_PRESIGN_EXPIRATION\n            };\n            return [4 /*yield*/, s3Config.credentials()];\n          case 10:\n            return [4 /*yield*/, _b.apply(void 0, [__assign.apply(void 0, _c.concat([(_e.credentials = _f.sent(), _e.signingRegion = s3Config.region, _e.signingService = S3_SERVICE_NAME, _e)])), params])];\n          case 11:\n            url = _f.sent();\n            dispatchStorageEvent(track, 'getSignedUrl', {\n              method: 'get',\n              result: 'success'\n            }, null, \"Signed URL: \".concat(url));\n            return [2 /*return*/, url];\n          case 12:\n            error_4 = _f.sent();\n            logger.warn('get signed url error', error_4);\n            dispatchStorageEvent(track, 'getSignedUrl', {\n              method: 'get',\n              result: 'failed'\n            }, null, \"Could not get a signed URL for \".concat(key));\n            throw error_4;\n          case 13:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Get Properties of the object\n   *\n   * @param {string} key - key of the object\n   * @param {S3ProviderGetPropertiesConfig} [config] - Optional configuration for the underlying S3 command\n   * @return {Promise<S3ProviderGetPropertiesOutput>} - A promise resolves to contentType,\n   * contentLength, eTag, lastModified, metadata\n   */\n  AWSS3Provider.prototype.getProperties = function (key, config) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, opt, bucket, track, SSECustomerAlgorithm, SSECustomerKey, SSECustomerKeyMD5, prefix, final_key, s3Config, params, response, getPropertiesResponse, error_5;\n      var _b;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _c.sent();\n            if (!credentialsOK || !this._isWithCredentials(this._config)) {\n              throw new Error(StorageErrorStrings.NO_CREDENTIALS);\n            }\n            opt = Object.assign({}, this._config, config);\n            bucket = opt.bucket, track = (_b = opt.track, _b === void 0 ? false : _b), SSECustomerAlgorithm = opt.SSECustomerAlgorithm, SSECustomerKey = opt.SSECustomerKey, SSECustomerKeyMD5 = opt.SSECustomerKeyMD5;\n            prefix = this._prefix(opt);\n            final_key = prefix + key;\n            logger.debug(\"getProperties \".concat(key, \" from \").concat(final_key));\n            s3Config = loadS3Config(__assign(__assign({}, opt), {\n              storageAction: StorageAction.GetProperties\n            }));\n            params = {\n              Bucket: bucket,\n              Key: final_key\n            };\n            if (SSECustomerAlgorithm) {\n              params.SSECustomerAlgorithm = SSECustomerAlgorithm;\n            }\n            if (SSECustomerKey) {\n              params.SSECustomerKey = SSECustomerKey;\n            }\n            if (SSECustomerKeyMD5) {\n              params.SSECustomerKeyMD5 = SSECustomerKeyMD5;\n            }\n            _c.label = 2;\n          case 2:\n            _c.trys.push([2, 4,, 5]);\n            return [4 /*yield*/, headObject(s3Config, params)];\n          case 3:\n            response = _c.sent();\n            getPropertiesResponse = {\n              contentLength: response.ContentLength,\n              contentType: response.ContentType,\n              eTag: response.ETag,\n              lastModified: response.LastModified,\n              metadata: response.Metadata\n            };\n            dispatchStorageEvent(track, 'getProperties', {\n              method: 'getProperties',\n              result: 'success'\n            }, null, \"getProperties successful for \".concat(key));\n            return [2 /*return*/, getPropertiesResponse];\n          case 4:\n            error_5 = _c.sent();\n            if (((_a = error_5.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) === 404) {\n              dispatchStorageEvent(track, 'getProperties', {\n                method: 'getProperties',\n                result: 'failed'\n              }, null, \"\".concat(key, \" not found\"));\n            }\n            throw error_5;\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Put a file in S3 bucket specified to configure method\n   * @param key - key of the object\n   * @param object - File to be put in Amazon S3 bucket\n   * @param [config] - Optional configuration for the underlying S3 command\n   * @return an instance of AWSS3UploadTask or a promise that resolves to an object with the new object's key on\n   * success.\n   */\n  AWSS3Provider.prototype.put = function (key, object, config) {\n    var opt = Object.assign({}, this._config, config);\n    var bucket = opt.bucket,\n      track = opt.track,\n      progressCallback = opt.progressCallback,\n      level = opt.level,\n      resumable = opt.resumable;\n    var contentType = opt.contentType,\n      contentDisposition = opt.contentDisposition,\n      contentEncoding = opt.contentEncoding,\n      cacheControl = opt.cacheControl,\n      expires = opt.expires,\n      metadata = opt.metadata,\n      tagging = opt.tagging,\n      acl = opt.acl;\n    var serverSideEncryption = opt.serverSideEncryption,\n      SSECustomerAlgorithm = opt.SSECustomerAlgorithm,\n      SSECustomerKey = opt.SSECustomerKey,\n      SSECustomerKeyMD5 = opt.SSECustomerKeyMD5,\n      SSEKMSKeyId = opt.SSEKMSKeyId;\n    var type = contentType ? contentType : 'binary/octet-stream';\n    var params = {\n      Bucket: bucket,\n      Key: key,\n      Body: object,\n      ContentType: type\n    };\n    if (cacheControl) {\n      params.CacheControl = cacheControl;\n    }\n    if (contentDisposition) {\n      params.ContentDisposition = contentDisposition;\n    }\n    if (contentEncoding) {\n      params.ContentEncoding = contentEncoding;\n    }\n    if (expires) {\n      params.Expires = expires;\n    }\n    if (metadata) {\n      params.Metadata = metadata;\n    }\n    if (tagging) {\n      params.Tagging = tagging;\n    }\n    if (serverSideEncryption) {\n      params.ServerSideEncryption = serverSideEncryption;\n    }\n    if (SSECustomerAlgorithm) {\n      params.SSECustomerAlgorithm = SSECustomerAlgorithm;\n    }\n    if (SSECustomerKey) {\n      params.SSECustomerKey = SSECustomerKey;\n    }\n    if (SSECustomerKeyMD5) {\n      params.SSECustomerKeyMD5 = SSECustomerKeyMD5;\n    }\n    if (SSEKMSKeyId) {\n      params.SSEKMSKeyId = SSEKMSKeyId;\n    }\n    var emitter = new events.EventEmitter();\n    var uploader = new AWSS3ProviderManagedUpload(params, opt, emitter);\n    if (acl) {\n      params.ACL = acl;\n    }\n    if (resumable === true) {\n      var s3Config = loadS3Config(__assign(__assign({}, opt), {\n        storageAction: StorageAction.Put\n      }));\n      var addTaskInput = {\n        bucket: bucket,\n        key: key,\n        s3Config: s3Config,\n        file: object,\n        emitter: emitter,\n        accessLevel: level,\n        params: params\n      };\n      // explicitly asserting the type here as Typescript could not infer that resumable is of type true\n      return this.startResumableUpload(addTaskInput, config);\n    }\n    try {\n      if (progressCallback) {\n        if (typeof progressCallback === 'function') {\n          emitter.on(SEND_UPLOAD_PROGRESS_EVENT, function (progress) {\n            progressCallback(progress);\n          });\n        } else {\n          logger.warn('progressCallback should be a function, not a ' + typeof progressCallback);\n        }\n      }\n      return uploader.upload().then(function (response) {\n        logger.debug('upload result', response);\n        dispatchStorageEvent(track, 'upload', {\n          method: 'put',\n          result: 'success'\n        }, null, \"Upload success for \".concat(key));\n        return {\n          key: key\n        };\n      });\n    } catch (error) {\n      logger.warn('error uploading', error);\n      dispatchStorageEvent(track, 'upload', {\n        method: 'put',\n        result: 'failed'\n      }, null, \"Error uploading \".concat(key));\n      throw error;\n    }\n  };\n  /**\n   * Remove the object for specified key\n   * @param {string} key - key of the object\n   * @param {S3ProviderRemoveConfig} [config] - Optional configuration for the underlying S3 command\n   * @return {Promise<S3ProviderRemoveOutput>} - Promise resolves upon successful removal of the object\n   */\n  AWSS3Provider.prototype.remove = function (key, config) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, opt, bucket, track, prefix, final_key, params, s3Config, response, error_6;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _a.sent();\n            if (!credentialsOK || !this._isWithCredentials(this._config)) {\n              throw new Error(StorageErrorStrings.NO_CREDENTIALS);\n            }\n            opt = Object.assign({}, this._config, config);\n            bucket = opt.bucket, track = opt.track;\n            prefix = this._prefix(opt);\n            final_key = prefix + key;\n            logger.debug('remove ' + key + ' from ' + final_key);\n            params = {\n              Bucket: bucket,\n              Key: final_key\n            };\n            s3Config = loadS3Config(__assign(__assign({}, opt), {\n              storageAction: StorageAction.Remove\n            }));\n            _a.label = 2;\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n            return [4 /*yield*/, deleteObject(s3Config, params)];\n          case 3:\n            response = _a.sent();\n            dispatchStorageEvent(track, 'delete', {\n              method: 'remove',\n              result: 'success'\n            }, null, \"Deleted \".concat(key, \" successfully\"));\n            return [2 /*return*/, response];\n          case 4:\n            error_6 = _a.sent();\n            dispatchStorageEvent(track, 'delete', {\n              method: 'remove',\n              result: 'failed'\n            }, null, \"Deletion of \".concat(key, \" failed with \").concat(error_6));\n            throw error_6;\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  AWSS3Provider.prototype._list = function (params, opt, prefix) {\n    return __awaiter(this, void 0, void 0, function () {\n      var list, response;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            list = {\n              results: [],\n              hasNextToken: false\n            };\n            return [4 /*yield*/, listObjectsV2(loadS3Config(__assign(__assign({}, opt), {\n              storageAction: StorageAction.List\n            })), __assign({}, params))];\n          case 1:\n            response = _a.sent();\n            if (response && response.Contents) {\n              list.results = response.Contents.map(function (item) {\n                return {\n                  key: item.Key.substr(prefix.length),\n                  eTag: item.ETag,\n                  lastModified: item.LastModified,\n                  size: item.Size\n                };\n              });\n              list.nextToken = response.NextContinuationToken;\n              list.hasNextToken = response.IsTruncated;\n            }\n            return [2 /*return*/, list];\n        }\n      });\n    });\n  };\n  /**\n   * List bucket objects relative to the level and prefix specified\n   * @param {string} path - the path that contains objects\n   * @param {S3ProviderListConfig} [config] - Optional configuration for the underlying S3 command\n   * @return {Promise<S3ProviderListOutput>} - Promise resolves to list of keys, eTags, lastModified\n   * and file size for all objects in path\n   */\n  AWSS3Provider.prototype.list = function (path, config) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, opt, bucket, track, pageSize, nextToken, prefix, final_path, list, MAX_PAGE_SIZE, listResult, params, error_7;\n      var _a, _b;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _c.sent();\n            if (!credentialsOK || !this._isWithCredentials(this._config)) {\n              throw new Error(StorageErrorStrings.NO_CREDENTIALS);\n            }\n            opt = Object.assign({}, this._config, config);\n            bucket = opt.bucket, track = opt.track, pageSize = opt.pageSize, nextToken = opt.nextToken;\n            prefix = this._prefix(opt);\n            final_path = prefix + path;\n            logger.debug('list ' + path + ' from ' + final_path);\n            _c.label = 2;\n          case 2:\n            _c.trys.push([2, 10,, 11]);\n            list = {\n              results: [],\n              hasNextToken: false\n            };\n            MAX_PAGE_SIZE = 1000;\n            listResult = void 0;\n            params = {\n              Bucket: bucket,\n              Prefix: final_path,\n              MaxKeys: MAX_PAGE_SIZE,\n              ContinuationToken: nextToken\n            };\n            params.ContinuationToken = nextToken;\n            if (!(pageSize === 'ALL')) return [3 /*break*/, 7];\n            _c.label = 3;\n          case 3:\n            return [4 /*yield*/, this._list(params, opt, prefix)];\n          case 4:\n            listResult = _c.sent();\n            (_a = list.results).push.apply(_a, __spreadArray([], __read(listResult.results), false));\n            if (listResult.nextToken) params.ContinuationToken = listResult.nextToken;\n            _c.label = 5;\n          case 5:\n            if (listResult.nextToken) return [3 /*break*/, 3];\n            _c.label = 6;\n          case 6:\n            return [3 /*break*/, 9];\n          case 7:\n            if (pageSize && pageSize <= MAX_PAGE_SIZE && typeof pageSize === 'number') params.MaxKeys = pageSize;else logger.warn(\"pageSize should be from 0 - \".concat(MAX_PAGE_SIZE, \".\"));\n            return [4 /*yield*/, this._list(params, opt, prefix)];\n          case 8:\n            listResult = _c.sent();\n            (_b = list.results).push.apply(_b, __spreadArray([], __read(listResult.results), false));\n            list.hasNextToken = listResult.hasNextToken;\n            list.nextToken = null !== null && null !== void 0 ? null : listResult.nextToken;\n            _c.label = 9;\n          case 9:\n            dispatchStorageEvent(track, 'list', {\n              method: 'list',\n              result: 'success'\n            }, null, \"\".concat(list.results.length, \" items returned from list operation\"));\n            logger.debug('list', list);\n            return [2 /*return*/, list];\n          case 10:\n            error_7 = _c.sent();\n            logger.error('list InvalidArgument', error_7);\n            dispatchStorageEvent(track, 'list', {\n              method: 'list',\n              result: 'failed'\n            }, null, \"Listing items failed: \".concat(error_7.message));\n            throw error_7;\n          case 11:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  AWSS3Provider.prototype._ensureCredentials = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, cred, error_8;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, Credentials.get()];\n          case 1:\n            credentials = _a.sent();\n            if (!credentials) return [2 /*return*/, false];\n            cred = Credentials.shear(credentials);\n            logger.debug('set credentials for storage', cred);\n            this._config.credentials = cred;\n            return [2 /*return*/, true];\n          case 2:\n            error_8 = _a.sent();\n            logger.warn('ensure credentials error', error_8);\n            return [2 /*return*/, false];\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  AWSS3Provider.prototype._isWithCredentials = function (config) {\n    return typeof config === 'object' && config.hasOwnProperty('credentials');\n  };\n  AWSS3Provider.prototype._prefix = function (config) {\n    var credentials = config.credentials,\n      level = config.level;\n    var customPrefix = config.customPrefix || {};\n    var identityId = config.identityId || credentials.identityId;\n    var privatePath = (customPrefix.private !== undefined ? customPrefix.private : 'private/') + identityId + '/';\n    var protectedPath = (customPrefix.protected !== undefined ? customPrefix.protected : 'protected/') + identityId + '/';\n    var publicPath = customPrefix.public !== undefined ? customPrefix.public : 'public/';\n    switch (level) {\n      case 'private':\n        return privatePath;\n      case 'protected':\n        return protectedPath;\n      default:\n        return publicPath;\n    }\n  };\n  AWSS3Provider.CATEGORY = 'Storage';\n  AWSS3Provider.PROVIDER_NAME = 'AWSS3';\n  return AWSS3Provider;\n}();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}