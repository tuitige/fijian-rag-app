{"ast":null,"code":"import { __assign, __awaiter, __generator, __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { RestClient } from './RestClient';\nimport { Amplify, ConsoleLogger as Logger, Credentials } from '@aws-amplify/core';\nvar logger = new Logger('RestAPI');\n/**\n * Export Cloud Logic APIs\n */\nvar RestAPIClass = /** @class */function () {\n  /**\n   * Initialize Rest API with AWS configuration\n   * @param {Object} options - Configuration object for API\n   */\n  function RestAPIClass(options) {\n    this._api = null;\n    this.Credentials = Credentials;\n    this._options = options;\n    logger.debug('API Options', this._options);\n  }\n  RestAPIClass.prototype.getModuleName = function () {\n    return 'RestAPI';\n  };\n  /**\n   * Configure API part with aws configurations\n   * @param {Object} config - Configuration of the API\n   * @return {Object} - The current configuration\n   */\n  RestAPIClass.prototype.configure = function (options) {\n    var _a = options || {},\n      _b = _a.API,\n      API = _b === void 0 ? {} : _b,\n      otherOptions = __rest(_a, [\"API\"]);\n    var opt = __assign(__assign({}, otherOptions), API);\n    logger.debug('configure Rest API', {\n      opt: opt\n    });\n    if (opt['aws_project_region']) {\n      if (opt['aws_cloud_logic_custom']) {\n        var custom = opt['aws_cloud_logic_custom'];\n        opt.endpoints = typeof custom === 'string' ? JSON.parse(custom) : custom;\n      }\n      opt = Object.assign({}, opt, {\n        region: opt['aws_project_region'],\n        header: {}\n      });\n    }\n    if (Array.isArray(opt.endpoints)) {\n      // Check if endpoints has custom_headers and validate if is a function\n      opt.endpoints.forEach(function (endpoint) {\n        if (typeof endpoint.custom_header !== 'undefined' && typeof endpoint.custom_header !== 'function') {\n          logger.warn('Rest API ' + endpoint.name + ', custom_header should be a function');\n          endpoint.custom_header = undefined;\n        }\n      });\n    } else if (this._options && Array.isArray(this._options.endpoints)) {\n      opt.endpoints = this._options.endpoints;\n    } else {\n      opt.endpoints = [];\n    }\n    this._options = Object.assign({}, this._options, opt);\n    this.createInstance();\n    return this._options;\n  };\n  /**\n   * Create an instance of API for the library\n   * @return - A promise of true if Success\n   */\n  RestAPIClass.prototype.createInstance = function () {\n    logger.debug('create Rest API instance');\n    this._api = new RestClient(this._options);\n    // Share Amplify instance with client for SSR\n    this._api.Credentials = this.Credentials;\n    return true;\n  };\n  /**\n   * Make a GET request\n   * @param {string} apiName - The api name of the request\n   * @param {string} path - The path of the request\n   * @param {json} [init] - Request extra params\n   * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.\n   */\n  RestAPIClass.prototype.get = function (apiName, path, init) {\n    try {\n      var apiInfo = this.getEndpointInfo(apiName, path);\n      var cancellableToken = this._api.getCancellableToken();\n      var initParams = Object.assign({}, init);\n      initParams.cancellableToken = cancellableToken;\n      var responsePromise = this._api.get(apiInfo, initParams);\n      this._api.updateRequestToBeCancellable(responsePromise, cancellableToken);\n      return responsePromise;\n    } catch (err) {\n      return Promise.reject(err.message);\n    }\n  };\n  /**\n   * Make a POST request\n   * @param {string} apiName - The api name of the request\n   * @param {string} path - The path of the request\n   * @param {json} [init] - Request extra params\n   * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.\n   */\n  RestAPIClass.prototype.post = function (apiName, path, init) {\n    try {\n      var apiInfo = this.getEndpointInfo(apiName, path);\n      var cancellableToken = this._api.getCancellableToken();\n      var initParams = Object.assign({}, init);\n      initParams.cancellableToken = cancellableToken;\n      var responsePromise = this._api.post(apiInfo, initParams);\n      this._api.updateRequestToBeCancellable(responsePromise, cancellableToken);\n      return responsePromise;\n    } catch (err) {\n      return Promise.reject(err.message);\n    }\n  };\n  /**\n   * Make a PUT request\n   * @param {string} apiName - The api name of the request\n   * @param {string} path - The path of the request\n   * @param {json} [init] - Request extra params\n   * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.\n   */\n  RestAPIClass.prototype.put = function (apiName, path, init) {\n    try {\n      var apiInfo = this.getEndpointInfo(apiName, path);\n      var cancellableToken = this._api.getCancellableToken();\n      var initParams = Object.assign({}, init);\n      initParams.cancellableToken = cancellableToken;\n      var responsePromise = this._api.put(apiInfo, initParams);\n      this._api.updateRequestToBeCancellable(responsePromise, cancellableToken);\n      return responsePromise;\n    } catch (err) {\n      return Promise.reject(err.message);\n    }\n  };\n  /**\n   * Make a PATCH request\n   * @param {string} apiName - The api name of the request\n   * @param {string} path - The path of the request\n   * @param {json} [init] - Request extra params\n   * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.\n   */\n  RestAPIClass.prototype.patch = function (apiName, path, init) {\n    try {\n      var apiInfo = this.getEndpointInfo(apiName, path);\n      var cancellableToken = this._api.getCancellableToken();\n      var initParams = Object.assign({}, init);\n      initParams.cancellableToken = cancellableToken;\n      var responsePromise = this._api.patch(apiInfo, initParams);\n      this._api.updateRequestToBeCancellable(responsePromise, cancellableToken);\n      return responsePromise;\n    } catch (err) {\n      return Promise.reject(err.message);\n    }\n  };\n  /**\n   * Make a DEL request\n   * @param {string} apiName - The api name of the request\n   * @param {string} path - The path of the request\n   * @param {json} [init] - Request extra params\n   * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.\n   */\n  RestAPIClass.prototype.del = function (apiName, path, init) {\n    try {\n      var apiInfo = this.getEndpointInfo(apiName, path);\n      var cancellableToken = this._api.getCancellableToken();\n      var initParams = Object.assign({}, init);\n      initParams.cancellableToken = cancellableToken;\n      var responsePromise = this._api.del(apiInfo, initParams);\n      this._api.updateRequestToBeCancellable(responsePromise, cancellableToken);\n      return responsePromise;\n    } catch (err) {\n      return Promise.reject(err.message);\n    }\n  };\n  /**\n   * Make a HEAD request\n   * @param {string} apiName - The api name of the request\n   * @param {string} path - The path of the request\n   * @param {json} [init] - Request extra params\n   * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.\n   */\n  RestAPIClass.prototype.head = function (apiName, path, init) {\n    try {\n      var apiInfo = this.getEndpointInfo(apiName, path);\n      var cancellableToken = this._api.getCancellableToken();\n      var initParams = Object.assign({}, init);\n      initParams.cancellableToken = cancellableToken;\n      var responsePromise = this._api.head(apiInfo, initParams);\n      this._api.updateRequestToBeCancellable(responsePromise, cancellableToken);\n      return responsePromise;\n    } catch (err) {\n      return Promise.reject(err.message);\n    }\n  };\n  /**\n   * Checks to see if an error thrown is from an api request cancellation\n   * @param {any} error - Any error\n   * @return {boolean} - A boolean indicating if the error was from an api request cancellation\n   */\n  RestAPIClass.prototype.isCancel = function (error) {\n    return this._api.isCancel(error);\n  };\n  /**\n   * Cancels an inflight request\n   * @param {any} request - request to cancel\n   * @return {boolean} - A boolean indicating if the request was cancelled\n   */\n  RestAPIClass.prototype.cancel = function (request, message) {\n    return this._api.cancel(request, message);\n  };\n  /**\n   * Check if the request has a corresponding cancel token in the WeakMap.\n   * @params request - The request promise\n   * @return if the request has a corresponding cancel token.\n   */\n  RestAPIClass.prototype.hasCancelToken = function (request) {\n    return this._api.hasCancelToken(request);\n  };\n  /**\n   * Getting endpoint for API\n   * @param {string} apiName - The name of the api\n   * @return {string} - The endpoint of the api\n   */\n  RestAPIClass.prototype.endpoint = function (apiName) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this._api.endpoint(apiName)];\n      });\n    });\n  };\n  /**\n   * Getting endpoint info for API\n   * @param {string} apiName - The name of the api\n   * @param {string} path - The path of the api that is going to accessed\n   * @return {ApiInfo} - The endpoint information for that api-name\n   */\n  RestAPIClass.prototype.getEndpointInfo = function (apiName, path) {\n    var cloud_logic_array = this._options.endpoints;\n    if (!Array.isArray(cloud_logic_array)) {\n      throw new Error(\"API category not configured\");\n    }\n    var apiConfig = cloud_logic_array.find(function (api) {\n      return api.name === apiName;\n    });\n    if (!apiConfig) {\n      throw new Error(\"API \".concat(apiName, \" does not exist\"));\n    }\n    var response = {\n      endpoint: apiConfig.endpoint + path\n    };\n    if (typeof apiConfig.region === 'string') {\n      response.region = apiConfig.region;\n    } else if (typeof this._options.region === 'string') {\n      response.region = this._options.region;\n    }\n    if (typeof apiConfig.service === 'string') {\n      response.service = apiConfig.service || 'execute-api';\n    } else {\n      response.service = 'execute-api';\n    }\n    if (typeof apiConfig.custom_header === 'function') {\n      response.custom_header = apiConfig.custom_header;\n    } else {\n      response.custom_header = undefined;\n    }\n    return response;\n  };\n  return RestAPIClass;\n}();\nexport { RestAPIClass };\nexport var RestAPI = new RestAPIClass(null);\nAmplify.register(RestAPI);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}