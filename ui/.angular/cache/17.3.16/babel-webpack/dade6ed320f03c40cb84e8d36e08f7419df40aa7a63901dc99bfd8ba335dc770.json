{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __awaiter, __generator } from \"tslib\";\nimport { ConsoleLogger as Logger, Credentials, browserOrNode, AnalyticsAction } from '@aws-amplify/core';\nimport { PersonalizeEventsClient, PutEventsCommand } from '@aws-sdk/client-personalize-events';\nimport { SessionInfoManager, MediaAutoTrack } from './AmazonPersonalizeHelper';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\nimport isEqual from 'lodash/isEqual';\nimport { getAnalyticsUserAgent } from '../utils/UserAgent';\nvar logger = new Logger('AmazonPersonalizeProvider');\n// events buffer\nvar FLUSH_SIZE = 5;\nvar FLUSH_SIZE_THRESHHOLD = 10;\nvar FLUSH_INTERVAL = 5 * 1000; // 5s\nvar IDENTIFY_EVENT = 'Identify';\nvar AmazonPersonalizeProvider = /** @class */function () {\n  function AmazonPersonalizeProvider(config) {\n    this._buffer = [];\n    this._config = config ? config : {};\n    this._config.flushSize = this._config.flushSize > 0 && this._config.flushSize <= FLUSH_SIZE_THRESHHOLD ? this._config.flushSize : FLUSH_SIZE;\n    this._config.flushInterval = this._config.flushInterval || FLUSH_INTERVAL;\n    this._sessionManager = new SessionInfoManager();\n    if (!isEmpty(this._config.trackingId)) {\n      this._sessionInfo = this._sessionManager.retrieveSessionInfo(this._config.trackingId);\n    }\n    this._isBrowser = browserOrNode().isBrowser;\n    // flush event buffer\n    this._setupTimer();\n  }\n  AmazonPersonalizeProvider.prototype._setupTimer = function () {\n    if (this._timer) {\n      clearInterval(this._timer);\n    }\n    var flushInterval = this._config.flushInterval;\n    var that = this;\n    this._timer = setInterval(function () {\n      that._sendFromBuffer();\n    }, flushInterval);\n  };\n  /**\n   * Record event\n   * @param eventType      - type of the event action. e.g. \"Click\"\n   * @param properties     - properties of the event\n   * @return Promise\n   */\n  AmazonPersonalizeProvider.prototype.record = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, _a, eventType, properties, requestParams, isLoaded;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, this._getCredentials()];\n          case 1:\n            credentials = _b.sent();\n            if (!credentials) return [2 /*return*/, Promise.resolve(false)];\n            Object.assign(params, {\n              config: this._config,\n              credentials: credentials,\n              sentAt: new Date()\n            });\n            _a = params.event, eventType = _a.eventType, properties = _a.properties;\n            if (eventType === IDENTIFY_EVENT) {\n              this._sessionManager.updateSessionInfo(properties && properties.userId ? properties.userId : '', this._sessionInfo);\n              return [2 /*return*/];\n            } else if (!isEmpty(params.event.userId)) {\n              this._sessionManager.updateSessionInfo(params.event.userId, this._sessionInfo);\n            }\n            requestParams = this.generateRequestParams(params, this._sessionInfo);\n            if (!(eventType === 'MediaAutoTrack')) return [3 /*break*/, 7];\n            if (!this._isBrowser) return [3 /*break*/, 5];\n            if (!!isEmpty(get(requestParams, 'eventData.properties.domElementId', null))) return [3 /*break*/, 3];\n            return [4 /*yield*/, this.isElementFullyLoaded(this.loadElement, requestParams.eventData.properties['domElementId'], 500, 5)];\n          case 2:\n            isLoaded = _b.sent();\n            if (isLoaded) {\n              new MediaAutoTrack(requestParams, this);\n            } else {\n              logger.debug('Cannot find the media element.');\n            }\n            return [3 /*break*/, 4];\n          case 3:\n            logger.debug(\"Missing domElementId field in 'properties' for MediaAutoTrack event type.\");\n            _b.label = 4;\n          case 4:\n            return [3 /*break*/, 6];\n          case 5:\n            logger.debug('MediaAutoTrack only for browser');\n            _b.label = 6;\n          case 6:\n            return [2 /*return*/];\n          case 7:\n            return [2 /*return*/, this.putToBuffer(requestParams)];\n        }\n      });\n    });\n  };\n  AmazonPersonalizeProvider.prototype.loadElement = function (domId) {\n    return new Promise(function (resolve, reject) {\n      if (document.getElementById(domId) && document.getElementById(domId).clientHeight) {\n        return resolve(true);\n      } else {\n        return reject(true);\n      }\n    });\n  };\n  AmazonPersonalizeProvider.prototype.isElementFullyLoaded = function (operation, params, delay, times) {\n    var _this = this;\n    var wait = function (ms) {\n      return new Promise(function (r) {\n        return setTimeout(r, ms);\n      });\n    };\n    return new Promise(function (resolve, reject) {\n      return operation(params).then(resolve).catch(function (reason) {\n        if (times - 1 > 0) {\n          return wait(delay).then(_this.isElementFullyLoaded.bind(null, operation, params, delay, times - 1)).then(resolve).catch(reject);\n        }\n        return reject(reason);\n      });\n    });\n  };\n  /**\n   * get the category of the plugin\n   */\n  AmazonPersonalizeProvider.prototype.getCategory = function () {\n    return 'Analytics';\n  };\n  /**\n   * get provider name of the plugin\n   */\n  AmazonPersonalizeProvider.prototype.getProviderName = function () {\n    return 'AmazonPersonalize';\n  };\n  /**\n   * configure the plugin\n   * @param {Object} config - configuration\n   */\n  AmazonPersonalizeProvider.prototype.configure = function (config) {\n    logger.debug('configure Analytics', config);\n    var conf = config ? config : {};\n    this._config = Object.assign({}, this._config, conf);\n    if (!isEmpty(this._config.trackingId)) {\n      this._sessionInfo = this._sessionManager.retrieveSessionInfo(this._config.trackingId);\n    }\n    this._setupTimer();\n    return this._config;\n  };\n  /**\n   * Generate the requestParams from customer input params and sessionInfo\n   * @private\n   * @param eventData      - customer input for event data\n   * @param api            - api name\n   * @return RequestParams - wrapper object with all information required for make request\n   */\n  AmazonPersonalizeProvider.prototype.generateRequestParams = function (params, sessionInfo) {\n    var requestParams = {};\n    var _a = params.event,\n      eventType = _a.eventType,\n      properties = _a.properties;\n    requestParams.eventData = {\n      eventType: eventType,\n      properties: properties\n    };\n    requestParams.sessionInfo = sessionInfo;\n    requestParams.sentAt = params.sentAt;\n    requestParams.credentials = params.credentials;\n    requestParams.config = params.config;\n    return requestParams;\n  };\n  /**\n   * record an event\n   * @param {Object} params - the params of an event\n   */\n  AmazonPersonalizeProvider.prototype._sendEvents = function (group) {\n    var groupLen = group.length;\n    if (groupLen === 0) {\n      logger.debug('events array is empty, directly return');\n      return;\n    }\n    var _a = group[0],\n      config = _a.config,\n      credentials = _a.credentials,\n      sessionInfo = _a.sessionInfo;\n    var initClients = this._init(config, credentials);\n    if (!initClients) return false;\n    if (groupLen > 0) {\n      var events = [];\n      for (var i = 0; i < groupLen; i += 1) {\n        var params = group.shift();\n        var eventPayload = this._generateSingleRecordPayload(params, sessionInfo);\n        events.push(eventPayload);\n      }\n      var payload_1 = {};\n      payload_1.trackingId = sessionInfo.trackingId;\n      payload_1.sessionId = sessionInfo.sessionId;\n      payload_1.userId = sessionInfo.userId;\n      payload_1.eventList = [];\n      events.forEach(function (event) {\n        // @ts-ignore\n        payload_1.eventList.push(event);\n      });\n      var command = new PutEventsCommand(payload_1);\n      this._personalize.send(command, function (err) {\n        if (err) logger.debug('Failed to call putEvents in Personalize', err);else logger.debug('Put events');\n      });\n    }\n  };\n  /**\n   * Put event into buffer\n   * @private\n   * @param params - params for the event recording\n   */\n  AmazonPersonalizeProvider.prototype.putToBuffer = function (params) {\n    if (this._buffer.length < this._config.flushSize) {\n      this._buffer.push(params);\n    } else {\n      this._buffer.push(params);\n      this._sendFromBuffer();\n    }\n    return Promise.resolve(true);\n  };\n  /**\n   * flush the buffer and batch sending the request\n   * @private\n   * @param eventsParams - the buffer for cache the payload\n   */\n  AmazonPersonalizeProvider.prototype._sendFromBuffer = function () {\n    var _this = this;\n    var size = this._buffer.length;\n    if (size <= 0) return;\n    var eventsGroups = [];\n    var preCred = null;\n    var group = [];\n    for (var i = 0; i < size; i += 1) {\n      var currRequestParams = this._buffer.shift();\n      var cred = currRequestParams.credentials;\n      var sessionInfo = currRequestParams.sessionInfo;\n      if (i === 0) {\n        group.push(currRequestParams);\n        preCred = cred;\n      } else {\n        if (isEqual(sessionInfo, this._sessionInfo) && cred.sessionToken === preCred.sessionToken && cred.identityId === preCred.identityId) {\n          logger.debug('no change for cred, put event in the same group');\n          group.push(currRequestParams);\n        } else {\n          eventsGroups.push(group);\n          group = [];\n          group.push(currRequestParams);\n          preCred = cred;\n          this._sessionInfo = sessionInfo;\n        }\n      }\n    }\n    eventsGroups.push(group);\n    eventsGroups.map(function (group) {\n      _this._sendEvents(group);\n    });\n  };\n  /**\n   * Generate the record payload for single event\n   * @private\n   * @param params - RequestParams\n   */\n  AmazonPersonalizeProvider.prototype._generateSingleRecordPayload = function (params, sessionInfo) {\n    var eventData = params.eventData,\n      sentAt = params.sentAt;\n    var trackPayload = {};\n    trackPayload.sentAt = sentAt;\n    trackPayload.properties = eventData.properties && JSON.stringify(eventData.properties);\n    trackPayload.eventId = this._sessionManager.getTimerKey() + sessionInfo.sessionId;\n    trackPayload.eventType = eventData.eventType;\n    return trackPayload;\n  };\n  /**\n   * Initialize the personalize client\n   * @private\n   * @param params - RequestParams\n   */\n  AmazonPersonalizeProvider.prototype._init = function (config, credentials) {\n    logger.debug('init clients');\n    if (this._personalize && this._config.credentials && this._config.credentials.sessionToken === credentials.sessionToken && this._config.credentials.identityId === credentials.identityId) {\n      logger.debug('no change for analytics config, directly return from init');\n      return true;\n    }\n    this._config.credentials = credentials;\n    var region = config.region;\n    logger.debug('initialize personalize with credentials', credentials);\n    this._personalize = new PersonalizeEventsClient({\n      region: region,\n      credentials: credentials,\n      customUserAgent: getAnalyticsUserAgent(AnalyticsAction.Record)\n    });\n    return true;\n  };\n  /**\n   * check if current credentials exists\n   * @private\n   */\n  AmazonPersonalizeProvider.prototype._getCredentials = function () {\n    var that = this;\n    return Credentials.get().then(function (credentials) {\n      if (!credentials) return null;\n      logger.debug('set credentials for analytics', that._config.credentials);\n      return Credentials.shear(credentials);\n    }).catch(function (err) {\n      logger.debug('ensure credentials error', err);\n      return null;\n    });\n  };\n  return AmazonPersonalizeProvider;\n}();\nexport { AmazonPersonalizeProvider };\n//# sourceMappingURL=AmazonPersonalizeProvider.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}