{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __assign, __awaiter, __generator } from \"tslib\";\nimport { Category, ClientDevice, Credentials, getAmplifyUserAgent, InAppMessagingAction, PushNotificationAction, StorageHelper, transferKeyToUpperCase } from '@aws-amplify/core';\nimport { Cache } from '@aws-amplify/cache';\nimport { putEvents, updateEndpoint } from '@aws-amplify/core/internals/aws-clients/pinpoint';\nimport { v4 as uuid } from 'uuid';\nvar AWSPinpointProviderCommon = /** @class */function () {\n  function AWSPinpointProviderCommon(logger) {\n    var _this = this;\n    var _a;\n    this.config = {};\n    this.endpointInitialized = false;\n    this.initialized = false;\n    this.identifyUser = function (userId, userInfo) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var err_1;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              if (!!this.initialized) return [3 /*break*/, 2];\n              return [4 /*yield*/, this.init()];\n            case 1:\n              _a.sent();\n              _a.label = 2;\n            case 2:\n              _a.trys.push([2, 4,, 5]);\n              return [4 /*yield*/, this.updateEndpoint(userId, userInfo)];\n            case 3:\n              _a.sent();\n              return [3 /*break*/, 5];\n            case 4:\n              err_1 = _a.sent();\n              this.logger.error('Error identifying user', err_1);\n              throw err_1;\n            case 5:\n              return [2 /*return*/];\n          }\n        });\n      });\n    };\n    this.init = function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _a, endpointId, storage, providerName, _b, err_2;\n        return __generator(this, function (_c) {\n          switch (_c.label) {\n            case 0:\n              _a = this.config, endpointId = _a.endpointId, storage = _a.storage;\n              providerName = this.getProviderName();\n              _c.label = 1;\n            case 1:\n              _c.trys.push([1, 6,, 7]);\n              if (!(typeof storage.sync === 'function')) return [3 /*break*/, 3];\n              return [4 /*yield*/, storage.sync()];\n            case 2:\n              _c.sent();\n              _c.label = 3;\n            case 3:\n              if (!!endpointId) return [3 /*break*/, 5];\n              _b = this.config;\n              return [4 /*yield*/, this.getEndpointId()];\n            case 4:\n              _b.endpointId = _c.sent();\n              _c.label = 5;\n            case 5:\n              this.initialized = true;\n              return [3 /*break*/, 7];\n            case 6:\n              err_2 = _c.sent();\n              this.logger.error(\"Failed to initialize \" + providerName, err_2);\n              return [3 /*break*/, 7];\n            case 7:\n              return [2 /*return*/];\n          }\n        });\n      });\n    };\n    this.getUserAgentValue = function () {\n      var customUserAgentDetails;\n      if (_this.getSubCategory() === 'PushNotification') {\n        customUserAgentDetails = {\n          category: Category.PushNotification,\n          action: PushNotificationAction.None\n        };\n      } else {\n        customUserAgentDetails = {\n          category: Category.InAppMessaging,\n          action: InAppMessagingAction.None\n        };\n      }\n      return getAmplifyUserAgent(customUserAgentDetails);\n    };\n    this.recordAnalyticsEvent = function (event) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _a, _b, appId, credentials, endpointId, region, input, err_3;\n        var _c, _d;\n        return __generator(this, function (_e) {\n          switch (_e.label) {\n            case 0:\n              // Update credentials\n              _a = this.config;\n              return [4 /*yield*/, this.getCredentials()];\n            case 1:\n              // Update credentials\n              _a.credentials = _e.sent();\n              // Assert required configuration properties to make `putEvents` request are present\n              this.assertNotEmptyConfiguration();\n              _b = this.config, appId = _b.appId, credentials = _b.credentials, endpointId = _b.endpointId, region = _b.region;\n              _e.label = 2;\n            case 2:\n              _e.trys.push([2, 4,, 5]);\n              input = {\n                ApplicationId: appId,\n                EventsRequest: {\n                  BatchItem: (_c = {}, _c[endpointId] = {\n                    Endpoint: {},\n                    Events: (_d = {}, _d[uuid()] = event, _d)\n                  }, _c)\n                }\n              };\n              this.logger.debug('recording analytics event');\n              return [4 /*yield*/, putEvents({\n                credentials: credentials,\n                region: region,\n                userAgentValue: this.getUserAgentValue()\n              }, input)];\n            case 3:\n              _e.sent();\n              return [3 /*break*/, 5];\n            case 4:\n              err_3 = _e.sent();\n              this.logger.error('Error recording analytics event', err_3);\n              throw err_3;\n            case 5:\n              return [2 /*return*/];\n          }\n        });\n      });\n    };\n    this.updateEndpoint = function (userId, userInfo) {\n      if (userId === void 0) {\n        userId = null;\n      }\n      if (userInfo === void 0) {\n        userInfo = null;\n      }\n      return __awaiter(_this, void 0, void 0, function () {\n        var credentials, credentialsUpdated, _a, appId, endpointId, _b, endpointInfo, region, _c, address, attributes, demographic, location_1, metrics, optOut, _d, appVersion, make, model, platform, version, input, err_4;\n        var _this = this;\n        var _e;\n        return __generator(this, function (_f) {\n          switch (_f.label) {\n            case 0:\n              return [4 /*yield*/, this.getCredentials()];\n            case 1:\n              credentials = _f.sent();\n              credentialsUpdated = !this.config.credentials || Object.keys(credentials).some(function (key) {\n                return credentials[key] !== _this.config.credentials[key];\n              });\n              // If endpoint is already initialized, and nothing else is changing, just early return\n              if (this.endpointInitialized && !credentialsUpdated && !userId && !userInfo) {\n                return [2 /*return*/];\n              }\n              // Update credentials\n              this.config.credentials = credentials;\n              // Assert required configuration properties to make `updateEndpoint` request are present\n              this.assertNotEmptyConfiguration();\n              _a = this.config, appId = _a.appId, endpointId = _a.endpointId, _b = _a.endpointInfo, endpointInfo = _b === void 0 ? {} : _b, region = _a.region;\n              _f.label = 2;\n            case 2:\n              _f.trys.push([2, 4,, 5]);\n              _c = userInfo !== null && userInfo !== void 0 ? userInfo : {}, address = _c.address, attributes = _c.attributes, demographic = _c.demographic, location_1 = _c.location, metrics = _c.metrics, optOut = _c.optOut;\n              _d = this.clientInfo, appVersion = _d.appVersion, make = _d.make, model = _d.model, platform = _d.platform, version = _d.version;\n              input = {\n                ApplicationId: appId,\n                EndpointId: endpointId,\n                EndpointRequest: {\n                  RequestId: uuid(),\n                  EffectiveDate: new Date().toISOString(),\n                  ChannelType: endpointInfo.channelType,\n                  Address: address !== null && address !== void 0 ? address : endpointInfo.address,\n                  Attributes: __assign(__assign({}, endpointInfo.attributes), attributes),\n                  Demographic: __assign({\n                    AppVersion: appVersion,\n                    Make: make,\n                    Model: model,\n                    ModelVersion: version,\n                    Platform: platform\n                  }, transferKeyToUpperCase(__assign(__assign({}, endpointInfo.demographic), demographic))),\n                  Location: transferKeyToUpperCase(__assign(__assign({}, endpointInfo.location), location_1)),\n                  Metrics: __assign(__assign({}, endpointInfo.metrics), metrics),\n                  OptOut: optOut !== null && optOut !== void 0 ? optOut : endpointInfo.optOut,\n                  User: {\n                    UserId: (_e = userId !== null && userId !== void 0 ? userId : endpointInfo.userId) !== null && _e !== void 0 ? _e : credentials.identityId,\n                    UserAttributes: attributes !== null && attributes !== void 0 ? attributes : endpointInfo.userAttributes\n                  }\n                }\n              };\n              this.logger.debug('updating endpoint');\n              return [4 /*yield*/, updateEndpoint({\n                credentials: credentials,\n                region: region,\n                userAgentValue: this.getUserAgentValue()\n              }, input)];\n            case 3:\n              _f.sent();\n              this.endpointInitialized = true;\n              return [3 /*break*/, 5];\n            case 4:\n              err_4 = _f.sent();\n              throw err_4;\n            case 5:\n              return [2 /*return*/];\n          }\n        });\n      });\n    };\n    this.getEndpointId = function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var appId, cacheKey, cachedEndpointId, endpointId, ttl, expiration;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              appId = this.config.appId;\n              cacheKey = this.getSubCategory() === 'PushNotification' ? this.getProviderName() + \"_\" + appId : this.getSubCategory() + \":\" + this.getProviderName() + \":\" + appId;\n              return [4 /*yield*/, Cache.getItem(cacheKey)];\n            case 1:\n              cachedEndpointId = _a.sent();\n              // Found in cache, just return it\n              if (cachedEndpointId) {\n                return [2 /*return*/, cachedEndpointId];\n              }\n              endpointId = uuid();\n              ttl = 1000 * 60 * 60 * 24 * 365 * 100;\n              expiration = new Date().getTime() + ttl;\n              Cache.setItem(cacheKey, endpointId, {\n                expires: expiration,\n                priority: 1\n              });\n              return [2 /*return*/, endpointId];\n          }\n        });\n      });\n    };\n    this.getCredentials = function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var credentials, err_5;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              _a.trys.push([0, 2,, 3]);\n              return [4 /*yield*/, Credentials.get()];\n            case 1:\n              credentials = _a.sent();\n              if (!credentials) {\n                this.logger.debug('no credentials found');\n                return [2 /*return*/, null];\n              }\n              return [2 /*return*/, Credentials.shear(credentials)];\n            case 2:\n              err_5 = _a.sent();\n              this.logger.error('Error getting credentials:', err_5);\n              return [2 /*return*/, null];\n            case 3:\n              return [2 /*return*/];\n          }\n        });\n      });\n    };\n    this.assertNotEmptyConfiguration = function () {\n      var _a = _this.config,\n        appId = _a.appId,\n        credentials = _a.credentials,\n        region = _a.region;\n      if (!appId || !credentials || !region) {\n        throw new Error('One or more of credentials, appId or region is not configured');\n      }\n    };\n    this.config = {\n      storage: new StorageHelper().getStorage()\n    };\n    this.clientInfo = (_a = ClientDevice.clientInfo()) !== null && _a !== void 0 ? _a : {};\n    this.logger = logger;\n  }\n  /**\n   * get the category of the plugin\n   */\n  AWSPinpointProviderCommon.prototype.getCategory = function () {\n    return AWSPinpointProviderCommon.category;\n  };\n  /**\n   * get provider name of the plugin\n   */\n  AWSPinpointProviderCommon.prototype.getProviderName = function () {\n    return AWSPinpointProviderCommon.providerName;\n  };\n  AWSPinpointProviderCommon.prototype.configure = function (config) {\n    if (config === void 0) {\n      config = {};\n    }\n    this.config = __assign(__assign({}, this.config), config);\n    this.logger.debug(\"configure \" + this.getProviderName() + this.getSubCategory() + \"Provider\", this.config);\n    return this.config;\n  };\n  AWSPinpointProviderCommon.category = 'Notifications';\n  AWSPinpointProviderCommon.providerName = 'AWSPinpoint';\n  return AWSPinpointProviderCommon;\n}();\nexport default AWSPinpointProviderCommon;\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}