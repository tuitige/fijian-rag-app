{"ast":null,"code":"/*\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nvar _ = require('./es6_');\n\n/**\n * Performs an deep extend on the objects, from right to left.\n * @private\n * @param {Object[]} objects - An array of JS objects\n * @param {Function} collision - A function to be called when a merge collision happens.\n * @param {string[]} path - (for internal use) An array of strings which is the current path down the object when this is called recursively.\n * @returns {Object}\n */\nfunction deepExtend(objects, collision, path) {\n  if (objects == null) return {};\n  var src,\n    copyIsArray,\n    copy,\n    name,\n    options,\n    clone,\n    target = objects[0] || {},\n    i = 1,\n    length = objects.length;\n  path = path || [];\n\n  // Handle case when target is a string or something (possible in deep copy)\n  if (typeof target !== 'object') {\n    target = {};\n  }\n  for (; i < length; i++) {\n    // Only deal with non-null/undefined values\n    if ((options = objects[i]) != null) {\n      // Extend the base object\n      for (name in options) {\n        if (!options.hasOwnProperty(name)) continue;\n        if (name === '__proto__') continue;\n        src = target[name];\n        copy = options[name];\n\n        // Prevent never-ending loop\n        if (target === copy) {\n          continue;\n        }\n\n        // Recurse if we're merging plain objects or arrays\n        if (copy && (_.isPlainObject(copy) || (copyIsArray = _.isArray(copy)))) {\n          if (copyIsArray) {\n            copyIsArray = false;\n            clone = src && _.isArray(src) ? src : [];\n          } else {\n            clone = src && _.isPlainObject(src) ? src : {};\n          }\n          var nextPath = path.slice(0);\n          nextPath.push(name);\n\n          // Never move original objects, clone them\n          target[name] = deepExtend([clone, copy], collision, nextPath);\n\n          // Don't bring in undefined values\n        } else if (copy !== undefined) {\n          if (src != null && typeof collision == 'function') {\n            collision({\n              target: target,\n              copy: options,\n              path: path,\n              key: name\n            });\n          }\n          target[name] = copy;\n        }\n      }\n    }\n  }\n  return target;\n}\nmodule.exports = deepExtend;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}