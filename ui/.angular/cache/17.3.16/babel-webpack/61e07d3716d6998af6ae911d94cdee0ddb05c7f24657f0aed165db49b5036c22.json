{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { SynthesizeSpeechInput, SynthesizeSpeechOutput } from \"../models/models_0\";\nimport { deserializeAws_restJson1SynthesizeSpeechCommand, serializeAws_restJson1SynthesizeSpeechCommand } from \"../protocols/Aws_restJson1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Synthesizes UTF-8 input, plain text or SSML, to a stream of bytes. SSML input must be\n *       valid, well-formed SSML. Some alphabets might not be available with all the voices (for\n *       example, Cyrillic might not be read at all by English voices) unless phoneme mapping is used.\n *       For more information, see <a href=\"https://docs.aws.amazon.com/polly/latest/dg/how-text-to-speech-works.html\">How it\n *         Works</a>.</p>\n */\nvar SynthesizeSpeechCommand = /** @class */function (_super) {\n  __extends(SynthesizeSpeechCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function SynthesizeSpeechCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  SynthesizeSpeechCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"PollyClient\";\n    var commandName = \"SynthesizeSpeechCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: SynthesizeSpeechInput.filterSensitiveLog,\n      outputFilterSensitiveLog: SynthesizeSpeechOutput.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  SynthesizeSpeechCommand.prototype.serialize = function (input, context) {\n    return serializeAws_restJson1SynthesizeSpeechCommand(input, context);\n  };\n  SynthesizeSpeechCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_restJson1SynthesizeSpeechCommand(output, context);\n  };\n  return SynthesizeSpeechCommand;\n}($Command);\nexport { SynthesizeSpeechCommand };\n//# sourceMappingURL=SynthesizeSpeechCommand.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}