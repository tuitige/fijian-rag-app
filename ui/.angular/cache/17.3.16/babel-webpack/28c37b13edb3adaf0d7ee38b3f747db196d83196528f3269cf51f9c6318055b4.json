{"ast":null,"code":"/**\n * Copyright (c) 2017, Philip Walton <philip@philipwalton.com>\n */\nimport { browserOrNode } from '@aws-amplify/core';\nvar HTTP_PORT = '80';\nvar HTTPS_PORT = '443';\nvar DEFAULT_PORT = RegExp(':(' + HTTP_PORT + '|' + HTTPS_PORT + ')$');\nvar a = browserOrNode().isBrowser ? document.createElement('a') : null;\nvar cache = {};\n/**\n * Parses the given url and returns an object mimicing a `Location` object.\n * @param {string} url The url to parse.\n * @return {!Object} An object with the same properties as a `Location`.\n */\nexport function parseUrl(u) {\n  var url = u;\n  // All falsy values (as well as \".\") should map to the current URL.\n  url = !url || url === '.' ? location.href : url;\n  if (cache[url]) return cache[url];\n  a.href = url;\n  // When parsing file relative paths (e.g. `../index.html`), IE will correctly\n  // resolve the `href` property but will keep the `..` in the `path` property.\n  // It will also not include the `host` or `hostname` properties. Furthermore,\n  // IE will sometimes return no protocol or just a colon, especially for things\n  // like relative protocol URLs (e.g. \"//google.com\").\n  // To workaround all of these issues, we reparse with the full URL from the\n  // `href` property.\n  if (url.charAt(0) === '.' || url.charAt(0) === '/') return parseUrl(a.href);\n  // Don't include default ports.\n  var port = a.port === HTTP_PORT || a.port === HTTPS_PORT ? '' : a.port;\n  // PhantomJS sets the port to \"0\" when using the file: protocol.\n  port = port === '0' ? '' : port;\n  // Sometimes IE incorrectly includes a port for default ports\n  // (e.g. `:80` or `:443`) even when no port is specified in the URL.\n  // http://bit.ly/1rQNoMg\n  var host = a.host.replace(DEFAULT_PORT, '');\n  // Not all browser support `origin` so we have to build it.\n  var origin = a['origin'] ? a['origin'] : a.protocol + '//' + host;\n  // Sometimes IE doesn't include the leading slash for pathname.\n  // http://bit.ly/1rQNoMg\n  var pathname = a.pathname.charAt(0) === '/' ? a.pathname : '/' + a.pathname;\n  return cache[url] = {\n    hash: a.hash,\n    host: host,\n    hostname: a.hostname,\n    href: a.href,\n    origin: origin,\n    pathname: pathname,\n    port: port,\n    protocol: a.protocol,\n    search: a.search\n  };\n}\n//# sourceMappingURL=parse-url.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}