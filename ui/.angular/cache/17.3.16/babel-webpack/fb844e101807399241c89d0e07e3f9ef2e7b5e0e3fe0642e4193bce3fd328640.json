{"ast":null,"code":"var HTML5_MEDIA_EVENT = /*#__PURE__*/function (HTML5_MEDIA_EVENT) {\n  HTML5_MEDIA_EVENT[\"PLAY\"] = \"play\";\n  HTML5_MEDIA_EVENT[\"PAUSE\"] = \"pause\";\n  HTML5_MEDIA_EVENT[\"ENDED\"] = \"Ended\";\n  return HTML5_MEDIA_EVENT;\n}(HTML5_MEDIA_EVENT || {});\nvar MEDIA_TYPE = /*#__PURE__*/function (MEDIA_TYPE) {\n  MEDIA_TYPE[\"IFRAME\"] = \"IFRAME\";\n  MEDIA_TYPE[\"VIDEO\"] = \"VIDEO\";\n  MEDIA_TYPE[\"AUDIO\"] = \"AUDIO\";\n  return MEDIA_TYPE;\n}(MEDIA_TYPE || {});\nvar EVENT_TYPE = /*#__PURE__*/function (EVENT_TYPE) {\n  EVENT_TYPE[\"PLAY\"] = \"Play\";\n  EVENT_TYPE[\"ENDED\"] = \"Ended\";\n  EVENT_TYPE[\"PAUSE\"] = \"Pause\";\n  EVENT_TYPE[\"TIME_WATCHED\"] = \"TimeWatched\";\n  return EVENT_TYPE;\n}(EVENT_TYPE || {});\nvar MediaAutoTrack = /** @class */function () {\n  function MediaAutoTrack(params, provider) {\n    var _a;\n    this.eventActionMapping = (_a = {}, _a[EVENT_TYPE.ENDED] = this.endedEventAction.bind(this), _a[EVENT_TYPE.PLAY] = this.playEventAction.bind(this), _a[EVENT_TYPE.PAUSE] = this.pauseEventAction.bind(this), _a);\n    var eventData = params.eventData;\n    this._params = params;\n    this._mediaElement = document.getElementById(eventData.properties['domElementId']);\n    this._started = false;\n    this._provider = provider;\n    var mediaTrackFunMapping = {\n      IFRAME: this._iframeMediaTracker,\n      VIDEO: this._html5MediaTracker,\n      AUDIO: this._html5MediaTracker\n    };\n    mediaTrackFunMapping[this._mediaElement.tagName].bind(this)();\n    this._initYoutubeFrame();\n  }\n  MediaAutoTrack.prototype._initYoutubeFrame = function () {\n    this._youTubeIframeLoader = {\n      src: 'https://www.youtube.com/iframe_api',\n      loading: false,\n      loaded: false,\n      listeners: [],\n      load: function (callback) {\n        var _this = this;\n        this.listeners.push(callback);\n        if (this.loaded) {\n          setTimeout(function () {\n            _this.done();\n          });\n          return;\n        }\n        if (this.loading) {\n          return;\n        }\n        this.loading = true;\n        window['onYouTubeIframeAPIReady'] = function () {\n          _this.loaded = true;\n          _this.done();\n        };\n        var script = document.createElement('script');\n        script.type = 'text/javascript';\n        script.src = this.src;\n        document.body.appendChild(script);\n      },\n      done: function () {\n        delete window['onYouTubeIframeAPIReady'];\n        while (this.listeners.length) {\n          this.listeners.pop()(window['YT']);\n        }\n      }\n    };\n  };\n  MediaAutoTrack.prototype._iframeMediaTracker = function () {\n    var that = this;\n    setInterval(function () {\n      if (that._started) {\n        that.recordEvent(MEDIA_TYPE.IFRAME, EVENT_TYPE.TIME_WATCHED);\n      }\n    }, 3 * 1000);\n    this._youTubeIframeLoader.load(function (YT) {\n      that._iframePlayer = new YT.Player(that._mediaElement.id, {\n        events: {\n          onStateChange: that._onPlayerStateChange.bind(that)\n        }\n      });\n    });\n  };\n  MediaAutoTrack.prototype._onPlayerStateChange = function (event) {\n    var iframeEventMapping = {\n      0: EVENT_TYPE.ENDED,\n      1: EVENT_TYPE.PLAY,\n      2: EVENT_TYPE.PAUSE\n    };\n    var eventType = iframeEventMapping[event.data];\n    if (eventType) {\n      this.eventActionMapping[eventType](MEDIA_TYPE.IFRAME);\n    }\n  };\n  MediaAutoTrack.prototype._html5MediaTracker = function () {\n    var that = this;\n    setInterval(function () {\n      if (that._started) {\n        that.recordEvent(MEDIA_TYPE.VIDEO, EVENT_TYPE.TIME_WATCHED);\n      }\n    }, 3 * 1000);\n    this._mediaElement.addEventListener(HTML5_MEDIA_EVENT.PLAY, function () {\n      that.eventActionMapping[EVENT_TYPE.PLAY](MEDIA_TYPE.VIDEO);\n    }, false);\n    this._mediaElement.addEventListener(HTML5_MEDIA_EVENT.PAUSE, function () {\n      that.eventActionMapping[EVENT_TYPE.PAUSE](MEDIA_TYPE.VIDEO);\n    }, false);\n    this._mediaElement.addEventListener(HTML5_MEDIA_EVENT.ENDED, function () {\n      that.eventActionMapping[EVENT_TYPE.ENDED](MEDIA_TYPE.VIDEO);\n    }, false);\n  };\n  MediaAutoTrack.prototype.playEventAction = function (mediaType) {\n    this._started = true;\n    this.recordEvent(mediaType, EVENT_TYPE.PLAY);\n  };\n  MediaAutoTrack.prototype.pauseEventAction = function (mediaType) {\n    this._started = false;\n    this.recordEvent(mediaType, EVENT_TYPE.PAUSE);\n  };\n  MediaAutoTrack.prototype.endedEventAction = function (mediaType) {\n    this._started = false;\n    this.recordEvent(mediaType, EVENT_TYPE.ENDED);\n  };\n  MediaAutoTrack.prototype.recordEvent = function (mediaType, eventType) {\n    var newParams = Object.assign({}, this._params);\n    var eventData = newParams.eventData;\n    eventData.eventType = eventType;\n    var currentPlayTime;\n    if (mediaType === MEDIA_TYPE.VIDEO) {\n      currentPlayTime = this._mediaElement.currentTime;\n      eventData.properties.duration = this._mediaElement.duration;\n    } else {\n      currentPlayTime = this._financial(this._iframePlayer.getCurrentTime());\n      eventData.properties.duration = this._financial(this._iframePlayer.getDuration());\n    }\n    var percentage = parseFloat(currentPlayTime) / parseFloat(eventData.properties.duration);\n    eventData.properties.eventValue = Number(percentage.toFixed(4));\n    delete eventData.properties.domElementId;\n    this._provider.putToBuffer(newParams);\n  };\n  MediaAutoTrack.prototype._financial = function (x) {\n    return Number.parseFloat(x).toFixed(4);\n  };\n  return MediaAutoTrack;\n}();\nexport { MediaAutoTrack };\n//# sourceMappingURL=MediaAutoTrack.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}