{"ast":null,"code":"import { __assign, __asyncValues, __awaiter, __extends, __generator, __read, __rest, __spread, __values } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { InternalAPI } from '@aws-amplify/api/internals';\nimport { Auth } from '@aws-amplify/auth';\nimport { Cache } from '@aws-amplify/cache';\nimport { Amplify, ConsoleLogger as Logger, Hub, browserOrNode, BackgroundProcessManager } from '@aws-amplify/core';\nimport { immerable, produce, setAutoFreeze, enablePatches } from 'immer';\nimport { v4 as uuid4 } from 'uuid';\nimport Observable from 'zen-observable-ts';\nimport { defaultAuthStrategy, multiAuthStrategy } from '../authModeStrategies';\nimport { isPredicatesAll, ModelPredicateCreator, ModelSortPredicateCreator } from '../predicates';\nimport { ExclusiveStorage as Storage } from '../storage/storage';\nimport { ModelRelationship } from '../storage/relationship';\nimport { ControlMessage, SyncEngine } from '../sync';\nimport { GraphQLScalarType, isGraphQLScalarType, isSchemaModelWithAttributes, AuthModeStrategyType, isNonModelFieldType, isModelFieldType, isIdentifierObject } from '../types';\nimport { DATASTORE, errorMessages, establishRelationAndKeys, isModelConstructor, monotonicUlidFactory, STORAGE, SYNC, USER, isNullOrUndefined, registerNonModelClass, sortCompareFunction, DeferredCallbackResolver, inMemoryPagination, extractPrimaryKeyFieldNames, extractPrimaryKeysAndValues, isIdManaged, isIdOptionallyManaged, mergePatches, getTimestampFields } from '../util';\nimport { recursivePredicateFor, predicateFor, internals } from '../predicates/next';\nimport { getIdentifierValue } from '../sync/utils';\nsetAutoFreeze(true);\nenablePatches();\nvar logger = new Logger('DataStore');\nvar ulid = monotonicUlidFactory(Date.now());\nvar isNode = browserOrNode().isNode;\nvar SETTING_SCHEMA_VERSION = 'schemaVersion';\nvar schema;\nvar modelNamespaceMap = new WeakMap();\n/**\n * Stores data for crafting the correct update mutation input for a model.\n *\n * - `Patch[]` - array of changed fields and metadata.\n * - `PersistentModel` - the source model, used for diffing object-type fields.\n */\nvar modelPatchesMap = new WeakMap();\nvar getModelDefinition = function (modelConstructor) {\n  var namespace = modelNamespaceMap.get(modelConstructor);\n  var definition = namespace ? schema.namespaces[namespace].models[modelConstructor.name] : undefined;\n  return definition;\n};\n/**\n * Determines whether the given object is a Model Constructor that DataStore can\n * safely use to construct objects and discover related metadata.\n *\n * @param obj The object to test.\n */\nvar isValidModelConstructor = function (obj) {\n  return isModelConstructor(obj) && modelNamespaceMap.has(obj);\n};\nvar namespaceResolver = function (modelConstructor) {\n  var resolver = modelNamespaceMap.get(modelConstructor);\n  if (!resolver) {\n    throw new Error(\"Namespace Resolver for '\" + modelConstructor.name + \"' not found! This is probably a bug in '@amplify-js/datastore'.\");\n  }\n  return resolver;\n};\n/**\n * Creates a predicate without any conditions that can be passed to customer\n * code to have conditions added to it.\n *\n * For example, in this query:\n *\n * ```ts\n * await DataStore.query(\n * \tModel,\n * \titem => item.field.eq('value')\n * );\n * ```\n *\n * `buildSeedPredicate(Model)` is used to create `item`, which is passed to the\n * predicate function, which in turn uses that \"seed\" predicate (`item`) to build\n * a predicate tree.\n *\n * @param modelConstructor The model the predicate will query.\n */\nvar buildSeedPredicate = function (modelConstructor) {\n  if (!modelConstructor) throw new Error('Missing modelConstructor');\n  var modelSchema = getModelDefinition(modelConstructor);\n  if (!modelSchema) throw new Error('Missing modelSchema');\n  var pks = extractPrimaryKeyFieldNames(modelSchema);\n  if (!pks) throw new Error('Could not determine PK');\n  return recursivePredicateFor({\n    builder: modelConstructor,\n    schema: modelSchema,\n    pkField: pks\n  });\n};\n// exporting syncClasses for testing outbox.test.ts\nexport var syncClasses;\nvar userClasses;\nvar dataStoreClasses;\nvar storageClasses;\n/**\n * Maps a model to its related models for memoization/immutability.\n */\nvar modelInstanceAssociationsMap = new WeakMap();\n/**\n * Describes whether and to what a model is attached for lazy loading purposes.\n */\nvar ModelAttachment = /*#__PURE__*/function (ModelAttachment) {\n  /**\n   * Model doesn't lazy load from any data source.\n   *\n   * Related entity properties provided at instantiation are returned\n   * via the respective lazy interfaces when their properties are invoked.\n   */\n  ModelAttachment[\"Detached\"] = \"Detached\";\n  /**\n   * Model lazy loads from the global DataStore.\n   */\n  ModelAttachment[\"DataStore\"] = \"DataStore\";\n  /**\n   * Demonstrative. Not yet implemented.\n   */\n  ModelAttachment[\"API\"] = \"API\";\n  return ModelAttachment;\n}(ModelAttachment || {});\n/**\n * Tells us which data source a model is attached to (lazy loads from).\n *\n * If `Deatched`, the model's lazy properties will only ever return properties\n * from memory provided at construction time.\n */\nvar attachedModelInstances = new WeakMap();\n/**\n * Registers a model instance against a data source (DataStore, API, or\n * Detached/None).\n *\n * The API option is demonstrative. Lazy loading against API is not yet\n * implemented.\n *\n * @param result A model instance or array of instances\n * @param attachment A ModelAttachment data source\n * @returns passes the `result` back through after attachment\n */\nexport function attached(result, attachment) {\n  if (Array.isArray(result)) {\n    result.map(function (record) {\n      return attached(record, attachment);\n    });\n  } else {\n    result && attachedModelInstances.set(result, attachment);\n  }\n  return result;\n}\n/**\n * Determines what source a model instance should lazy load from.\n *\n * If the instace was never explicitly registered, it is detached by default.\n *\n * @param instance A model instance\n */\nexport var getAttachment = function (instance) {\n  return attachedModelInstances.has(instance) ? attachedModelInstances.get(instance) : ModelAttachment.Detached;\n};\nvar initSchema = function (userSchema) {\n  var _a;\n  if (schema !== undefined) {\n    console.warn('The schema has already been initialized');\n    return userClasses;\n  }\n  logger.log('validating schema', {\n    schema: userSchema\n  });\n  checkSchemaCodegenVersion(userSchema.codegenVersion);\n  var internalUserNamespace = __assign({\n    name: USER\n  }, userSchema);\n  logger.log('DataStore', 'Init models');\n  userClasses = createTypeClasses(internalUserNamespace);\n  logger.log('DataStore', 'Models initialized');\n  var dataStoreNamespace = getNamespace();\n  var storageNamespace = Storage.getNamespace();\n  var syncNamespace = SyncEngine.getNamespace();\n  dataStoreClasses = createTypeClasses(dataStoreNamespace);\n  storageClasses = createTypeClasses(storageNamespace);\n  syncClasses = createTypeClasses(syncNamespace);\n  schema = {\n    namespaces: (_a = {}, _a[dataStoreNamespace.name] = dataStoreNamespace, _a[internalUserNamespace.name] = internalUserNamespace, _a[storageNamespace.name] = storageNamespace, _a[syncNamespace.name] = syncNamespace, _a),\n    version: userSchema.version,\n    codegenVersion: userSchema.codegenVersion\n  };\n  Object.keys(schema.namespaces).forEach(function (namespace) {\n    var e_1, _a;\n    var _b = __read(establishRelationAndKeys(schema.namespaces[namespace]), 2),\n      relations = _b[0],\n      keys = _b[1];\n    schema.namespaces[namespace].relationships = relations;\n    schema.namespaces[namespace].keys = keys;\n    var modelAssociations = new Map();\n    Object.values(schema.namespaces[namespace].models).forEach(function (model) {\n      var e_2, _a, e_3, _b;\n      var connectedModels = [];\n      Object.values(model.fields).filter(function (field) {\n        return field.association && field.association.connectionType === 'BELONGS_TO' && field.type.model !== model.name;\n      }).forEach(function (field) {\n        return connectedModels.push(field.type.model);\n      });\n      modelAssociations.set(model.name, connectedModels);\n      // Precompute model info (such as pk fields) so that downstream schema consumers\n      // (such as predicate builders) don't have to reach back into \"DataStore\" space\n      // to go looking for it.\n      Object.values(model.fields).forEach(function (field) {\n        var relatedModel = userClasses[field.type.model];\n        if (isModelConstructor(relatedModel)) {\n          Object.defineProperty(field.type, 'modelConstructor', {\n            get: function () {\n              var relatedModelDefinition = getModelDefinition(relatedModel);\n              if (!relatedModelDefinition) throw new Error(\"Could not find model definition for \" + relatedModel.name);\n              return {\n                builder: relatedModel,\n                schema: relatedModelDefinition,\n                pkField: extractPrimaryKeyFieldNames(relatedModelDefinition)\n              };\n            }\n          });\n        }\n      });\n      // compatibility with legacy/pre-PK codegen for lazy loading to inject\n      // index fields into the model definition.\n      // definition.cloudFields = { ...definition.fields };\n      var indexes = schema.namespaces[namespace].relationships[model.name].indexes;\n      var indexFields = new Set();\n      try {\n        for (var indexes_1 = __values(indexes), indexes_1_1 = indexes_1.next(); !indexes_1_1.done; indexes_1_1 = indexes_1.next()) {\n          var index = indexes_1_1.value;\n          try {\n            for (var _c = (e_3 = void 0, __values(index[1])), _d = _c.next(); !_d.done; _d = _c.next()) {\n              var indexField = _d.value;\n              indexFields.add(indexField);\n            }\n          } catch (e_3_1) {\n            e_3 = {\n              error: e_3_1\n            };\n          } finally {\n            try {\n              if (_d && !_d.done && (_b = _c.return)) _b.call(_c);\n            } finally {\n              if (e_3) throw e_3.error;\n            }\n          }\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (indexes_1_1 && !indexes_1_1.done && (_a = indexes_1.return)) _a.call(indexes_1);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n      model.allFields = __assign(__assign({}, Object.fromEntries(__spread(indexFields.values()).map(function (name) {\n        return [name, {\n          name: name,\n          type: 'ID',\n          isArray: false\n        }];\n      }))), model.fields);\n    });\n    var result = new Map();\n    var count = 1000;\n    while (true && count > 0) {\n      if (modelAssociations.size === 0) {\n        break;\n      }\n      count--;\n      if (count === 0) {\n        throw new Error('Models are not topologically sortable. Please verify your schema.');\n      }\n      try {\n        for (var _c = (e_1 = void 0, __values(Array.from(modelAssociations.keys()))), _d = _c.next(); !_d.done; _d = _c.next()) {\n          var modelName = _d.value;\n          var parents = modelAssociations.get(modelName);\n          if (parents === null || parents === void 0 ? void 0 : parents.every(function (x) {\n            return result.has(x);\n          })) {\n            result.set(modelName, parents);\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n      Array.from(result.keys()).forEach(function (x) {\n        return modelAssociations.delete(x);\n      });\n    }\n    schema.namespaces[namespace].modelTopologicalOrdering = result;\n  });\n  return userClasses;\n};\n/**\n * Throws an exception if the schema has *not* been initialized\n * by `initSchema()`.\n *\n * **To be called before trying to access schema.**\n *\n * Currently this only needs to be called in `start()` and `clear()` because\n * all other functions will call start first.\n */\nvar checkSchemaInitialized = function () {\n  if (schema === undefined) {\n    var message = 'Schema is not initialized. DataStore will not function as expected. This could happen if you have multiple versions of DataStore installed. Please see https://docs.amplify.aws/lib/troubleshooting/upgrading/q/platform/js/#check-for-duplicate-versions';\n    logger.error(message);\n    throw new Error(message);\n  }\n};\n/**\n * Throws an exception if the schema is using a codegen version that is not supported.\n *\n * Set the supported version by setting majorVersion and minorVersion\n * This functions similar to ^ version range.\n * The tested codegenVersion major version must exactly match the set majorVersion\n * The tested codegenVersion minor version must be gt or equal to the set minorVersion\n * Example: For a min supported version of 5.4.0 set majorVersion = 5 and minorVersion = 4\n *\n * This regex will not work when setting a supported range with minor version\n * of 2 or more digits.\n * i.e. minorVersion = 10 will not work\n * The regex will work for testing a codegenVersion with multi digit minor\n * versions as long as the minimum minorVersion is single digit.\n * i.e. codegenVersion = 5.30.1, majorVersion = 5, minorVersion = 4 PASSES\n *\n * @param codegenVersion schema codegenVersion\n */\nvar checkSchemaCodegenVersion = function (codegenVersion) {\n  var majorVersion = 3;\n  var minorVersion = 2;\n  var isValid = false;\n  try {\n    var versionParts = codegenVersion.split('.');\n    var _a = __read(versionParts, 4),\n      major = _a[0],\n      minor = _a[1],\n      patch = _a[2],\n      patchrevision = _a[3];\n    isValid = Number(major) === majorVersion && Number(minor) >= minorVersion;\n  } catch (err) {\n    console.log(\"Error parsing codegen version: \" + codegenVersion + \"\\n\" + err);\n  }\n  if (!isValid) {\n    var message = \"Models were generated with an unsupported version of codegen. Codegen artifacts are from \" + (codegenVersion || 'an unknown version') + \", whereas ^\" + majorVersion + \".\" + minorVersion + \".0 is required. \" + \"Update to the latest CLI and run 'amplify codegen models'.\";\n    logger.error(message);\n    throw new Error(message);\n  }\n};\nvar createTypeClasses = function (namespace) {\n  var classes = {};\n  Object.entries(namespace.models).forEach(function (_a) {\n    var _b = __read(_a, 2),\n      modelName = _b[0],\n      modelDefinition = _b[1];\n    var clazz = createModelClass(modelDefinition);\n    classes[modelName] = clazz;\n    modelNamespaceMap.set(clazz, namespace.name);\n  });\n  Object.entries(namespace.nonModels || {}).forEach(function (_a) {\n    var _b = __read(_a, 2),\n      typeName = _b[0],\n      typeDefinition = _b[1];\n    var clazz = createNonModelClass(typeDefinition);\n    classes[typeName] = clazz;\n  });\n  return classes;\n};\n/**\n * Collection of instantiated models to allow storage of metadata apart from\n * the model visible to the consuming app -- in case the app doesn't have\n * metadata fields (_version, _deleted, etc.) exposed on the model itself.\n */\nvar instancesMetadata = new WeakSet();\nfunction modelInstanceCreator(modelConstructor, init) {\n  instancesMetadata.add(init);\n  return new modelConstructor(init);\n}\nvar validateModelFields = function (modelDefinition) {\n  return function (k, v) {\n    var fieldDefinition = modelDefinition.fields[k];\n    if (fieldDefinition !== undefined) {\n      var type_1 = fieldDefinition.type,\n        isRequired_1 = fieldDefinition.isRequired,\n        isArrayNullable = fieldDefinition.isArrayNullable,\n        name_1 = fieldDefinition.name,\n        isArray = fieldDefinition.isArray;\n      var timestamps = isSchemaModelWithAttributes(modelDefinition) ? getTimestampFields(modelDefinition) : {};\n      var isTimestampField = !!timestamps[name_1];\n      if ((!isArray && isRequired_1 || isArray && !isArrayNullable) && !isTimestampField && (v === null || v === undefined)) {\n        throw new Error(\"Field \" + name_1 + \" is required\");\n      }\n      if (isSchemaModelWithAttributes(modelDefinition) && !isIdManaged(modelDefinition)) {\n        var keys = extractPrimaryKeyFieldNames(modelDefinition);\n        if (keys.includes(k) && v === '') {\n          logger.error(errorMessages.idEmptyString, {\n            k: k,\n            value: v\n          });\n          throw new Error(errorMessages.idEmptyString);\n        }\n      }\n      if (isGraphQLScalarType(type_1)) {\n        var jsType_1 = GraphQLScalarType.getJSType(type_1);\n        var validateScalar_1 = GraphQLScalarType.getValidationFunction(type_1);\n        if (type_1 === 'AWSJSON') {\n          if (typeof v === jsType_1) {\n            return;\n          }\n          if (typeof v === 'string') {\n            try {\n              JSON.parse(v);\n              return;\n            } catch (error) {\n              throw new Error(\"Field \" + name_1 + \" is an invalid JSON object. \" + v);\n            }\n          }\n        }\n        if (isArray) {\n          var errorTypeText = jsType_1;\n          if (!isRequired_1) {\n            errorTypeText = jsType_1 + \" | null | undefined\";\n          }\n          if (!Array.isArray(v) && !isArrayNullable) {\n            throw new Error(\"Field \" + name_1 + \" should be of type [\" + errorTypeText + \"], \" + typeof v + \" received. \" + v);\n          }\n          if (!isNullOrUndefined(v) && v.some(function (e) {\n            return isNullOrUndefined(e) ? isRequired_1 : typeof e !== jsType_1;\n          })) {\n            var elemTypes = v.map(function (e) {\n              return e === null ? 'null' : typeof e;\n            }).join(',');\n            throw new Error(\"All elements in the \" + name_1 + \" array should be of type \" + errorTypeText + \", [\" + elemTypes + \"] received. \" + v);\n          }\n          if (validateScalar_1 && !isNullOrUndefined(v)) {\n            var validationStatus = v.map(function (e) {\n              if (!isNullOrUndefined(e)) {\n                return validateScalar_1(e);\n              } else if (isNullOrUndefined(e) && !isRequired_1) {\n                return true;\n              } else {\n                return false;\n              }\n            });\n            if (!validationStatus.every(function (s) {\n              return s;\n            })) {\n              throw new Error(\"All elements in the \" + name_1 + \" array should be of type \" + type_1 + \", validation failed for one or more elements. \" + v);\n            }\n          }\n        } else if (!isRequired_1 && v === undefined) {\n          return;\n        } else if (typeof v !== jsType_1 && v !== null) {\n          throw new Error(\"Field \" + name_1 + \" should be of type \" + jsType_1 + \", \" + typeof v + \" received. \" + v);\n        } else if (!isNullOrUndefined(v) && validateScalar_1 && !validateScalar_1(v) // TODO: why never, TS ... why ...\n        ) {\n          throw new Error(\"Field \" + name_1 + \" should be of type \" + type_1 + \", validation failed. \" + v);\n        }\n      } else if (isNonModelFieldType(type_1)) {\n        // do not check non model fields if undefined or null\n        if (!isNullOrUndefined(v)) {\n          var subNonModelDefinition_1 = schema.namespaces.user.nonModels[type_1.nonModel];\n          var modelValidator_1 = validateModelFields(subNonModelDefinition_1);\n          if (isArray) {\n            var errorTypeText = type_1.nonModel;\n            if (!isRequired_1) {\n              errorTypeText = type_1.nonModel + \" | null | undefined\";\n            }\n            if (!Array.isArray(v)) {\n              throw new Error(\"Field \" + name_1 + \" should be of type [\" + errorTypeText + \"], \" + typeof v + \" received. \" + v);\n            }\n            v.forEach(function (item) {\n              if (isNullOrUndefined(item) && isRequired_1 || typeof item !== 'object' && typeof item !== 'undefined') {\n                throw new Error(\"All elements in the \" + name_1 + \" array should be of type \" + type_1.nonModel + \", [\" + typeof item + \"] received. \" + item);\n              }\n              if (!isNullOrUndefined(item)) {\n                Object.keys(subNonModelDefinition_1.fields).forEach(function (subKey) {\n                  modelValidator_1(subKey, item[subKey]);\n                });\n              }\n            });\n          } else {\n            if (typeof v !== 'object') {\n              throw new Error(\"Field \" + name_1 + \" should be of type \" + type_1.nonModel + \", \" + typeof v + \" recieved. \" + v);\n            }\n            Object.keys(subNonModelDefinition_1.fields).forEach(function (subKey) {\n              modelValidator_1(subKey, v[subKey]);\n            });\n          }\n        }\n      }\n    }\n  };\n};\nvar castInstanceType = function (modelDefinition, k, v) {\n  var _a = modelDefinition.fields[k] || {},\n    isArray = _a.isArray,\n    type = _a.type;\n  // attempt to parse stringified JSON\n  if (typeof v === 'string' && (isArray || type === 'AWSJSON' || isNonModelFieldType(type) || isModelFieldType(type))) {\n    try {\n      return JSON.parse(v);\n    } catch (_b) {\n      // if JSON is invalid, don't throw and let modelValidator handle it\n    }\n  }\n  // cast from numeric representation of boolean to JS boolean\n  if (typeof v === 'number' && type === 'Boolean') {\n    return Boolean(v);\n  }\n  return v;\n};\n/**\n * Records the patches (as if against an empty object) used to initialize\n * an instance of a Model. This can be used for determining which fields to\n * send to the cloud durnig a CREATE mutation.\n */\nvar initPatches = new WeakMap();\n/**\n * Attempts to apply type-aware, casted field values from a given `init`\n * object to the given `draft`.\n *\n * @param init The initialization object to extract field values from.\n * @param modelDefinition The definition describing the target object shape.\n * @param draft The draft to apply field values to.\n */\nvar initializeInstance = function (init, modelDefinition, draft) {\n  var modelValidator = validateModelFields(modelDefinition);\n  Object.entries(init).forEach(function (_a) {\n    var _b = __read(_a, 2),\n      k = _b[0],\n      v = _b[1];\n    var parsedValue = castInstanceType(modelDefinition, k, v);\n    modelValidator(k, parsedValue);\n    draft[k] = parsedValue;\n  });\n};\n/**\n * Updates a draft to standardize its customer-defined fields so that they are\n * consistent with the data as it would look after having been synchronized from\n * Cloud storage.\n *\n * The exceptions to this are:\n *\n * 1. Non-schema/Internal [sync] metadata fields.\n * 2. Cloud-managed fields, which are `null` until set by cloud storage.\n *\n * This function should be expanded if/when deviations between canonical Cloud\n * storage data and locally managed data are found. For now, the known areas\n * that require normalization are:\n *\n * 1. Ensuring all non-metadata fields are *defined*. (I.e., turn `undefined` -> `null`.)\n *\n * @param modelDefinition Definition for the draft. Used to discover all fields.\n * @param draft The instance draft to apply normalizations to.\n */\nvar normalize = function (modelDefinition, draft) {\n  var e_4, _a;\n  try {\n    for (var _b = __values(Object.keys(modelDefinition.fields)), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var k = _c.value;\n      if (draft[k] === undefined) draft[k] = null;\n    }\n  } catch (e_4_1) {\n    e_4 = {\n      error: e_4_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_4) throw e_4.error;\n    }\n  }\n};\nvar createModelClass = function (modelDefinition) {\n  var e_5, _a;\n  var clazz = /** @class */function () {\n    function Model(init) {\n      // we create a base instance first so we can distinguish which fields were explicitly\n      // set by customer code versus those set by normalization. only those fields\n      // which are explicitly set by customers should be part of create mutations.\n      var patches = [];\n      var baseInstance = produce(this, function (draft) {\n        initializeInstance(init, modelDefinition, draft);\n        // model is initialized inside a DataStore component (e.g. by Sync Engine, Storage Engine, etc.)\n        var isInternallyInitialized = instancesMetadata.has(init);\n        var modelInstanceMetadata = isInternallyInitialized ? init : {};\n        var _id = modelInstanceMetadata.id;\n        if (isIdManaged(modelDefinition)) {\n          var isInternalModel = _id !== null && _id !== undefined;\n          var id = isInternalModel ? _id : modelDefinition.syncable ? uuid4() : ulid();\n          draft.id = id;\n        } else if (isIdOptionallyManaged(modelDefinition)) {\n          // only auto-populate if the id was not provided\n          draft.id = draft.id || uuid4();\n        }\n        if (!isInternallyInitialized) {\n          checkReadOnlyPropertyOnCreate(draft, modelDefinition);\n        }\n        var _version = modelInstanceMetadata._version,\n          _lastChangedAt = modelInstanceMetadata._lastChangedAt,\n          _deleted = modelInstanceMetadata._deleted;\n        if (modelDefinition.syncable) {\n          draft._version = _version;\n          draft._lastChangedAt = _lastChangedAt;\n          draft._deleted = _deleted;\n        }\n      }, function (p) {\n        return patches = p;\n      });\n      // now that we have a list of patches that encapsulate the explicit, customer-provided\n      // fields, we can normalize. patches from normalization are ignored, because the changes\n      // are only create to provide a consistent view of the data for fields pre/post sync\n      // where possible. (not all fields can be normalized pre-sync, because they're generally\n      // \"cloud managed\" fields, like createdAt and updatedAt.)\n      var normalized = produce(baseInstance, function (draft) {\n        return normalize(modelDefinition, draft);\n      });\n      initPatches.set(normalized, patches);\n      return normalized;\n    }\n    Model.copyOf = function (source, fn) {\n      var modelConstructor = Object.getPrototypeOf(source || {}).constructor;\n      if (!isValidModelConstructor(modelConstructor)) {\n        var msg = 'The source object is not a valid model';\n        logger.error(msg, {\n          source: source\n        });\n        throw new Error(msg);\n      }\n      var patches = [];\n      var model = produce(source, function (draft) {\n        fn(draft);\n        var keyNames = extractPrimaryKeyFieldNames(modelDefinition);\n        // Keys are immutable\n        keyNames.forEach(function (key) {\n          if (draft[key] !== source[key]) {\n            logger.warn(\"copyOf() does not update PK fields. The '\" + key + \"' update is being ignored.\", {\n              source: source\n            });\n          }\n          draft[key] = source[key];\n        });\n        var modelValidator = validateModelFields(modelDefinition);\n        Object.entries(draft).forEach(function (_a) {\n          var _b = __read(_a, 2),\n            k = _b[0],\n            v = _b[1];\n          var parsedValue = castInstanceType(modelDefinition, k, v);\n          modelValidator(k, parsedValue);\n        });\n        normalize(modelDefinition, draft);\n      }, function (p) {\n        return patches = p;\n      });\n      var hasExistingPatches = modelPatchesMap.has(source);\n      if (patches.length || hasExistingPatches) {\n        if (hasExistingPatches) {\n          var _a = __read(modelPatchesMap.get(source), 2),\n            existingPatches = _a[0],\n            existingSource = _a[1];\n          var mergedPatches = mergePatches(existingSource, existingPatches, patches);\n          modelPatchesMap.set(model, [mergedPatches, existingSource]);\n          checkReadOnlyPropertyOnUpdate(mergedPatches, modelDefinition);\n        } else {\n          modelPatchesMap.set(model, [patches, source]);\n          checkReadOnlyPropertyOnUpdate(patches, modelDefinition);\n        }\n      } else {\n        // always register patches when performing a copyOf, even if the\n        // patches list is empty. this allows `save()` to recognize when an\n        // instance is the result of a `copyOf()`. without more significant\n        // refactoring, this is the only way for `save()` to know which\n        // diffs (patches) are relevant for `storage` to use in building\n        // the list of \"changed\" fields for mutations.\n        modelPatchesMap.set(model, [[], source]);\n      }\n      return attached(model, ModelAttachment.DataStore);\n    };\n    // \"private\" method (that's hidden via `Setting`) for `withSSRContext` to use\n    // to gain access to `modelInstanceCreator` and `clazz` for persisting IDs from server to client.\n    Model.fromJSON = function (json) {\n      var _this = this;\n      if (Array.isArray(json)) {\n        return json.map(function (init) {\n          return _this.fromJSON(init);\n        });\n      }\n      var instance = modelInstanceCreator(clazz, json);\n      var modelValidator = validateModelFields(modelDefinition);\n      Object.entries(instance).forEach(function (_a) {\n        var _b = __read(_a, 2),\n          k = _b[0],\n          v = _b[1];\n        modelValidator(k, v);\n      });\n      return attached(instance, ModelAttachment.DataStore);\n    };\n    return Model;\n  }();\n  clazz[immerable] = true;\n  Object.defineProperty(clazz, 'name', {\n    value: modelDefinition.name\n  });\n  // Add getters/setters for relationship fields.\n  //  getter - for lazy loading\n  //  setter - for FK management\n  var allModelRelationships = ModelRelationship.allFrom({\n    builder: clazz,\n    schema: modelDefinition,\n    pkField: extractPrimaryKeyFieldNames(modelDefinition)\n  });\n  var _loop_1 = function (relationship) {\n    var field = relationship.field;\n    Object.defineProperty(clazz.prototype, modelDefinition.fields[field].name, {\n      set: function (model) {\n        if (!(typeof model === 'object' || typeof model === 'undefined')) return;\n        // if model is undefined or null, the connection should be removed\n        if (model) {\n          // Avoid validation error when processing AppSync response with nested\n          // selection set. Nested entitites lack version field and can not be validated\n          // TODO: explore a more reliable method to solve this\n          if (model.hasOwnProperty('_version')) {\n            var modelConstructor = Object.getPrototypeOf(model || {}).constructor;\n            if (!isValidModelConstructor(modelConstructor)) {\n              var msg = \"Value passed to \" + modelDefinition.name + \".\" + field + \" is not a valid instance of a model\";\n              logger.error(msg, {\n                model: model\n              });\n              throw new Error(msg);\n            }\n            if (modelConstructor.name.toLowerCase() !== relationship.remoteModelConstructor.name.toLowerCase()) {\n              var msg = \"Value passed to \" + modelDefinition.name + \".\" + field + \" is not an instance of \" + relationship.remoteModelConstructor.name;\n              logger.error(msg, {\n                model: model\n              });\n              throw new Error(msg);\n            }\n          }\n        }\n        // if the relationship can be managed automagically, set the FK's\n        if (relationship.isComplete) {\n          for (var i = 0; i < relationship.localJoinFields.length; i++) {\n            this[relationship.localJoinFields[i]] = model === null || model === void 0 ? void 0 : model[relationship.remoteJoinFields[i]];\n          }\n          var instanceMemos = modelInstanceAssociationsMap.has(this) ? modelInstanceAssociationsMap.get(this) : modelInstanceAssociationsMap.set(this, {}).get(this);\n          instanceMemos[field] = model || undefined;\n        }\n      },\n      get: function () {\n        var _this = this;\n        /**\n         * Bucket for holding related models instances specific to `this` instance.\n         */\n        var instanceMemos = modelInstanceAssociationsMap.has(this) ? modelInstanceAssociationsMap.get(this) : modelInstanceAssociationsMap.set(this, {}).get(this);\n        // if the memos already has a result for this field, we'll use it.\n        // there is no \"cache\" invalidation of any kind; memos are permanent to\n        // keep an immutable perception of the instance.\n        if (!instanceMemos.hasOwnProperty(field)) {\n          // before we populate the memo, we need to know where to look for relatives.\n          // today, this only supports DataStore. Models aren't managed elsewhere in Amplify.\n          if (getAttachment(this) === ModelAttachment.DataStore) {\n            // when we fetch the results using a query constructed under the guidance\n            // of the relationship metadata, we DO NOT AWAIT resolution. we want to\n            // drop the promise into the memo's synchronously, eliminating the chance\n            // for a race.\n            var resultPromise = instance.query(relationship.remoteModelConstructor, function (base) {\n              return base.and(function (q) {\n                return relationship.remoteJoinFields.map(function (field, index) {\n                  // TODO: anything we can use instead of `any` here?\n                  return q[field].eq(_this[relationship.localJoinFields[index]]);\n                });\n              });\n            });\n            // results in hand, how we return them to the caller depends on the relationship type.\n            if (relationship.type === 'HAS_MANY') {\n              // collections should support async iteration, even though we don't\n              // leverage it fully [yet].\n              instanceMemos[field] = new AsyncCollection(resultPromise);\n            } else {\n              // non-collections should only ever return 1 value *or nothing*.\n              // if we have more than 1 record, something's amiss. it's not our job\n              // pick a result for the customer. it's our job to say \"something's wrong.\"\n              instanceMemos[field] = resultPromise.then(function (rows) {\n                if (rows.length > 1) {\n                  // should never happen for a HAS_ONE or BELONGS_TO.\n                  var err = new Error(\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tData integrity error.\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tToo many records found for a HAS_ONE/BELONGS_TO field '\" + modelDefinition.name + \".\" + field + \"'\\n\\t\\t\\t\\t\\t\\t\\t\\t\");\n                  console.error(err);\n                  throw err;\n                } else {\n                  return rows[0];\n                }\n              });\n            }\n          } else if (getAttachment(this) === ModelAttachment.API) {\n            throw new Error('Lazy loading from API is not yet supported!');\n          } else {\n            if (relationship.type === 'HAS_MANY') {\n              return new AsyncCollection([]);\n            } else {\n              return Promise.resolve(undefined);\n            }\n          }\n        }\n        return instanceMemos[field];\n      }\n    });\n  };\n  try {\n    for (var allModelRelationships_1 = __values(allModelRelationships), allModelRelationships_1_1 = allModelRelationships_1.next(); !allModelRelationships_1_1.done; allModelRelationships_1_1 = allModelRelationships_1.next()) {\n      var relationship = allModelRelationships_1_1.value;\n      _loop_1(relationship);\n    }\n  } catch (e_5_1) {\n    e_5 = {\n      error: e_5_1\n    };\n  } finally {\n    try {\n      if (allModelRelationships_1_1 && !allModelRelationships_1_1.done && (_a = allModelRelationships_1.return)) _a.call(allModelRelationships_1);\n    } finally {\n      if (e_5) throw e_5.error;\n    }\n  }\n  return clazz;\n};\n/**\n * An eventually loaded related model instance.\n */\nvar AsyncItem = /** @class */function (_super) {\n  __extends(AsyncItem, _super);\n  function AsyncItem() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  return AsyncItem;\n}(Promise);\nexport { AsyncItem };\n/**\n * A collection of related model instances.\n *\n * This collection can be async-iterated or turned directly into an array using `toArray()`.\n */\nvar AsyncCollection = /** @class */function () {\n  function AsyncCollection(values) {\n    this.values = values;\n  }\n  /**\n   * Facilitates async iteration.\n   *\n   * ```ts\n   * for await (const item of collection) {\n   *   handle(item)\n   * }\n   * ```\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of\n   */\n  AsyncCollection.prototype[Symbol.asyncIterator] = function () {\n    var _this = this;\n    var values;\n    var index = 0;\n    return {\n      next: function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          var result;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                if (!!values) return [3 /*break*/, 2];\n                return [4 /*yield*/, this.values];\n              case 1:\n                values = _a.sent();\n                _a.label = 2;\n              case 2:\n                if (index < values.length) {\n                  result = {\n                    value: values[index],\n                    done: false\n                  };\n                  index++;\n                  return [2 /*return*/, result];\n                }\n                return [2 /*return*/, {\n                  value: null,\n                  done: true\n                }];\n            }\n          });\n        });\n      }\n    };\n  };\n  /**\n   * Turns the collection into an array, up to the amount specified in `max` param.\n   *\n   * ```ts\n   * const all = await collection.toArray();\n   * const first100 = await collection.toArray({max: 100});\n   * ```\n   */\n  AsyncCollection.prototype.toArray = function (_a) {\n    var _b = (_a === void 0 ? {} : _a).max,\n      max = _b === void 0 ? Number.MAX_SAFE_INTEGER : _b;\n    var e_6, _c;\n    return __awaiter(this, void 0, void 0, function () {\n      var output, i, _d, _e, element, e_6_1;\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            output = [];\n            i = 0;\n            _f.label = 1;\n          case 1:\n            _f.trys.push([1, 6, 7, 12]);\n            _d = __asyncValues(this);\n            _f.label = 2;\n          case 2:\n            return [4 /*yield*/, _d.next()];\n          case 3:\n            if (!(_e = _f.sent(), !_e.done)) return [3 /*break*/, 5];\n            element = _e.value;\n            if (i < max) {\n              output.push(element);\n              i++;\n            } else {\n              return [3 /*break*/, 5];\n            }\n            _f.label = 4;\n          case 4:\n            return [3 /*break*/, 2];\n          case 5:\n            return [3 /*break*/, 12];\n          case 6:\n            e_6_1 = _f.sent();\n            e_6 = {\n              error: e_6_1\n            };\n            return [3 /*break*/, 12];\n          case 7:\n            _f.trys.push([7,, 10, 11]);\n            if (!(_e && !_e.done && (_c = _d.return))) return [3 /*break*/, 9];\n            return [4 /*yield*/, _c.call(_d)];\n          case 8:\n            _f.sent();\n            _f.label = 9;\n          case 9:\n            return [3 /*break*/, 11];\n          case 10:\n            if (e_6) throw e_6.error;\n            return [7 /*endfinally*/];\n          case 11:\n            return [7 /*endfinally*/];\n          case 12:\n            return [2 /*return*/, output];\n        }\n      });\n    });\n  };\n  return AsyncCollection;\n}();\nexport { AsyncCollection };\nvar checkReadOnlyPropertyOnCreate = function (draft, modelDefinition) {\n  var modelKeys = Object.keys(draft);\n  var fields = modelDefinition.fields;\n  modelKeys.forEach(function (key) {\n    if (fields[key] && fields[key].isReadOnly) {\n      throw new Error(key + \" is read-only.\");\n    }\n  });\n};\nvar checkReadOnlyPropertyOnUpdate = function (patches, modelDefinition) {\n  var patchArray = patches.map(function (p) {\n    return [p.path[0], p.value];\n  });\n  var fields = modelDefinition.fields;\n  patchArray.forEach(function (_a) {\n    var _b = __read(_a, 2),\n      key = _b[0],\n      val = _b[1];\n    if (!val || !fields[key]) return;\n    if (fields[key].isReadOnly) {\n      throw new Error(key + \" is read-only.\");\n    }\n  });\n};\nvar createNonModelClass = function (typeDefinition) {\n  var clazz = /** @class */function () {\n    function Model(init) {\n      var instance = produce(this, function (draft) {\n        initializeInstance(init, typeDefinition, draft);\n      });\n      return instance;\n    }\n    return Model;\n  }();\n  clazz[immerable] = true;\n  Object.defineProperty(clazz, 'name', {\n    value: typeDefinition.name\n  });\n  registerNonModelClass(clazz);\n  return clazz;\n};\nfunction isQueryOne(obj) {\n  return typeof obj === 'string';\n}\nfunction defaultConflictHandler(conflictData) {\n  var localModel = conflictData.localModel,\n    modelConstructor = conflictData.modelConstructor,\n    remoteModel = conflictData.remoteModel;\n  var _version = remoteModel._version;\n  return modelInstanceCreator(modelConstructor, __assign(__assign({}, localModel), {\n    _version: _version\n  }));\n}\nfunction defaultErrorHandler(error) {\n  logger.warn(error);\n}\nfunction getModelConstructorByModelName(namespaceName, modelName) {\n  var result;\n  switch (namespaceName) {\n    case DATASTORE:\n      result = dataStoreClasses[modelName];\n      break;\n    case USER:\n      result = userClasses[modelName];\n      break;\n    case SYNC:\n      result = syncClasses[modelName];\n      break;\n    case STORAGE:\n      result = storageClasses[modelName];\n      break;\n    default:\n      throw new Error(\"Invalid namespace: \" + namespaceName);\n  }\n  if (isValidModelConstructor(result)) {\n    return result;\n  } else {\n    var msg = \"Model name is not valid for namespace. modelName: \" + modelName + \", namespace: \" + namespaceName;\n    logger.error(msg);\n    throw new Error(msg);\n  }\n}\n/**\n * Queries the DataStore metadata tables to see if they are the expected\n * version. If not, clobbers the whole DB. If so, leaves them alone.\n * Otherwise, simply writes the schema version.\n *\n * SIDE EFFECT:\n * 1. Creates a transaction\n * 1. Updates data.\n *\n * @param storage Storage adapter containing the metadata.\n * @param version The expected schema version.\n */\nfunction checkSchemaVersion(storage, version) {\n  return __awaiter(this, void 0, void 0, function () {\n    var Setting, modelDefinition;\n    var _this = this;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          Setting = dataStoreClasses.Setting;\n          modelDefinition = schema.namespaces[DATASTORE].models.Setting;\n          return [4 /*yield*/, storage.runExclusive(function (s) {\n            return __awaiter(_this, void 0, void 0, function () {\n              var _a, schemaVersionSetting, storedValue;\n              return __generator(this, function (_b) {\n                switch (_b.label) {\n                  case 0:\n                    return [4 /*yield*/, s.query(Setting, ModelPredicateCreator.createFromAST(modelDefinition, {\n                      and: {\n                        key: {\n                          eq: SETTING_SCHEMA_VERSION\n                        }\n                      }\n                    }), {\n                      page: 0,\n                      limit: 1\n                    })];\n                  case 1:\n                    _a = __read.apply(void 0, [_b.sent(), 1]), schemaVersionSetting = _a[0];\n                    if (!(schemaVersionSetting !== undefined && schemaVersionSetting.value !== undefined)) return [3 /*break*/, 4];\n                    storedValue = JSON.parse(schemaVersionSetting.value);\n                    if (!(storedValue !== version)) return [3 /*break*/, 3];\n                    return [4 /*yield*/, s.clear(false)];\n                  case 2:\n                    _b.sent();\n                    _b.label = 3;\n                  case 3:\n                    return [3 /*break*/, 6];\n                  case 4:\n                    return [4 /*yield*/, s.save(modelInstanceCreator(Setting, {\n                      key: SETTING_SCHEMA_VERSION,\n                      value: JSON.stringify(version)\n                    }))];\n                  case 5:\n                    _b.sent();\n                    _b.label = 6;\n                  case 6:\n                    return [2 /*return*/];\n                }\n              });\n            });\n          })];\n        case 1:\n          _a.sent();\n          return [2 /*return*/];\n      }\n    });\n  });\n}\nvar syncSubscription;\nfunction getNamespace() {\n  var namespace = {\n    name: DATASTORE,\n    relationships: {},\n    enums: {},\n    nonModels: {},\n    models: {\n      Setting: {\n        name: 'Setting',\n        pluralName: 'Settings',\n        syncable: false,\n        fields: {\n          id: {\n            name: 'id',\n            type: 'ID',\n            isRequired: true,\n            isArray: false\n          },\n          key: {\n            name: 'key',\n            type: 'String',\n            isRequired: true,\n            isArray: false\n          },\n          value: {\n            name: 'value',\n            type: 'String',\n            isRequired: true,\n            isArray: false\n          }\n        }\n      }\n    }\n  };\n  return namespace;\n}\nvar DataStoreState = /*#__PURE__*/function (DataStoreState) {\n  DataStoreState[\"NotRunning\"] = \"Not Running\";\n  DataStoreState[\"Starting\"] = \"Starting\";\n  DataStoreState[\"Running\"] = \"Running\";\n  DataStoreState[\"Stopping\"] = \"Stopping\";\n  DataStoreState[\"Clearing\"] = \"Clearing\";\n  return DataStoreState;\n}(DataStoreState || {});\n// TODO: How can we get rid of the non-null assertions?\n// https://github.com/aws-amplify/amplify-js/pull/10477/files#r1007363485\nvar DataStore = /** @class */function () {\n  function DataStore() {\n    var _this = this;\n    // reference to configured category instances. Used for preserving SSR context\n    this.Auth = Auth;\n    this.InternalAPI = InternalAPI;\n    this.Cache = Cache;\n    // Non-null assertions (bang operator) have been added to most of these properties\n    // to make TS happy. These properties are all expected to be set immediately after\n    // construction.\n    // TODO: Refactor to use proper DI if possible. If not possible, change these to\n    // optionals and implement conditional checks throughout. Rinse/repeat on all\n    // sync engine processors, storage engine, adapters, etc..\n    this.amplifyConfig = {};\n    this.syncPredicates = new WeakMap();\n    // object that gets passed to descendent classes. Allows us to pass these down by reference\n    this.amplifyContext = {\n      Auth: this.Auth,\n      InternalAPI: this.InternalAPI,\n      Cache: this.Cache\n    };\n    /**\n     * **IMPORTANT!**\n     *\n     * Accumulator for background things that can **and MUST** be called when\n     * DataStore stops.\n     *\n     * These jobs **MUST** be *idempotent promises* that resolve ONLY\n     * once the intended jobs are completely finished and/or otherwise destroyed\n     * and cleaned up with ZERO outstanding:\n     *\n     * 1. side effects (e.g., state changes)\n     * 1. callbacks\n     * 1. subscriptions\n     * 1. calls to storage\n     * 1. *etc.*\n     *\n     * Methods that create pending promises, subscriptions, callbacks, or any\n     * type of side effect **MUST** be registered with the manager. And, a new\n     * manager must be created after each `exit()`.\n     *\n     * Failure to comply will put DataStore into a highly unpredictable state\n     * when it needs to stop or clear -- which occurs when restarting with new\n     * sync expressions, during testing, and potentially during app code\n     * recovery handling, etc..\n     *\n     * It is up to the discretion of each disposer whether to wait for job\n     * completion or to cancel operations and issue failures *as long as the\n     * disposer returns in a reasonable amount of time.*\n     *\n     * (Reasonable = *seconds*, not minutes.)\n     */\n    this.runningProcesses = new BackgroundProcessManager();\n    /**\n     * Indicates what state DataStore is in.\n     *\n     * Not [yet?] used for actual state management; but for messaging\n     * when errors occur, to help troubleshoot.\n     */\n    this.state = DataStoreState.NotRunning;\n    /**\n     * If not already done:\n     * 1. Attaches and initializes storage.\n     * 2. Loads the schema and records metadata.\n     * 3. If `this.amplifyConfig.aws_appsync_graphqlEndpoint` contains a URL,\n     * attaches a sync engine, starts it, and subscribes.\n     */\n    this.start = function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _this = this;\n        return __generator(this, function (_a) {\n          return [2 /*return*/, this.runningProcesses.add(function () {\n            return __awaiter(_this, void 0, void 0, function () {\n              var aws_appsync_graphqlEndpoint, _a, fullSyncIntervalInMilliseconds;\n              var _this = this;\n              return __generator(this, function (_b) {\n                switch (_b.label) {\n                  case 0:\n                    this.state = DataStoreState.Starting;\n                    if (!(this.initialized === undefined)) return [3 /*break*/, 1];\n                    logger.debug('Starting DataStore');\n                    this.initialized = new Promise(function (res, rej) {\n                      _this.initResolve = res;\n                      _this.initReject = rej;\n                    });\n                    return [3 /*break*/, 3];\n                  case 1:\n                    return [4 /*yield*/, this.initialized];\n                  case 2:\n                    _b.sent();\n                    return [2 /*return*/];\n                  case 3:\n                    this.storage = new Storage(schema, namespaceResolver, getModelConstructorByModelName, modelInstanceCreator, this.storageAdapter, this.sessionId);\n                    return [4 /*yield*/, this.storage.init()];\n                  case 4:\n                    _b.sent();\n                    checkSchemaInitialized();\n                    return [4 /*yield*/, checkSchemaVersion(this.storage, schema.version)];\n                  case 5:\n                    _b.sent();\n                    aws_appsync_graphqlEndpoint = this.amplifyConfig.aws_appsync_graphqlEndpoint;\n                    if (!aws_appsync_graphqlEndpoint) return [3 /*break*/, 7];\n                    logger.debug('GraphQL endpoint available', aws_appsync_graphqlEndpoint);\n                    _a = this;\n                    return [4 /*yield*/, this.processSyncExpressions()];\n                  case 6:\n                    _a.syncPredicates = _b.sent();\n                    this.sync = new SyncEngine(schema, namespaceResolver, syncClasses, userClasses, this.storage, modelInstanceCreator, this.conflictHandler, this.errorHandler, this.syncPredicates, this.amplifyConfig, this.authModeStrategy, this.amplifyContext, this.connectivityMonitor);\n                    fullSyncIntervalInMilliseconds = this.fullSyncInterval * 1000 * 60;\n                    syncSubscription = this.sync.start({\n                      fullSyncInterval: fullSyncIntervalInMilliseconds\n                    }).subscribe({\n                      next: function (_a) {\n                        var type = _a.type,\n                          data = _a.data;\n                        // In Node, we need to wait for queries to be synced to prevent returning empty arrays.\n                        // In the Browser, we can begin returning data once subscriptions are in place.\n                        var readyType = isNode ? ControlMessage.SYNC_ENGINE_SYNC_QUERIES_READY : ControlMessage.SYNC_ENGINE_STORAGE_SUBSCRIBED;\n                        if (type === readyType) {\n                          _this.initResolve();\n                        }\n                        Hub.dispatch('datastore', {\n                          event: type,\n                          data: data\n                        });\n                      },\n                      error: function (err) {\n                        logger.warn('Sync error', err);\n                        _this.initReject();\n                      }\n                    });\n                    return [3 /*break*/, 8];\n                  case 7:\n                    logger.warn(\"Data won't be synchronized. No GraphQL endpoint configured. Did you forget `Amplify.configure(awsconfig)`?\", {\n                      config: this.amplifyConfig\n                    });\n                    this.initResolve();\n                    _b.label = 8;\n                  case 8:\n                    return [4 /*yield*/, this.initialized];\n                  case 9:\n                    _b.sent();\n                    this.state = DataStoreState.Running;\n                    return [2 /*return*/];\n                }\n              });\n            });\n          }, 'datastore start').catch(this.handleAddProcError('DataStore.start()'))];\n        });\n      });\n    };\n    this.query = function (modelConstructor, identifierOrCriteria, paginationProducer) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _this = this;\n        return __generator(this, function (_a) {\n          return [2 /*return*/, this.runningProcesses.add(function () {\n            return __awaiter(_this, void 0, void 0, function () {\n              var result, msg, modelDefinition, pagination, keyFields, msg, predicate, predicate, seedPredicate, predicate, returnOne;\n              var _a;\n              var _b;\n              return __generator(this, function (_c) {\n                switch (_c.label) {\n                  case 0:\n                    return [4 /*yield*/, this.start()];\n                  case 1:\n                    _c.sent();\n                    if (!this.storage) {\n                      throw new Error('No storage to query');\n                    }\n                    //#region Input validation\n                    if (!isValidModelConstructor(modelConstructor)) {\n                      msg = 'Constructor is not for a valid model';\n                      logger.error(msg, {\n                        modelConstructor: modelConstructor\n                      });\n                      throw new Error(msg);\n                    }\n                    if (typeof identifierOrCriteria === 'string') {\n                      if (paginationProducer !== undefined) {\n                        logger.warn('Pagination is ignored when querying by id');\n                      }\n                    }\n                    modelDefinition = getModelDefinition(modelConstructor);\n                    if (!modelDefinition) {\n                      throw new Error('Invalid model definition provided!');\n                    }\n                    pagination = this.processPagination(modelDefinition, paginationProducer);\n                    keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n                    if (!isQueryOne(identifierOrCriteria)) return [3 /*break*/, 3];\n                    if (keyFields.length > 1) {\n                      msg = errorMessages.queryByPkWithCompositeKeyPresent;\n                      logger.error(msg, {\n                        keyFields: keyFields\n                      });\n                      throw new Error(msg);\n                    }\n                    predicate = ModelPredicateCreator.createFromFlatEqualities(modelDefinition, (_a = {}, _a[keyFields[0]] = identifierOrCriteria, _a));\n                    return [4 /*yield*/, this.storage.query(modelConstructor, predicate, pagination)];\n                  case 2:\n                    result = _c.sent();\n                    return [3 /*break*/, 9];\n                  case 3:\n                    if (!isIdentifierObject(identifierOrCriteria, modelDefinition)) return [3 /*break*/, 5];\n                    predicate = ModelPredicateCreator.createForPk(modelDefinition, identifierOrCriteria);\n                    return [4 /*yield*/, this.storage.query(modelConstructor, predicate, pagination)];\n                  case 4:\n                    result = _c.sent();\n                    return [3 /*break*/, 9];\n                  case 5:\n                    if (!(!identifierOrCriteria || isPredicatesAll(identifierOrCriteria))) return [3 /*break*/, 7];\n                    return [4 /*yield*/, (_b = this.storage) === null || _b === void 0 ? void 0 : _b.query(modelConstructor, undefined, pagination)];\n                  case 6:\n                    result = _c.sent();\n                    return [3 /*break*/, 9];\n                  case 7:\n                    seedPredicate = recursivePredicateFor({\n                      builder: modelConstructor,\n                      schema: modelDefinition,\n                      pkField: extractPrimaryKeyFieldNames(modelDefinition)\n                    });\n                    predicate = internals(identifierOrCriteria(seedPredicate));\n                    return [4 /*yield*/, predicate.fetch(this.storage)];\n                  case 8:\n                    result = _c.sent();\n                    result = inMemoryPagination(result, pagination);\n                    _c.label = 9;\n                  case 9:\n                    returnOne = isQueryOne(identifierOrCriteria) || isIdentifierObject(identifierOrCriteria, modelDefinition);\n                    return [2 /*return*/, attached(returnOne ? result[0] : result, ModelAttachment.DataStore)];\n                }\n              });\n            });\n          }, 'datastore query').catch(this.handleAddProcError('DataStore.query()'))];\n        });\n      });\n    };\n    this.save = function (model, condition) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _this = this;\n        return __generator(this, function (_a) {\n          return [2 /*return*/, this.runningProcesses.add(function () {\n            return __awaiter(_this, void 0, void 0, function () {\n              var updatedPatchesTuple, initPatchesTuple, patchesTuple, modelConstructor, msg, modelDefinition, modelMeta, producedCondition, _a, savedModel;\n              var _this = this;\n              return __generator(this, function (_b) {\n                switch (_b.label) {\n                  case 0:\n                    return [4 /*yield*/, this.start()];\n                  case 1:\n                    _b.sent();\n                    if (!this.storage) {\n                      throw new Error('No storage to save to');\n                    }\n                    updatedPatchesTuple = modelPatchesMap.get(model);\n                    initPatchesTuple = initPatches.has(model) ? [initPatches.get(model), {}] : undefined;\n                    patchesTuple = updatedPatchesTuple || initPatchesTuple;\n                    modelConstructor = model ? model.constructor : undefined;\n                    if (!isValidModelConstructor(modelConstructor)) {\n                      msg = 'Object is not an instance of a valid model';\n                      logger.error(msg, {\n                        model: model\n                      });\n                      throw new Error(msg);\n                    }\n                    modelDefinition = getModelDefinition(modelConstructor);\n                    if (!modelDefinition) {\n                      throw new Error('Model Definition could not be found for model');\n                    }\n                    modelMeta = {\n                      builder: modelConstructor,\n                      schema: modelDefinition,\n                      pkField: extractPrimaryKeyFieldNames(modelDefinition)\n                    };\n                    return [4 /*yield*/, this.storage.runExclusive(function (s) {\n                      return __awaiter(_this, void 0, void 0, function () {\n                        var nonHasManyRelationships, nonHasManyRelationships_1, nonHasManyRelationships_1_1, relationship, queryObject, related, e_7_1;\n                        var e_7, _a;\n                        var _b;\n                        return __generator(this, function (_c) {\n                          switch (_c.label) {\n                            case 0:\n                              nonHasManyRelationships = ModelRelationship.allFrom(modelMeta).filter(function (r) {\n                                return r.type === 'BELONGS_TO';\n                              });\n                              _c.label = 1;\n                            case 1:\n                              _c.trys.push([1, 6, 7, 8]);\n                              nonHasManyRelationships_1 = __values(nonHasManyRelationships), nonHasManyRelationships_1_1 = nonHasManyRelationships_1.next();\n                              _c.label = 2;\n                            case 2:\n                              if (!!nonHasManyRelationships_1_1.done) return [3 /*break*/, 5];\n                              relationship = nonHasManyRelationships_1_1.value;\n                              queryObject = relationship.createRemoteQueryObject(model);\n                              if (!(queryObject !== null)) return [3 /*break*/, 4];\n                              return [4 /*yield*/, s.query(relationship.remoteModelConstructor, ModelPredicateCreator.createFromFlatEqualities(relationship.remoteDefinition, queryObject))];\n                            case 3:\n                              related = _c.sent();\n                              if (related.length === 0) {\n                                throw new Error([\"Data integrity error. You tried to save a \" + modelDefinition.name + \" (\" + JSON.stringify(model) + \")\", \"but the instance assigned to the \\\"\" + relationship.field + \"\\\" property\", \"does not exist in the local database. If you're trying to create the related\", \"\\\"\" + ((_b = relationship.remoteDefinition) === null || _b === void 0 ? void 0 : _b.name) + \"\\\", you must save it independently first.\"].join(' '));\n                              }\n                              _c.label = 4;\n                            case 4:\n                              nonHasManyRelationships_1_1 = nonHasManyRelationships_1.next();\n                              return [3 /*break*/, 2];\n                            case 5:\n                              return [3 /*break*/, 8];\n                            case 6:\n                              e_7_1 = _c.sent();\n                              e_7 = {\n                                error: e_7_1\n                              };\n                              return [3 /*break*/, 8];\n                            case 7:\n                              try {\n                                if (nonHasManyRelationships_1_1 && !nonHasManyRelationships_1_1.done && (_a = nonHasManyRelationships_1.return)) _a.call(nonHasManyRelationships_1);\n                              } finally {\n                                if (e_7) throw e_7.error;\n                              }\n                              return [7 /*endfinally*/];\n                            case 8:\n                              return [2 /*return*/];\n                          }\n                        });\n                      });\n                    })];\n                  case 2:\n                    _b.sent();\n                    producedCondition = condition ? internals(condition(predicateFor(modelMeta))).toStoragePredicate() : undefined;\n                    return [4 /*yield*/, this.storage.runExclusive(function (s) {\n                      return __awaiter(_this, void 0, void 0, function () {\n                        var saved;\n                        return __generator(this, function (_a) {\n                          switch (_a.label) {\n                            case 0:\n                              return [4 /*yield*/, s.save(model, producedCondition, undefined, patchesTuple)];\n                            case 1:\n                              saved = _a.sent();\n                              return [2 /*return*/, s.query(modelConstructor, ModelPredicateCreator.createForPk(modelDefinition, model))];\n                          }\n                        });\n                      });\n                    })];\n                  case 3:\n                    _a = __read.apply(void 0, [_b.sent(), 1]), savedModel = _a[0];\n                    return [2 /*return*/, attached(savedModel, ModelAttachment.DataStore)];\n                }\n              });\n            });\n          }, 'datastore save').catch(this.handleAddProcError('DataStore.save()'))];\n        });\n      });\n    };\n    this.setConflictHandler = function (config) {\n      var configDataStore = config.DataStore;\n      var conflictHandlerIsDefault = function () {\n        return _this.conflictHandler === defaultConflictHandler;\n      };\n      if (configDataStore && configDataStore.conflictHandler) {\n        return configDataStore.conflictHandler;\n      }\n      if (conflictHandlerIsDefault() && config.conflictHandler) {\n        return config.conflictHandler;\n      }\n      return _this.conflictHandler || defaultConflictHandler;\n    };\n    this.setErrorHandler = function (config) {\n      var configDataStore = config.DataStore;\n      var errorHandlerIsDefault = function () {\n        return _this.errorHandler === defaultErrorHandler;\n      };\n      if (configDataStore && configDataStore.errorHandler) {\n        return configDataStore.errorHandler;\n      }\n      if (errorHandlerIsDefault() && config.errorHandler) {\n        return config.errorHandler;\n      }\n      return _this.errorHandler || defaultErrorHandler;\n    };\n    this.delete = function (modelOrConstructor, identifierOrCriteria) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _this = this;\n        return __generator(this, function (_a) {\n          return [2 /*return*/, this.runningProcesses.add(function () {\n            return __awaiter(_this, void 0, void 0, function () {\n              var condition, msg, modelConstructor, msg, modelDefinition, keyFields, msg, msg, _a, deleted, model, modelConstructor, msg, modelDefinition, pkPredicate, msg, _b, _c, deleted;\n              var _d;\n              return __generator(this, function (_e) {\n                switch (_e.label) {\n                  case 0:\n                    return [4 /*yield*/, this.start()];\n                  case 1:\n                    _e.sent();\n                    if (!this.storage) {\n                      throw new Error('No storage to delete from');\n                    }\n                    if (!modelOrConstructor) {\n                      msg = 'Model or Model Constructor required';\n                      logger.error(msg, {\n                        modelOrConstructor: modelOrConstructor\n                      });\n                      throw new Error(msg);\n                    }\n                    if (!isValidModelConstructor(modelOrConstructor)) return [3 /*break*/, 3];\n                    modelConstructor = modelOrConstructor;\n                    if (!identifierOrCriteria) {\n                      msg = 'Id to delete or criteria required. Do you want to delete all? Pass Predicates.ALL';\n                      logger.error(msg, {\n                        identifierOrCriteria: identifierOrCriteria\n                      });\n                      throw new Error(msg);\n                    }\n                    modelDefinition = getModelDefinition(modelConstructor);\n                    if (!modelDefinition) {\n                      throw new Error('Could not find model definition for modelConstructor.');\n                    }\n                    if (typeof identifierOrCriteria === 'string') {\n                      keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n                      if (keyFields.length > 1) {\n                        msg = errorMessages.deleteByPkWithCompositeKeyPresent;\n                        logger.error(msg, {\n                          keyFields: keyFields\n                        });\n                        throw new Error(msg);\n                      }\n                      condition = ModelPredicateCreator.createFromFlatEqualities(modelDefinition, (_d = {}, _d[keyFields[0]] = identifierOrCriteria, _d));\n                    } else {\n                      if (isIdentifierObject(identifierOrCriteria, modelDefinition)) {\n                        condition = ModelPredicateCreator.createForPk(modelDefinition, identifierOrCriteria);\n                      } else {\n                        condition = internals(identifierOrCriteria(predicateFor({\n                          builder: modelConstructor,\n                          schema: modelDefinition,\n                          pkField: extractPrimaryKeyFieldNames(modelDefinition)\n                        }))).toStoragePredicate();\n                      }\n                      if (!condition || !ModelPredicateCreator.isValidPredicate(condition)) {\n                        msg = 'Criteria required. Do you want to delete all? Pass Predicates.ALL';\n                        logger.error(msg, {\n                          condition: condition\n                        });\n                        throw new Error(msg);\n                      }\n                    }\n                    return [4 /*yield*/, this.storage.delete(modelConstructor, condition)];\n                  case 2:\n                    _a = __read.apply(void 0, [_e.sent(), 1]), deleted = _a[0];\n                    return [2 /*return*/, attached(deleted, ModelAttachment.DataStore)];\n                  case 3:\n                    model = modelOrConstructor;\n                    modelConstructor = Object.getPrototypeOf(model || {}).constructor;\n                    if (!isValidModelConstructor(modelConstructor)) {\n                      msg = 'Object is not an instance of a valid model';\n                      logger.error(msg, {\n                        model: model\n                      });\n                      throw new Error(msg);\n                    }\n                    modelDefinition = getModelDefinition(modelConstructor);\n                    if (!modelDefinition) {\n                      throw new Error('Could not find model definition for modelConstructor.');\n                    }\n                    pkPredicate = ModelPredicateCreator.createForPk(modelDefinition, model);\n                    if (identifierOrCriteria) {\n                      if (typeof identifierOrCriteria !== 'function') {\n                        msg = 'Invalid criteria';\n                        logger.error(msg, {\n                          identifierOrCriteria: identifierOrCriteria\n                        });\n                        throw new Error(msg);\n                      }\n                      condition = internals(identifierOrCriteria(predicateFor({\n                        builder: modelConstructor,\n                        schema: modelDefinition,\n                        pkField: extractPrimaryKeyFieldNames(modelDefinition)\n                      }))).toStoragePredicate();\n                    } else {\n                      condition = pkPredicate;\n                    }\n                    return [4 /*yield*/, this.storage.delete(model, condition)];\n                  case 4:\n                    _b = __read.apply(void 0, [_e.sent(), 1]), _c = __read(_b[0], 1), deleted = _c[0];\n                    return [2 /*return*/, attached(deleted, ModelAttachment.DataStore)];\n                }\n              });\n            });\n          }, 'datastore delete').catch(this.handleAddProcError('DataStore.delete()'))];\n        });\n      });\n    };\n    this.observe = function (modelOrConstructor, identifierOrCriteria) {\n      var executivePredicate;\n      var modelConstructor = modelOrConstructor && isValidModelConstructor(modelOrConstructor) ? modelOrConstructor : undefined;\n      if (modelOrConstructor && modelConstructor === undefined) {\n        var model = modelOrConstructor;\n        var modelConstructor_1 = model && Object.getPrototypeOf(model).constructor;\n        if (isValidModelConstructor(modelConstructor_1)) {\n          if (identifierOrCriteria) {\n            logger.warn('idOrCriteria is ignored when using a model instance', {\n              model: model,\n              identifierOrCriteria: identifierOrCriteria\n            });\n          }\n          return _this.observe(modelConstructor_1, model.id);\n        } else {\n          var msg = 'The model is not an instance of a PersistentModelConstructor';\n          logger.error(msg, {\n            model: model\n          });\n          throw new Error(msg);\n        }\n      }\n      // observe should not accept object literal syntax\n      if (identifierOrCriteria && modelConstructor && isIdentifierObject(identifierOrCriteria, getModelDefinition(modelConstructor))) {\n        var msg = errorMessages.observeWithObjectLiteral;\n        logger.error(msg, {\n          objectLiteral: identifierOrCriteria\n        });\n        throw new Error(msg);\n      }\n      if (identifierOrCriteria !== undefined && modelConstructor === undefined) {\n        var msg = 'Cannot provide criteria without a modelConstructor';\n        logger.error(msg, identifierOrCriteria);\n        throw new Error(msg);\n      }\n      if (modelConstructor && !isValidModelConstructor(modelConstructor)) {\n        var msg = 'Constructor is not for a valid model';\n        logger.error(msg, {\n          modelConstructor: modelConstructor\n        });\n        throw new Error(msg);\n      }\n      if (modelConstructor && typeof identifierOrCriteria === 'string') {\n        var buildIdPredicate = function (seed) {\n          return seed.id.eq(identifierOrCriteria);\n        };\n        executivePredicate = internals(buildIdPredicate(buildSeedPredicate(modelConstructor)));\n      } else if (modelConstructor && typeof identifierOrCriteria === 'function') {\n        executivePredicate = internals(identifierOrCriteria(buildSeedPredicate(modelConstructor)));\n      }\n      return new Observable(function (observer) {\n        var source;\n        _this.runningProcesses.add(function () {\n          return __awaiter(_this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  return [4 /*yield*/, this.start()];\n                case 1:\n                  _a.sent();\n                  // Filter the events returned by Storage according to namespace,\n                  // append original element data, and subscribe to the observable\n                  source = this.storage.observe(modelConstructor).filter(function (_a) {\n                    var model = _a.model;\n                    return namespaceResolver(model) === USER;\n                  }).subscribe({\n                    next: function (item) {\n                      return _this.runningProcesses.isOpen && _this.runningProcesses.add(function () {\n                        return __awaiter(_this, void 0, void 0, function () {\n                          var message, modelDefinition, keyFields, primaryKeysAndValues, freshElement, _a;\n                          return __generator(this, function (_b) {\n                            switch (_b.label) {\n                              case 0:\n                                message = item;\n                                if (!(item.opType !== 'DELETE')) return [3 /*break*/, 2];\n                                modelDefinition = getModelDefinition(item.model);\n                                keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n                                primaryKeysAndValues = extractPrimaryKeysAndValues(item.element, keyFields);\n                                return [4 /*yield*/, this.query(item.model, primaryKeysAndValues)];\n                              case 1:\n                                freshElement = _b.sent();\n                                message = __assign(__assign({}, message), {\n                                  element: freshElement\n                                });\n                                _b.label = 2;\n                              case 2:\n                                _a = !executivePredicate;\n                                if (_a) return [3 /*break*/, 4];\n                                return [4 /*yield*/, executivePredicate.matches(message.element)];\n                              case 3:\n                                _a = _b.sent();\n                                _b.label = 4;\n                              case 4:\n                                if (_a) {\n                                  observer.next(message);\n                                }\n                                return [2 /*return*/];\n                            }\n                          });\n                        });\n                      }, 'datastore observe message handler');\n                    },\n                    error: function (err) {\n                      return observer.error(err);\n                    },\n                    complete: function () {\n                      return observer.complete();\n                    }\n                  });\n                  return [2 /*return*/];\n              }\n            });\n          });\n        }, 'datastore observe observable initialization').catch(_this.handleAddProcError('DataStore.observe()')).catch(function (error) {\n          observer.error(error);\n        });\n        // better than no cleaner, but if the subscriber is handling the\n        // complete() message async and not registering with the context,\n        // this will still be problematic.\n        return _this.runningProcesses.addCleaner(function () {\n          return __awaiter(_this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n              if (source) {\n                source.unsubscribe();\n              }\n              return [2 /*return*/];\n            });\n          });\n        }, 'DataStore.observe() cleanup');\n      });\n    };\n    this.observeQuery = function (model, criteria, options) {\n      return new Observable(function (observer) {\n        var items = new Map();\n        var itemsChanged = new Map();\n        var deletedItemIds = [];\n        var handle;\n        // let predicate: ModelPredicate<T> | undefined;\n        var executivePredicate;\n        /**\n         * As the name suggests, this geneates a snapshot in the form of\n         * \t`{items: T[], isSynced: boolean}`\n         * and sends it to the observer.\n         *\n         * SIDE EFFECT: The underlying generation and emission methods may touch:\n         * `items`, `itemsChanged`, and `deletedItemIds`.\n         *\n         * Refer to `generateSnapshot` and `emitSnapshot` for more details.\n         */\n        var generateAndEmitSnapshot = function () {\n          var snapshot = generateSnapshot();\n          emitSnapshot(snapshot);\n        };\n        // a mechanism to return data after X amount of seconds OR after the\n        // \"limit\" (itemsChanged >= this.syncPageSize) has been reached, whichever comes first\n        var limitTimerRace = new DeferredCallbackResolver({\n          callback: generateAndEmitSnapshot,\n          errorHandler: observer.error,\n          maxInterval: 2000\n        });\n        var sort = (options || {}).sort;\n        var sortOptions = sort ? {\n          sort: sort\n        } : undefined;\n        var modelDefinition = getModelDefinition(model);\n        if (!modelDefinition) {\n          throw new Error('Could not find model definition.');\n        }\n        if (model && typeof criteria === 'function') {\n          executivePredicate = internals(criteria(buildSeedPredicate(model)));\n        } else if (isPredicatesAll(criteria)) {\n          executivePredicate = undefined;\n        }\n        _this.runningProcesses.add(function () {\n          return __awaiter(_this, void 0, void 0, function () {\n            var err_1;\n            var _this = this;\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  _a.trys.push([0, 2,, 3]);\n                  return [4 /*yield*/, this.query(model, criteria, sortOptions)];\n                case 1:\n                  // first, query and return any locally-available records\n                  _a.sent().forEach(function (item) {\n                    var itemModelDefinition = getModelDefinition(model);\n                    var idOrPk = getIdentifierValue(itemModelDefinition, item);\n                    items.set(idOrPk, item);\n                  });\n                  // Observe the model and send a stream of updates (debounced).\n                  // We need to post-filter results instead of passing criteria through\n                  // to have visibility into items that move from in-set to out-of-set.\n                  // We need to explicitly remove those items from the existing snapshot.\n                  handle = this.observe(model).subscribe(function (_a) {\n                    var element = _a.element,\n                      model = _a.model,\n                      opType = _a.opType;\n                    return _this.runningProcesses.isOpen && _this.runningProcesses.add(function () {\n                      return __awaiter(_this, void 0, void 0, function () {\n                        var itemModelDefinition, idOrPk, _a, isSynced, limit;\n                        var _b, _c;\n                        return __generator(this, function (_d) {\n                          switch (_d.label) {\n                            case 0:\n                              itemModelDefinition = getModelDefinition(model);\n                              idOrPk = getIdentifierValue(itemModelDefinition, element);\n                              _a = executivePredicate;\n                              if (!_a) return [3 /*break*/, 2];\n                              return [4 /*yield*/, executivePredicate.matches(element)];\n                            case 1:\n                              _a = !_d.sent();\n                              _d.label = 2;\n                            case 2:\n                              if (_a) {\n                                if (opType === 'UPDATE' && (items.has(idOrPk) || itemsChanged.has(idOrPk))) {\n                                  // tracking as a \"deleted item\" will include the item in\n                                  // page limit calculations and ensure it is removed from the\n                                  // final items collection, regardless of which collection(s)\n                                  // it is currently in. (I mean, it could be in both, right!?)\n                                  deletedItemIds.push(idOrPk);\n                                } else {\n                                  // ignore updates for irrelevant/filtered items.\n                                  return [2 /*return*/];\n                                }\n                              }\n                              // Flag items which have been recently deleted\n                              // NOTE: Merging of separate operations to the same model instance is handled upstream\n                              // in the `mergePage` method within src/sync/merger.ts. The final state of a model instance\n                              // depends on the LATEST record (for a given id).\n                              if (opType === 'DELETE') {\n                                deletedItemIds.push(idOrPk);\n                              } else {\n                                itemsChanged.set(idOrPk, element);\n                              }\n                              isSynced = (_c = (_b = this.sync) === null || _b === void 0 ? void 0 : _b.getModelSyncedStatus(model)) !== null && _c !== void 0 ? _c : false;\n                              limit = itemsChanged.size - deletedItemIds.length >= this.syncPageSize;\n                              if (limit || isSynced) {\n                                limitTimerRace.resolve();\n                              }\n                              // kicks off every subsequent race as results sync down\n                              limitTimerRace.start();\n                              return [2 /*return*/];\n                          }\n                        });\n                      });\n                    }, 'handle observeQuery observed event');\n                  });\n                  // returns a set of initial/locally-available results\n                  generateAndEmitSnapshot();\n                  return [3 /*break*/, 3];\n                case 2:\n                  err_1 = _a.sent();\n                  observer.error(err_1);\n                  return [3 /*break*/, 3];\n                case 3:\n                  return [2 /*return*/];\n              }\n            });\n          });\n        }, 'datastore observequery startup').catch(_this.handleAddProcError('DataStore.observeQuery()')).catch(function (error) {\n          observer.error(error);\n        });\n        /**\n         * Combines the `items`, `itemsChanged`, and `deletedItemIds` collections into\n         * a snapshot in the form of `{ items: T[], isSynced: boolean}`.\n         *\n         * SIDE EFFECT: The shared `items` collection is recreated.\n         */\n        var generateSnapshot = function () {\n          var _a, _b;\n          var isSynced = (_b = (_a = _this.sync) === null || _a === void 0 ? void 0 : _a.getModelSyncedStatus(model)) !== null && _b !== void 0 ? _b : false;\n          var itemsArray = __spread(Array.from(items.values()), Array.from(itemsChanged.values()));\n          items.clear();\n          itemsArray.forEach(function (item) {\n            var itemModelDefinition = getModelDefinition(model);\n            var idOrPk = getIdentifierValue(itemModelDefinition, item);\n            items.set(idOrPk, item);\n          });\n          // remove deleted items from the final result set\n          deletedItemIds.forEach(function (idOrPk) {\n            return items.delete(idOrPk);\n          });\n          var snapshot = Array.from(items.values());\n          // we sort after we merge the snapshots (items, itemsChanged)\n          // otherwise, the merge may not\n          if (options === null || options === void 0 ? void 0 : options.sort) {\n            sortItems(snapshot);\n          }\n          return {\n            items: snapshot,\n            isSynced: isSynced\n          };\n        };\n        /**\n         * Emits the list of items to the observer.\n         *\n         * SIDE EFFECT: `itemsChanged` and `deletedItemIds` are cleared to prepare\n         * for the next snapshot.\n         *\n         * @param snapshot The generated items data to emit.\n         */\n        var emitSnapshot = function (snapshot) {\n          // send the generated snapshot to the primary subscription.\n          // NOTE: This observer's handler *could* be async ...\n          observer.next(snapshot);\n          // reset the changed items sets\n          itemsChanged.clear();\n          deletedItemIds = [];\n        };\n        /**\n         * Sorts an `Array` of `T` according to the sort instructions given in the\n         * original  `observeQuery()` call.\n         *\n         * @param itemsToSort A array of model type.\n         */\n        var sortItems = function (itemsToSort) {\n          var modelDefinition = getModelDefinition(model);\n          var pagination = _this.processPagination(modelDefinition, options);\n          var sortPredicates = ModelSortPredicateCreator.getPredicates(pagination.sort);\n          if (sortPredicates.length) {\n            var compareFn = sortCompareFunction(sortPredicates);\n            itemsToSort.sort(compareFn);\n          }\n        };\n        /**\n         * Force one last snapshot when the model is fully synced.\n         *\n         * This reduces latency for that last snapshot, which will otherwise\n         * wait for the configured timeout.\n         *\n         * @param payload The payload from the Hub event.\n         */\n        var hubCallback = function (_a) {\n          var payload = _a.payload;\n          var _b;\n          var event = payload.event,\n            data = payload.data;\n          if (event === ControlMessage.SYNC_ENGINE_MODEL_SYNCED && ((_b = data === null || data === void 0 ? void 0 : data.model) === null || _b === void 0 ? void 0 : _b.name) === model.name) {\n            generateAndEmitSnapshot();\n            Hub.remove('datastore', hubCallback);\n          }\n        };\n        Hub.listen('datastore', hubCallback);\n        return _this.runningProcesses.addCleaner(function () {\n          return __awaiter(_this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n              if (handle) {\n                handle.unsubscribe();\n              }\n              return [2 /*return*/];\n            });\n          });\n        }, 'datastore observequery cleaner');\n      });\n    };\n    this.configure = function (config) {\n      if (config === void 0) {\n        config = {};\n      }\n      _this.amplifyContext.Auth = _this.Auth;\n      _this.amplifyContext.InternalAPI = _this.InternalAPI;\n      _this.amplifyContext.Cache = _this.Cache;\n      var configDataStore = config.DataStore,\n        configAuthModeStrategyType = config.authModeStrategyType,\n        configConflictHandler = config.conflictHandler,\n        configErrorHandler = config.errorHandler,\n        configMaxRecordsToSync = config.maxRecordsToSync,\n        configSyncPageSize = config.syncPageSize,\n        configFullSyncInterval = config.fullSyncInterval,\n        configSyncExpressions = config.syncExpressions,\n        configAuthProviders = config.authProviders,\n        configStorageAdapter = config.storageAdapter,\n        configFromAmplify = __rest(config, [\"DataStore\", \"authModeStrategyType\", \"conflictHandler\", \"errorHandler\", \"maxRecordsToSync\", \"syncPageSize\", \"fullSyncInterval\", \"syncExpressions\", \"authProviders\", \"storageAdapter\"]);\n      _this.amplifyConfig = __assign(__assign({}, configFromAmplify), _this.amplifyConfig);\n      _this.conflictHandler = _this.setConflictHandler(config);\n      _this.errorHandler = _this.setErrorHandler(config);\n      var authModeStrategyType = configDataStore && configDataStore.authModeStrategyType || configAuthModeStrategyType || AuthModeStrategyType.DEFAULT;\n      switch (authModeStrategyType) {\n        case AuthModeStrategyType.MULTI_AUTH:\n          _this.authModeStrategy = multiAuthStrategy(_this.amplifyContext);\n          break;\n        case AuthModeStrategyType.DEFAULT:\n          _this.authModeStrategy = defaultAuthStrategy;\n          break;\n        default:\n          _this.authModeStrategy = defaultAuthStrategy;\n          break;\n      }\n      // store on config object, so that Sync, Subscription, and Mutation processors can have access\n      _this.amplifyConfig.authProviders = configDataStore && configDataStore.authProviders || configAuthProviders;\n      _this.syncExpressions = configDataStore && configDataStore.syncExpressions || configSyncExpressions || _this.syncExpressions;\n      _this.maxRecordsToSync = configDataStore && configDataStore.maxRecordsToSync || configMaxRecordsToSync || _this.maxRecordsToSync || 10000;\n      // store on config object, so that Sync, Subscription, and Mutation processors can have access\n      _this.amplifyConfig.maxRecordsToSync = _this.maxRecordsToSync;\n      _this.syncPageSize = configDataStore && configDataStore.syncPageSize || configSyncPageSize || _this.syncPageSize || 1000;\n      // store on config object, so that Sync, Subscription, and Mutation processors can have access\n      _this.amplifyConfig.syncPageSize = _this.syncPageSize;\n      _this.fullSyncInterval = configDataStore && configDataStore.fullSyncInterval || configFullSyncInterval || _this.fullSyncInterval || 24 * 60; // 1 day\n      _this.storageAdapter = configDataStore && configDataStore.storageAdapter || configStorageAdapter || _this.storageAdapter || undefined;\n      _this.sessionId = _this.retrieveSessionId();\n    };\n  }\n  DataStore.prototype.getModuleName = function () {\n    return 'DataStore';\n  };\n  /**\n   * Builds a function to capture `BackgroundManagerNotOpenError`'s to produce friendlier,\n   * more instructive errors for customers.\n   *\n   * @param operation The name of the operation (usually a Datastore method) the customer\n   * tried to call.\n   */\n  DataStore.prototype.handleAddProcError = function (operation) {\n    var _this = this;\n    /**\n     * If the tested error is a `BackgroundManagerNotOpenError`, it will be captured\n     * and replaced with a friendlier message that instructs the App Developer.\n     *\n     * @param err An error to test.\n     */\n    var handler = function (err) {\n      if (err.message.startsWith('BackgroundManagerNotOpenError')) {\n        throw new Error([\"DataStoreStateError: Tried to execute `\" + operation + \"` while DataStore was \\\"\" + _this.state + \"\\\".\", \"This can only be done while DataStore is \\\"Started\\\" or \\\"Stopped\\\". To remedy:\", 'Ensure all calls to `stop()` and `clear()` have completed first.', 'If this is not possible, retry the operation until it succeeds.'].join('\\n'));\n      } else {\n        throw err;\n      }\n    };\n    return handler;\n  };\n  /**\n   * Clears all data from storage and removes all data, schema info, other\n   * initialization details, and then stops DataStore.\n   *\n   * That said, reinitialization is required after clearing. This can be done\n   * by explicitiliy calling `start()` or any method that implicitly starts\n   * DataStore, such as `query()`, `save()`, or `delete()`.\n   */\n  DataStore.prototype.clear = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            checkSchemaInitialized();\n            this.state = DataStoreState.Clearing;\n            return [4 /*yield*/, this.runningProcesses.close()];\n          case 1:\n            _a.sent();\n            if (!(this.storage === undefined)) return [3 /*break*/, 3];\n            // connect to storage so that it can be cleared without fully starting DataStore\n            this.storage = new Storage(schema, namespaceResolver, getModelConstructorByModelName, modelInstanceCreator, this.storageAdapter, this.sessionId);\n            return [4 /*yield*/, this.storage.init()];\n          case 2:\n            _a.sent();\n            _a.label = 3;\n          case 3:\n            if (syncSubscription && !syncSubscription.closed) {\n              syncSubscription.unsubscribe();\n            }\n            if (!this.sync) return [3 /*break*/, 5];\n            return [4 /*yield*/, this.sync.stop()];\n          case 4:\n            _a.sent();\n            _a.label = 5;\n          case 5:\n            return [4 /*yield*/, this.storage.clear()];\n          case 6:\n            _a.sent();\n            this.initialized = undefined; // Should re-initialize when start() is called.\n            this.storage = undefined;\n            this.sync = undefined;\n            this.syncPredicates = new WeakMap();\n            return [4 /*yield*/, this.runningProcesses.open()];\n          case 7:\n            _a.sent();\n            this.state = DataStoreState.NotRunning;\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Stops all DataStore sync activities.\n   *\n   * TODO: \"Waits for graceful termination of\n   * running queries and terminates subscriptions.\"\n   */\n  DataStore.prototype.stop = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.state = DataStoreState.Stopping;\n            return [4 /*yield*/, this.runningProcesses.close()];\n          case 1:\n            _a.sent();\n            if (syncSubscription && !syncSubscription.closed) {\n              syncSubscription.unsubscribe();\n            }\n            if (!this.sync) return [3 /*break*/, 3];\n            return [4 /*yield*/, this.sync.stop()];\n          case 2:\n            _a.sent();\n            _a.label = 3;\n          case 3:\n            this.initialized = undefined; // Should re-initialize when start() is called.\n            this.sync = undefined;\n            return [4 /*yield*/, this.runningProcesses.open()];\n          case 4:\n            _a.sent();\n            this.state = DataStoreState.NotRunning;\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Validates given pagination input from a query and creates a pagination\n   * argument for use against the storage layer.\n   *\n   * @param modelDefinition\n   * @param paginationProducer\n   */\n  DataStore.prototype.processPagination = function (modelDefinition, paginationProducer) {\n    var sortPredicate;\n    var _a = paginationProducer || {},\n      limit = _a.limit,\n      page = _a.page,\n      sort = _a.sort;\n    if (limit === undefined && page === undefined && sort === undefined) {\n      return undefined;\n    }\n    if (page !== undefined && limit === undefined) {\n      throw new Error('Limit is required when requesting a page');\n    }\n    if (page !== undefined) {\n      if (typeof page !== 'number') {\n        throw new Error('Page should be a number');\n      }\n      if (page < 0) {\n        throw new Error(\"Page can't be negative\");\n      }\n    }\n    if (limit !== undefined) {\n      if (typeof limit !== 'number') {\n        throw new Error('Limit should be a number');\n      }\n      if (limit < 0) {\n        throw new Error(\"Limit can't be negative\");\n      }\n    }\n    if (sort) {\n      sortPredicate = ModelSortPredicateCreator.createFromExisting(modelDefinition, sort);\n    }\n    return {\n      limit: limit,\n      page: page,\n      sort: sortPredicate\n    };\n  };\n  /**\n   * Examines the configured `syncExpressions` and produces a WeakMap of\n   * SchemaModel -> predicate to use during sync.\n   */\n  DataStore.prototype.processSyncExpressions = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var syncPredicates;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.syncExpressions || !this.syncExpressions.length) {\n              return [2 /*return*/, new WeakMap()];\n            }\n            return [4 /*yield*/, Promise.all(this.syncExpressions.map(function (syncExpression) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var _a, modelConstructor, conditionProducer, modelDefinition, condition, predicate;\n                return __generator(this, function (_b) {\n                  switch (_b.label) {\n                    case 0:\n                      return [4 /*yield*/, syncExpression];\n                    case 1:\n                      _a = _b.sent(), modelConstructor = _a.modelConstructor, conditionProducer = _a.conditionProducer;\n                      modelDefinition = getModelDefinition(modelConstructor);\n                      return [4 /*yield*/, this.unwrapPromise(conditionProducer)];\n                    case 2:\n                      condition = _b.sent();\n                      if (isPredicatesAll(condition)) {\n                        return [2 /*return*/, [modelDefinition, null]];\n                      }\n                      predicate = internals(condition(predicateFor({\n                        builder: modelConstructor,\n                        schema: modelDefinition,\n                        pkField: extractPrimaryKeyFieldNames(modelDefinition)\n                      }))).toStoragePredicate();\n                      return [2 /*return*/, [modelDefinition, predicate]];\n                  }\n                });\n              });\n            }))];\n          case 1:\n            syncPredicates = _a.sent();\n            return [2 /*return*/, this.weakMapFromEntries(syncPredicates)];\n        }\n      });\n    });\n  };\n  DataStore.prototype.unwrapPromise = function (conditionProducer) {\n    return __awaiter(this, void 0, void 0, function () {\n      var condition, error_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, conditionProducer()];\n          case 1:\n            condition = _a.sent();\n            return [2 /*return*/, condition || conditionProducer];\n          case 2:\n            error_1 = _a.sent();\n            if (error_1 instanceof TypeError) {\n              return [2 /*return*/, conditionProducer];\n            }\n            throw error_1;\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  DataStore.prototype.weakMapFromEntries = function (entries) {\n    return entries.reduce(function (map, _a) {\n      var _b = __read(_a, 2),\n        modelDefinition = _b[0],\n        predicate = _b[1];\n      if (map.has(modelDefinition)) {\n        var name_2 = modelDefinition.name;\n        logger.warn(\"You can only utilize one Sync Expression per model.\\n          Subsequent sync expressions for the \" + name_2 + \" model will be ignored.\");\n        return map;\n      }\n      if (predicate) {\n        map.set(modelDefinition, predicate);\n      }\n      return map;\n    }, new WeakMap());\n  };\n  /**\n   * A session ID to allow CMS to open databases against multiple apps.\n   * This session ID is only expected be set by AWS Amplify Studio.\n   */\n  DataStore.prototype.retrieveSessionId = function () {\n    try {\n      var sessionId = sessionStorage.getItem('datastoreSessionId');\n      if (sessionId) {\n        var aws_appsync_graphqlEndpoint = this.amplifyConfig.aws_appsync_graphqlEndpoint;\n        var appSyncUrl = aws_appsync_graphqlEndpoint.split('/')[2];\n        var _a = __read(appSyncUrl.split('.'), 1),\n          appSyncId = _a[0];\n        return sessionId + \"-\" + appSyncId;\n      }\n    } catch (_b) {}\n    return undefined;\n  };\n  return DataStore;\n}();\nvar instance = new DataStore();\nAmplify.register(instance);\nexport { DataStore as DataStoreClass, initSchema, instance as DataStore };\n//# sourceMappingURL=datastore.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}