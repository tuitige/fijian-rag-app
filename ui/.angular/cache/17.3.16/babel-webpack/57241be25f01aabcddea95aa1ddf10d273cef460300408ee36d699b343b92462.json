{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (g && (g = 0, op[0] && (_ = 0)), _) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nimport { ConsoleLogger as Logger, StorageAction } from '@aws-amplify/core';\nimport { putObject, createMultipartUpload, uploadPart, completeMultipartUpload, abortMultipartUpload, listParts } from '../AwsClients/S3';\nimport { SEND_DOWNLOAD_PROGRESS_EVENT, SEND_UPLOAD_PROGRESS_EVENT } from '../AwsClients/S3/utils';\nimport { EventEmitter } from 'events';\nimport { calculateContentMd5 } from '../common/MD5utils';\nimport { calculatePartSize, DEFAULT_PART_SIZE, DEFAULT_QUEUE_SIZE, MAX_OBJECT_SIZE, loadS3Config, getPrefix, credentialsProvider } from '../common/S3ClientUtils';\nvar logger = new Logger('AWSS3ProviderManagedUpload');\nvar AWSS3ProviderManagedUpload = /** @class */function () {\n  function AWSS3ProviderManagedUpload(params, opts, emitter) {\n    this.opts = null;\n    this.completedParts = [];\n    this.partSize = DEFAULT_PART_SIZE;\n    // Progress reporting\n    this.bytesUploaded = 0;\n    this.totalBytesToUpload = 0;\n    this.emitter = null;\n    this.params = params;\n    this.opts = __assign({\n      isObjectLockEnabled: false\n    }, opts);\n    this.emitter = emitter;\n    this.s3Config = loadS3Config(__assign(__assign({}, opts), {\n      emitter: emitter,\n      storageAction: StorageAction.Put\n    }));\n  }\n  AWSS3ProviderManagedUpload.prototype.upload = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var isObjectLockEnabled, _a, _b, _c, _d, _e, numberOfPartsToUpload, parts, start, error_1;\n      var _f;\n      var _this = this;\n      return __generator(this, function (_g) {\n        switch (_g.label) {\n          case 0:\n            _g.trys.push([0, 12,, 14]);\n            isObjectLockEnabled = this.opts.isObjectLockEnabled;\n            if (!(isObjectLockEnabled === true)) return [3 /*break*/, 2];\n            _a = this.params;\n            return [4 /*yield*/, calculateContentMd5(\n            // @ts-expect-error currently ReadableStream<any> is not being supported in put api\n            this.params.Body)];\n          case 1:\n            _a.ContentMD5 = _g.sent();\n            _g.label = 2;\n          case 2:\n            this.body = this.validateAndSanitizeBody(this.params.Body);\n            this.totalBytesToUpload = this.byteLength(this.body);\n            if (!(this.totalBytesToUpload <= DEFAULT_PART_SIZE)) return [3 /*break*/, 4];\n            // Multipart upload is not required. Upload the sanitized body as is\n            this.params.Body = this.body;\n            _b = putObject;\n            _c = [this.s3Config];\n            _d = [__assign({}, this.params)];\n            _f = {};\n            return [4 /*yield*/, this.getObjectKeyWithPrefix(this.params.Key)];\n          case 3:\n            return [2 /*return*/, _b.apply(void 0, _c.concat([__assign.apply(void 0, _d.concat([(_f.Key = _g.sent(), _f)]))]))];\n          case 4:\n            // Step 1: Determine appropriate part size.\n            this.partSize = calculatePartSize(this.totalBytesToUpload);\n            // Step 2: Initiate the multi part upload\n            _e = this;\n            return [4 /*yield*/, this.createMultiPartUpload()];\n          case 5:\n            // Step 2: Initiate the multi part upload\n            _e.uploadId = _g.sent();\n            numberOfPartsToUpload = Math.ceil(this.totalBytesToUpload / this.partSize);\n            parts = this.createParts();\n            start = 0;\n            _g.label = 6;\n          case 6:\n            if (!(start < numberOfPartsToUpload)) return [3 /*break*/, 9];\n            // Upload as many as `queueSize` parts simultaneously\n            return [4 /*yield*/, this.uploadParts(this.uploadId, parts.slice(start, start + DEFAULT_QUEUE_SIZE))];\n          case 7:\n            // Upload as many as `queueSize` parts simultaneously\n            _g.sent();\n            _g.label = 8;\n          case 8:\n            start += DEFAULT_QUEUE_SIZE;\n            return [3 /*break*/, 6];\n          case 9:\n            parts.map(function (part) {\n              _this.removeEventListener(part);\n            });\n            return [4 /*yield*/, this.finishMultiPartUpload(this.uploadId)];\n          case 10:\n            // Step 3: Finalize the upload such that S3 can recreate the file\n            return [2 /*return*/, _g.sent()];\n          case 11:\n            return [3 /*break*/, 14];\n          case 12:\n            error_1 = _g.sent();\n            // if any error is thrown, call cleanup\n            return [4 /*yield*/, this.cleanup(this.uploadId)];\n          case 13:\n            // if any error is thrown, call cleanup\n            _g.sent();\n            logger.error('Error. Cancelling the multipart upload.');\n            throw error_1;\n          case 14:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  AWSS3ProviderManagedUpload.prototype.createParts = function () {\n    try {\n      var parts = [];\n      for (var bodyStart = 0; bodyStart < this.totalBytesToUpload;) {\n        var bodyEnd = Math.min(bodyStart + this.partSize, this.totalBytesToUpload);\n        parts.push({\n          bodyPart: this.body.slice(bodyStart, bodyEnd),\n          partNumber: parts.length + 1,\n          emitter: new EventEmitter(),\n          _lastUploadedBytes: 0\n        });\n        bodyStart += this.partSize;\n      }\n      return parts;\n    } catch (error) {\n      logger.error(error);\n      throw error;\n    }\n  };\n  AWSS3ProviderManagedUpload.prototype.createMultiPartUpload = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var response, _a, _b, _c, error_2;\n      var _d;\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            _e.trys.push([0, 3,, 4]);\n            _a = createMultipartUpload;\n            _b = [this.s3Config];\n            _c = [__assign({}, this.params)];\n            _d = {};\n            return [4 /*yield*/, this.getObjectKeyWithPrefix(this.params.Key)];\n          case 1:\n            return [4 /*yield*/, _a.apply(void 0, _b.concat([__assign.apply(void 0, _c.concat([(_d.Key = _e.sent(), _d)]))]))];\n          case 2:\n            response = _e.sent();\n            logger.debug(response.UploadId);\n            return [2 /*return*/, response.UploadId];\n          case 3:\n            error_2 = _e.sent();\n            logger.error(error_2);\n            throw error_2;\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * @private Not to be extended outside of tests\n   * @VisibleFotTesting\n   */\n  AWSS3ProviderManagedUpload.prototype.uploadParts = function (uploadId, parts) {\n    return __awaiter(this, void 0, void 0, function () {\n      var allResults, i, error_3;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, Promise.all(parts.map(function (part) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var isObjectLockEnabled, _a, _b, Key, Bucket, SSECustomerAlgorithm, SSECustomerKey, SSECustomerKeyMD5, ContentMD5, res, _c, _d;\n                var _e;\n                return __generator(this, function (_f) {\n                  switch (_f.label) {\n                    case 0:\n                      this.setupEventListener(part);\n                      isObjectLockEnabled = this.opts.isObjectLockEnabled;\n                      if (!isObjectLockEnabled) return [3 /*break*/, 2];\n                      _a = this.params;\n                      return [4 /*yield*/, calculateContentMd5(part.bodyPart)];\n                    case 1:\n                      _a.ContentMD5 = _f.sent();\n                      _f.label = 2;\n                    case 2:\n                      _b = this.params, Key = _b.Key, Bucket = _b.Bucket, SSECustomerAlgorithm = _b.SSECustomerAlgorithm, SSECustomerKey = _b.SSECustomerKey, SSECustomerKeyMD5 = _b.SSECustomerKeyMD5, ContentMD5 = _b.ContentMD5;\n                      _c = uploadPart;\n                      _d = [__assign(__assign({}, this.s3Config), {\n                        emitter: part.emitter\n                      })];\n                      _e = {\n                        PartNumber: part.partNumber,\n                        Body: part.bodyPart,\n                        UploadId: uploadId\n                      };\n                      return [4 /*yield*/, this.getObjectKeyWithPrefix(this.params.Key)];\n                    case 3:\n                      return [4 /*yield*/, _c.apply(void 0, _d.concat([(_e.Key = _f.sent(), _e.Bucket = Bucket, _e.SSECustomerAlgorithm = SSECustomerAlgorithm, _e.SSECustomerKey = SSECustomerKey, _e.SSECustomerKeyMD5 = SSECustomerKeyMD5, _e.ContentMD5 = ContentMD5, _e)]))];\n                    case 4:\n                      res = _f.sent();\n                      return [2 /*return*/, res];\n                  }\n                });\n              });\n            }))];\n          case 1:\n            allResults = _a.sent();\n            // The order of resolved promises is the same as input promise order.\n            for (i = 0; i < allResults.length; i++) {\n              this.completedParts.push({\n                PartNumber: parts[i].partNumber,\n                ETag: allResults[i].ETag\n              });\n            }\n            return [3 /*break*/, 3];\n          case 2:\n            error_3 = _a.sent();\n            logger.error('Error happened while uploading a part. Cancelling the multipart upload');\n            throw error_3;\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  AWSS3ProviderManagedUpload.prototype.finishMultiPartUpload = function (uploadId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var input, Key, error_4;\n      var _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = {\n              Bucket: this.params.Bucket\n            };\n            return [4 /*yield*/, this.getObjectKeyWithPrefix(this.params.Key)];\n          case 1:\n            input = (_a.Key = _b.sent(), _a.UploadId = uploadId, _a.MultipartUpload = {\n              Parts: this.completedParts\n            }, _a);\n            _b.label = 2;\n          case 2:\n            _b.trys.push([2, 4,, 5]);\n            return [4 /*yield*/, completeMultipartUpload(__assign(__assign({}, this.s3Config), {\n              emitter: undefined\n            }), input)];\n          case 3:\n            Key = _b.sent().Key;\n            return [2 /*return*/, Key];\n          case 4:\n            error_4 = _b.sent();\n            logger.error('Error happened while finishing the upload.');\n            throw error_4;\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  AWSS3ProviderManagedUpload.prototype.cleanup = function (uploadId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var input, data;\n      var _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            // Reset this's state\n            this.body = null;\n            this.completedParts = [];\n            this.bytesUploaded = 0;\n            this.totalBytesToUpload = 0;\n            if (!uploadId) {\n              // This is a single part upload;\n              return [2 /*return*/];\n            }\n            _a = {\n              Bucket: this.params.Bucket\n            };\n            return [4 /*yield*/, this.getObjectKeyWithPrefix(this.params.Key)];\n          case 1:\n            input = (_a.Key = _b.sent(), _a.UploadId = uploadId, _a);\n            return [4 /*yield*/, abortMultipartUpload(this.s3Config, input)];\n          case 2:\n            _b.sent();\n            return [4 /*yield*/, listParts(this.s3Config, input)];\n          case 3:\n            data = _b.sent();\n            if (data && data.Parts && data.Parts.length > 0) {\n              throw new Error('Multipart upload clean up failed.');\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  AWSS3ProviderManagedUpload.prototype.removeEventListener = function (part) {\n    part.emitter.removeAllListeners(SEND_UPLOAD_PROGRESS_EVENT);\n    part.emitter.removeAllListeners(SEND_DOWNLOAD_PROGRESS_EVENT);\n  };\n  AWSS3ProviderManagedUpload.prototype.setupEventListener = function (part) {\n    var _this = this;\n    part.emitter.on(SEND_UPLOAD_PROGRESS_EVENT, function (progress) {\n      _this.progressChanged(part.partNumber, progress.loaded - part._lastUploadedBytes);\n      part._lastUploadedBytes = progress.loaded;\n    });\n  };\n  AWSS3ProviderManagedUpload.prototype.progressChanged = function (partNumber, incrementalUpdate) {\n    this.bytesUploaded += incrementalUpdate;\n    this.emitter.emit(SEND_UPLOAD_PROGRESS_EVENT, {\n      loaded: this.bytesUploaded,\n      total: this.totalBytesToUpload,\n      part: partNumber,\n      key: this.params.Key\n    });\n  };\n  AWSS3ProviderManagedUpload.prototype.byteLength = function (input) {\n    if (input === null || input === undefined) return 0;\n    if (typeof input.byteLength === 'number') {\n      return input.byteLength;\n    } else if (typeof input.length === 'number') {\n      return input.length;\n    } else if (typeof input.size === 'number') {\n      return input.size;\n    } else if (typeof input.path === 'string') {\n      /* NodeJs Support\n      return require('fs').lstatSync(input.path).size;\n      */\n    } else {\n      throw new Error('Cannot determine length of ' + input);\n    }\n  };\n  AWSS3ProviderManagedUpload.prototype.validateAndSanitizeBody = function (body) {\n    var sanitizedBody = this.isGenericObject(body) ? JSON.stringify(body) : body;\n    /* TODO: streams and files for nodejs\n    if (\n        typeof body.path === 'string' &&\n        require('fs').lstatSync(body.path).size > 0\n    ) {\n        sanitizedBody = body;\n    } */\n    if (this.byteLength(sanitizedBody) > MAX_OBJECT_SIZE) {\n      throw new Error(\"File size bigger than S3 Object limit of 5TB, got \".concat(this.totalBytesToUpload, \" Bytes\"));\n    }\n    return sanitizedBody;\n  };\n  AWSS3ProviderManagedUpload.prototype.isGenericObject = function (body) {\n    if (body !== null && typeof body === 'object') {\n      try {\n        return !(this.byteLength(body) >= 0);\n      } catch (error) {\n        // If we cannot determine the length of the body, consider it\n        // as a generic object and upload a stringified version of it\n        return true;\n      }\n    }\n    return false;\n  };\n  AWSS3ProviderManagedUpload.prototype.getObjectKeyWithPrefix = function (keyWithoutPrefix) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, _b;\n      var _c;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            _a = getPrefix;\n            _b = [__assign({}, this.opts)];\n            _c = {};\n            return [4 /*yield*/, credentialsProvider()];\n          case 1:\n            return [4 /*yield*/, _a.apply(void 0, [__assign.apply(void 0, _b.concat([(_c.credentials = _d.sent(), _c)]))])];\n          case 2:\n            return [2 /*return*/, _d.sent() + keyWithoutPrefix];\n        }\n      });\n    });\n  };\n  return AWSS3ProviderManagedUpload;\n}();\nexport { AWSS3ProviderManagedUpload };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}