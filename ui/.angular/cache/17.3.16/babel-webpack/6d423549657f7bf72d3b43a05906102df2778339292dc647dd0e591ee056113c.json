{"ast":null,"code":"import { __read, __values } from \"tslib\";\nexport function map(arg0, arg1, arg2) {\n  var e_1, _a;\n  var target;\n  var filter;\n  var instructions;\n  if (typeof arg1 === \"undefined\" && typeof arg2 === \"undefined\") {\n    target = {};\n    instructions = arg0;\n  } else {\n    target = arg0;\n    if (typeof arg1 === \"function\") {\n      filter = arg1;\n      instructions = arg2;\n      return mapWithFilter(target, filter, instructions);\n    } else {\n      instructions = arg1;\n    }\n  }\n  try {\n    for (var _b = __values(Object.keys(instructions)), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var key = _c.value;\n      if (!Array.isArray(instructions[key])) {\n        target[key] = instructions[key];\n        continue;\n      }\n      var _d = __read(instructions[key], 2),\n        filter_1 = _d[0],\n        value = _d[1];\n      if (typeof value === \"function\") {\n        var _value = void 0;\n        var defaultFilterPassed = filter_1 === undefined && (_value = value()) != null;\n        var customFilterPassed = typeof filter_1 === \"function\" && !!filter_1(void 0) || typeof filter_1 !== \"function\" && !!filter_1;\n        if (defaultFilterPassed) {\n          target[key] = _value;\n        } else if (customFilterPassed) {\n          target[key] = value();\n        }\n      } else {\n        var defaultFilterPassed = filter_1 === undefined && value != null;\n        var customFilterPassed = typeof filter_1 === \"function\" && !!filter_1(value) || typeof filter_1 !== \"function\" && !!filter_1;\n        if (defaultFilterPassed || customFilterPassed) {\n          target[key] = value;\n        }\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n  return target;\n}\nexport var convertMap = function (target) {\n  var e_2, _a;\n  var output = {};\n  try {\n    for (var _b = __values(Object.entries(target || {})), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var _d = __read(_c.value, 2),\n        k = _d[0],\n        v = _d[1];\n      output[k] = [, v];\n    }\n  } catch (e_2_1) {\n    e_2 = {\n      error: e_2_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_2) throw e_2.error;\n    }\n  }\n  return output;\n};\nvar mapWithFilter = function (target, filter, instructions) {\n  return map(target, Object.entries(instructions).reduce(function (_instructions, _a) {\n    var _b = __read(_a, 2),\n      key = _b[0],\n      value = _b[1];\n    if (Array.isArray(value)) {\n      _instructions[key] = value;\n    } else {\n      if (typeof value === \"function\") {\n        _instructions[key] = [filter, value()];\n      } else {\n        _instructions[key] = [filter, value];\n      }\n    }\n    return _instructions;\n  }, {}));\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}