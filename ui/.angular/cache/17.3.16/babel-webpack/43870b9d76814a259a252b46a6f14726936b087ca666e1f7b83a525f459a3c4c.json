{"ast":null,"code":"import { __assign } from './_virtual/_tslib.js';\nvar defaultOptions = {\n  deferEvents: false\n};\nvar Scheduler = /*#__PURE__*/\n\n/** @class */\nfunction () {\n  function Scheduler(options) {\n    this.processingEvent = false;\n    this.queue = [];\n    this.initialized = false;\n    this.options = __assign(__assign({}, defaultOptions), options);\n  }\n  Scheduler.prototype.initialize = function (callback) {\n    this.initialized = true;\n    if (callback) {\n      if (!this.options.deferEvents) {\n        this.schedule(callback);\n        return;\n      }\n      this.process(callback);\n    }\n    this.flushEvents();\n  };\n  Scheduler.prototype.schedule = function (task) {\n    if (!this.initialized || this.processingEvent) {\n      this.queue.push(task);\n      return;\n    }\n    if (this.queue.length !== 0) {\n      throw new Error('Event queue should be empty when it is not processing events');\n    }\n    this.process(task);\n    this.flushEvents();\n  };\n  Scheduler.prototype.clear = function () {\n    this.queue = [];\n  };\n  Scheduler.prototype.flushEvents = function () {\n    var nextCallback = this.queue.shift();\n    while (nextCallback) {\n      this.process(nextCallback);\n      nextCallback = this.queue.shift();\n    }\n  };\n  Scheduler.prototype.process = function (callback) {\n    this.processingEvent = true;\n    try {\n      callback();\n    } catch (e) {\n      // there is no use to keep the future events\n      // as the situation is not anymore the same\n      this.clear();\n      throw e;\n    } finally {\n      this.processingEvent = false;\n    }\n  };\n  return Scheduler;\n}();\nexport { Scheduler };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}