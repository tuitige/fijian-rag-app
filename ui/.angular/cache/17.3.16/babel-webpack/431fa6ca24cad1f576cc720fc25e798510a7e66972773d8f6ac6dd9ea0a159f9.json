{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { PutDestinationRequest, PutDestinationResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1PutDestinationCommand, serializeAws_json1_1PutDestinationCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Creates or updates a destination. This operation is used only to create destinations for cross-account subscriptions.</p>\n *          <p>A destination encapsulates a physical resource (such\n *       as an Amazon Kinesis stream) and enables you to subscribe to a real-time stream of log events\n *       for a different account, ingested using <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutLogEvents.html\">PutLogEvents</a>.</p>\n *          <p>Through an access policy, a destination controls what is written to it.\n *       By default, <code>PutDestination</code> does not set any access policy with the destination,\n *       which means a cross-account user cannot call <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutSubscriptionFilter.html\">PutSubscriptionFilter</a> against\n *       this destination. To enable this, the destination owner must call <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutDestinationPolicy.html\">PutDestinationPolicy</a> after <code>PutDestination</code>.</p>\n *          <p>To perform a <code>PutDestination</code> operation, you must also have the\n *     <code>iam:PassRole</code> permission.</p>\n */\nvar PutDestinationCommand = /** @class */function (_super) {\n  __extends(PutDestinationCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function PutDestinationCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  PutDestinationCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"CloudWatchLogsClient\";\n    var commandName = \"PutDestinationCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: PutDestinationRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: PutDestinationResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  PutDestinationCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1PutDestinationCommand(input, context);\n  };\n  PutDestinationCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1PutDestinationCommand(output, context);\n  };\n  return PutDestinationCommand;\n}($Command);\nexport { PutDestinationCommand };\n//# sourceMappingURL=PutDestinationCommand.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}